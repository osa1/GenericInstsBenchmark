
==================== Tidy Core ====================
2015-08-22 22:11:09.587028 UTC

Result size of Tidy Core
  = {terms: 2,438, types: 3,708, coercions: 1,212}

a1_rerR
  :: forall c_XbYM word_acKy a1_acKz.
     (Ord word_acKy, Num word_acKy, Data.Bits.Bits word_acKy) =>
     word_acKy
     -> word_acKy
     -> forall r_acKF.
        Data.ByteString.Internal.ByteString
        -> Data.Binary.Get.Internal.Success
             (M1 C c_XbYM (M1 S NoSelector (Rec0 Int)) a1_acKz) r_acKF
        -> Data.Binary.Get.Internal.Decoder r_acKF
a1_rerR =
  \ (@ c_XbYM)
    (@ word_XcQP)
    (@ a17_XcQR)
    _
    _
    _
    _
    _
    (@ r_XcR3)
    (eta_XcR5 :: Data.ByteString.Internal.ByteString)
    (eta1_XcR7
       :: Data.Binary.Get.Internal.Success
            (M1 C c_XbYM (M1 S NoSelector (Rec0 Int)) a17_XcQR) r_XcR3) ->
    case eta_XcR5
    of _
    { Data.ByteString.Internal.PS ww1_acHI ww2_acHJ ww3_acHK
                                  ww4_acHL ->
    binary-0.7.3.0:Data.Binary.Class.$wa3
      @ r_XcR3
      ww1_acHI
      ww2_acHJ
      ww3_acHK
      ww4_acHL
      (\ (i'_adoH :: Data.ByteString.Internal.ByteString)
         (a18_adoI :: Word64) ->
         eta1_XcR7
           i'_adoH
           (case a18_adoI of _ { GHC.Word.W64# x#_adoL ->
            (ghc-prim-0.4.0.0:GHC.Types.I#
               (ghc-prim-0.4.0.0:GHC.Prim.word2Int# x#_adoL))
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <a17_XcQR>_P)
                    ; Sym (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R Int>_R)
                      ; Sym
                          (GHC.Generics.NTCo:M1[0]
                             <C>_P <c_XbYM>_P <M1 S NoSelector (Rec0 Int)>_R) <a17_XcQR>_N
                    :: Int ~R# M1 C c_XbYM (M1 S NoSelector (Rec0 Int)) a17_XcQR)
            }))
    }

$wa8_rerS
  :: forall i_XbY0 c_XbY2 t_acKn r_acKo.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success
          (M1 i_XbY0 c_XbY2 (K1 R Int) t_acKn) r_acKo
     -> Data.Binary.Get.Internal.Decoder r_acKo
$wa8_rerS =
  \ (@ i_XbY0)
    (@ c_XbY2)
    (@ t_acKn)
    (@ r_acKo)
    (ww_sdHL :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdHM :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdHN :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdHO :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdHI
       :: Data.Binary.Get.Internal.Success
            (M1 i_XbY0 c_XbY2 (K1 R Int) t_acKn) r_acKo) ->
    binary-0.7.3.0:Data.Binary.Class.$wa3
      @ r_acKo
      ww_sdHL
      ww1_sdHM
      ww2_sdHN
      ww3_sdHO
      (\ (i'_adoH :: Data.ByteString.Internal.ByteString)
         (a17_adoI :: Word64) ->
         w_sdHI
           i'_adoH
           (case a17_adoI of _ { GHC.Word.W64# x#_adoL ->
            (ghc-prim-0.4.0.0:GHC.Types.I#
               (ghc-prim-0.4.0.0:GHC.Prim.word2Int# x#_adoL))
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <t_acKn>_P)
                    ; Sym
                        (GHC.Generics.NTCo:M1[0]
                           <i_XbY0>_P <c_XbY2>_P <K1 R Int>_R) <t_acKn>_N
                    :: Int ~R# M1 i_XbY0 c_XbY2 (K1 R Int) t_acKn)
            }))

a2_rerT
  :: forall i_XbY0 c_XbY2 t_acKn r_acKo.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          (M1 i_XbY0 c_XbY2 (K1 R Int) t_acKn) r_acKo
     -> Data.Binary.Get.Internal.Decoder r_acKo
a2_rerT =
  \ (@ i_XbY0)
    (@ c_XbY2)
    (@ t_acKn)
    (@ r_acKo)
    (w_sdHH :: Data.ByteString.Internal.ByteString)
    (w1_sdHI
       :: Data.Binary.Get.Internal.Success
            (M1 i_XbY0 c_XbY2 (K1 R Int) t_acKn) r_acKo) ->
    case w_sdHH
    of _
    { Data.ByteString.Internal.PS ww1_sdHL ww2_sdHM ww3_sdHN
                                  ww4_sdHO ->
    $wa8_rerS
      @ i_XbY0
      @ c_XbY2
      @ t_acKn
      @ r_acKo
      ww1_sdHL
      ww2_sdHM
      ww3_sdHN
      ww4_sdHO
      w1_sdHI
    }

$wa9_rerU
  :: forall i_XbY6 t_acHt r_acHu.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success (K1 i_XbY6 Int t_acHt) r_acHu
     -> Data.Binary.Get.Internal.Decoder r_acHu
$wa9_rerU =
  \ (@ i_XbY6)
    (@ t_acHt)
    (@ r_acHu)
    (ww_sdHV :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdHW :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdHX :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdHY :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdHS
       :: Data.Binary.Get.Internal.Success
            (K1 i_XbY6 Int t_acHt) r_acHu) ->
    binary-0.7.3.0:Data.Binary.Class.$wa3
      @ r_acHu
      ww_sdHV
      ww1_sdHW
      ww2_sdHX
      ww3_sdHY
      (\ (i'_adoH :: Data.ByteString.Internal.ByteString)
         (a17_adoI :: Word64) ->
         w_sdHS
           i'_adoH
           (case a17_adoI of _ { GHC.Word.W64# x#_adoL ->
            (ghc-prim-0.4.0.0:GHC.Types.I#
               (ghc-prim-0.4.0.0:GHC.Prim.word2Int# x#_adoL))
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <i_XbY6>_P <Int>_R <t_acHt>_P)
                    :: Int ~R# K1 i_XbY6 Int t_acHt)
            }))

a3_rerV
  :: forall i_XbY6 t_acHt r_acHu.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success (K1 i_XbY6 Int t_acHt) r_acHu
     -> Data.Binary.Get.Internal.Decoder r_acHu
a3_rerV =
  \ (@ i_XbY6)
    (@ t_acHt)
    (@ r_acHu)
    (w_sdHR :: Data.ByteString.Internal.ByteString)
    (w1_sdHS
       :: Data.Binary.Get.Internal.Success
            (K1 i_XbY6 Int t_acHt) r_acHu) ->
    case w_sdHR
    of _
    { Data.ByteString.Internal.PS ww1_sdHV ww2_sdHW ww3_sdHX
                                  ww4_sdHY ->
    $wa9_rerU
      @ i_XbY6
      @ t_acHt
      @ r_acHu
      ww1_sdHV
      ww2_sdHW
      ww3_sdHX
      ww4_sdHY
      w1_sdHS
    }

Main.main6 :: [Char]
Main.main6 = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Binary"#

Main.main7 :: [Char]
Main.main7 = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "NFData"#

Main.main8 :: [Char]
Main.main8 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Hand-written"#

Main.main12 :: [Char]
Main.main12 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Generic"#

Main.$fShowTree2 :: Int
Main.$fShowTree2 = ghc-prim-0.4.0.0:GHC.Types.I# 0

lvl_rerW :: [Char]
lvl_rerW = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Branch "#

lvl1_rerX :: Int
lvl1_rerX = ghc-prim-0.4.0.0:GHC.Types.I# 11

lvl2_rerY :: [Char]
lvl2_rerY = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Leaf "#

lvl3_rerZ :: [Char]
lvl3_rerZ = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Branch1 "#

lvl4_res0 :: [Char]
lvl4_res0 = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Leaf1 "#

Main.$s$fGBinary:+:4
  :: forall i_XbY6 t_ac4Q. K1 i_XbY6 Int t_ac4Q -> Put
Main.$s$fGBinary:+:4 =
  \ (@ i_XbY6) (@ t_acAv) (eta_acAw :: K1 i_XbY6 Int t_acAv) ->
    binary-0.7.3.0:Data.Binary.Class.$fBinaryInt_$cput
      (eta_acAw
       `cast` (GHC.Generics.NTCo:K1[0] <i_XbY6>_P <Int>_R <t_acAv>_P
               :: K1 i_XbY6 Int t_acAv ~R# Int))

lvl6_res2
  :: forall i_XbY0 c_XbY2 t_ac9s.
     M1 i_XbY0 c_XbY2 (K1 R Int) t_ac9s -> Put
lvl6_res2 =
  \ (@ i_XbY0)
    (@ c_XbY2)
    (@ t_acA9)
    (eta_acAa :: M1 i_XbY0 c_XbY2 (K1 R Int) t_acA9) ->
    binary-0.7.3.0:Data.Binary.Class.$fBinaryInt_$cput
      (eta_acAa
       `cast` (GHC.Generics.NTCo:M1[0]
                 <i_XbY0>_P <c_XbY2>_P <K1 R Int>_R <t_acA9>_N
               ; GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <t_acA9>_P
               :: M1 i_XbY0 c_XbY2 (K1 R Int) t_acA9 ~R# Int))

lvl7_res3 :: [Char]
lvl7_res3 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString#
    "get for Tree1: encoding or decoding error"#

Main.$fConstructorTree2 :: [Char]
Main.$fConstructorTree2 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Branch"#

Main.$fConstructorTree1 :: [Char]
Main.$fConstructorTree1 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Leaf"#

Main.$fDatatypeTree1 :: [Char]
Main.$fDatatypeTree1 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Main"#

Main.$fDatatypeTree2 :: [Char]
Main.$fDatatypeTree2 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Tree"#

Main.$s$fGBinary:+:_$s$fGBinaryK1
  :: forall i_abY4. GBinary (K1 i_abY4 Int)
Main.$s$fGBinary:+:_$s$fGBinaryK1 =
  \ (@ i_XbY6) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (K1 i_XbY6 Int)
      (Main.$s$fGBinary:+:4 @ i_XbY6)
      ((a3_rerV @ i_XbY6)
       `cast` (forall t_acAr.
               Sym (Data.Binary.Get.Internal.NTCo:Get[0] <K1 i_XbY6 Int t_acAr>_R)
               :: (forall t_acAr r_acnR.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success (K1 i_XbY6 Int t_acAr) r_acnR
                   -> Data.Binary.Get.Internal.Decoder r_acnR)
                  ~R# (forall t_acAr. Get (K1 i_XbY6 Int t_acAr))))

Main.$fDatatypeTree_$s$dmisNewtype
  :: forall (t_abbt :: * -> (* -> *) -> * -> *)
            (f_abbu :: * -> *)
            a_abbv.
     t_abbt Main.D1Tree f_abbu a_abbv -> Bool
Main.$fDatatypeTree_$s$dmisNewtype =
  \ (@ (t_ac4E :: * -> (* -> *) -> * -> *))
    (@ (f_ac4F :: * -> *))
    (@ a17_ac4G)
    _ ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree_$s$dmconIsRecord
  :: forall (t_abc5 :: * -> (* -> *) -> * -> *)
            (f_abc6 :: * -> *)
            a_abc7.
     t_abc5 Main.C1_0Tree f_abc6 a_abc7 -> Bool
Main.$fConstructorTree_$s$dmconIsRecord =
  \ (@ (t_ac4s :: * -> (* -> *) -> * -> *))
    (@ (f_ac4t :: * -> *))
    (@ a17_ac4u)
    _ ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree0_$s$dmconIsRecord
  :: forall (t_abc5 :: * -> (* -> *) -> * -> *)
            (f_abc6 :: * -> *)
            a_abc7.
     t_abc5 Main.C1_1Tree f_abc6 a_abc7 -> Bool
Main.$fConstructorTree0_$s$dmconIsRecord =
  \ (@ (t_ac4s :: * -> (* -> *) -> * -> *))
    (@ (f_ac4t :: * -> *))
    (@ a17_ac4u)
    _ ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree_$s$dmconFixity
  :: forall (t_abbR :: * -> (* -> *) -> * -> *)
            (f_abbS :: * -> *)
            a_abbT.
     t_abbR Main.C1_0Tree f_abbS a_abbT -> Fixity
Main.$fConstructorTree_$s$dmconFixity =
  \ (@ (t_ac4y :: * -> (* -> *) -> * -> *))
    (@ (f_ac4z :: * -> *))
    (@ a17_ac4A)
    _ ->
    GHC.Generics.Prefix

Main.$fConstructorTree0_$s$dmconFixity
  :: forall (t_abbR :: * -> (* -> *) -> * -> *)
            (f_abbS :: * -> *)
            a_abbT.
     t_abbR Main.C1_1Tree f_abbS a_abbT -> Fixity
Main.$fConstructorTree0_$s$dmconFixity =
  \ (@ (t_ac4y :: * -> (* -> *) -> * -> *))
    (@ (f_ac4z :: * -> *))
    (@ a17_ac4A)
    _ ->
    GHC.Generics.Prefix

Main.$s$fGBinary:+:3 :: GBinary (K1 R Int)
Main.$s$fGBinary:+:3 = Main.$s$fGBinary:+:_$s$fGBinaryK1 @ R

Main.$s$fGBinary:+:_$s$fGBinaryM3
  :: forall i_abXX c_abXY. GBinary (M1 i_abXX c_abXY (K1 R Int))
Main.$s$fGBinary:+:_$s$fGBinaryM3 =
  \ (@ i_XbY0) (@ c_XbY2) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (M1 i_XbY0 c_XbY2 (K1 R Int))
      (lvl6_res2 @ i_XbY0 @ c_XbY2)
      ((a2_rerT @ i_XbY0 @ c_XbY2)
       `cast` (forall t_acA4.
               Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0]
                    <M1 i_XbY0 c_XbY2 (K1 R Int) t_acA4>_R)
               :: (forall t_acA4 r_acnR.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success
                        (M1 i_XbY0 c_XbY2 (K1 R Int) t_acA4) r_acnR
                   -> Data.Binary.Get.Internal.Decoder r_acnR)
                  ~R# (forall t_acA4. Get (M1 i_XbY0 c_XbY2 (K1 R Int) t_acA4))))

$wlvl_res5
  :: forall c_XbYM w_aces a1_acet.
     Binary w_aces =>
     w_aces
     -> C1 c_XbYM (M1 S NoSelector (Rec0 Int)) a1_acet
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
$wlvl_res5 =
  \ (@ c_XbYM)
    (@ w_aces)
    (@ a17_acet)
    (w1_sdIH :: Binary w_aces)
    (w2_sdII :: w_aces)
    (w3_sdIK :: C1 c_XbYM (M1 S NoSelector (Rec0 Int)) a17_acet) ->
    case w2_sdII of code_aczr { __DEFAULT ->
    let {
      eta1_aczs :: Data.Binary.Put.PutM ()
      eta1_aczs =
        case binary-0.7.3.0:Data.Binary.Class.$w$cput9
               (case w3_sdIK
                     `cast` (GHC.Generics.NTCo:M1[0]
                               <C>_P <c_XbYM>_P <M1 S NoSelector (Rec0 Int)>_R
                             ; GHC.Generics.NTCo:M1[0]
                                 <S>_P <NoSelector>_P <K1 R Int>_R <a17_acet>_N
                             ; GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <a17_acet>_P
                             :: M1 C c_XbYM (M1 S NoSelector (Rec0 Int)) a17_acet ~R# Int)
                of _ { ghc-prim-0.4.0.0:GHC.Types.I# x#_acHT ->
                GHC.Int.I64# x#_acHT
                })
        of _ { (# ww1_acLf, ww2_acLg #) ->
        (Data.Binary.Put.PairS @ () ww1_acLf ww2_acLg)
        `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
        } } in
    let {
      eta_aczt :: Data.Binary.Put.PutM ()
      eta_aczt = put @ w_aces w1_sdIH code_aczr } in
    (# case eta_aczt of _ { __DEFAULT ->
       case eta1_aczs
            `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
       of _ { Data.Binary.Put.PairS x_aczx w'_aczy ->
       x_aczx
       }
       },
       (\ (x_aczA
             :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                -> IO LBS.ByteString) ->
          case eta_aczt
               `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                       :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
          of _ { Data.Binary.Put.PairS a18_aczD w8_aczE ->
          (w8_aczE
           `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                      ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                            -> IO LBS.ByteString)
                           -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           -> IO LBS.ByteString)))
            (case eta1_aczs
                  `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                          :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
             of _ { Data.Binary.Put.PairS x1_aczI w'_aczJ ->
             (w'_aczJ
              `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                      :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                         ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString)
                              -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              -> IO LBS.ByteString)))
               x_aczA
             })
          })
       `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
               :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }

lvl8_res6
  :: forall c_XbYM w_aces a1_acet.
     (Num w_aces, Data.Bits.Bits w_aces, Binary w_aces) =>
     w_aces
     -> w_aces -> C1 c_XbYM (M1 S NoSelector (Rec0 Int)) a1_acet -> Put
lvl8_res6 =
  \ (@ c_XbYM)
    (@ w_aces)
    (@ a17_acet)
    _
    _
    (w3_sdIH :: Binary w_aces)
    (w4_sdII :: w_aces)
    _
    (w6_sdIK :: C1 c_XbYM (M1 S NoSelector (Rec0 Int)) a17_acet) ->
    case $wlvl_res5
           @ c_XbYM @ w_aces @ a17_acet w3_sdIH w4_sdII w6_sdIK
    of _ { (# ww1_sdMg, ww2_sdMh #) ->
    (Data.Binary.Put.PairS @ () ww1_sdMg ww2_sdMh)
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

Main.$s$fGBinary:+:2 :: GBinary (M1 S NoSelector (Rec0 Int))
Main.$s$fGBinary:+:2 =
  Main.$s$fGBinary:+:_$s$fGBinaryM3 @ S @ NoSelector

Main.$s$fGBinary:+:_$s$fGSumM2
  :: forall c_abYK.
     binary-0.7.3.0:Data.Binary.Generic.GSum
       (C1 c_abYK (M1 S NoSelector (Rec0 Int)))
Main.$s$fGBinary:+:_$s$fGSumM2 =
  \ (@ c_XbYM) ->
    binary-0.7.3.0:Data.Binary.Generic.D:GSum
      @ (C1 c_XbYM (M1 S NoSelector (Rec0 Int)))
      ((a1_rerR @ c_XbYM)
       `cast` (forall word_aczT a17_aczU.
               <Ord word_aczT>_R
               -> <Num word_aczT>_R
               -> <Data.Bits.Bits word_aczT>_R
               -> <word_aczT>_R
               -> <word_aczT>_R
               -> Sym
                    (Data.Binary.Get.Internal.NTCo:Get[0]
                       <M1 C c_XbYM (M1 S NoSelector (Rec0 Int)) a17_aczU>_R)
               :: (forall word_aczT a17_aczU.
                   (Ord word_aczT, Num word_aczT, Data.Bits.Bits word_aczT) =>
                   word_aczT
                   -> word_aczT
                   -> forall r_acnR.
                      Data.ByteString.Internal.ByteString
                      -> Data.Binary.Get.Internal.Success
                           (M1 C c_XbYM (M1 S NoSelector (Rec0 Int)) a17_aczU) r_acnR
                      -> Data.Binary.Get.Internal.Decoder r_acnR)
                  ~R# (forall word_aczT a17_aczU.
                       (Ord word_aczT, Num word_aczT, Data.Bits.Bits word_aczT) =>
                       word_aczT
                       -> word_aczT
                       -> Get (M1 C c_XbYM (M1 S NoSelector (Rec0 Int)) a17_aczU))))
      (lvl8_res6 @ c_XbYM)

Rec {
Main.$wa3
  :: ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree Int #)
Main.$wa3 =
  \ (ww_sdIS :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdIP
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ww_sdIS of ds_Xc2v {
      __DEFAULT ->
        case Main.$wa3 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc2v 1) w_sdIP
        of _ { (# ipv_acKg, ipv1_acKh #) ->
        case Main.$wa3 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc2v 1) ipv_acKg
        of _ { (# ipv2_acRn, ipv3_acRo #) ->
        (# ipv2_acRn, Main.Branch @ Int ipv1_acKh ipv3_acRo #)
        }
        };
      0 ->
        case System.Random.theStdGen
             `cast` (GHC.IORef.NTCo:IORef[0] <StdGen>_N
                     :: GHC.IORef.IORef StdGen
                        ~R# GHC.STRef.STRef ghc-prim-0.4.0.0:GHC.Prim.RealWorld StdGen)
        of _ { GHC.STRef.STRef r#_acQA ->
        case ghc-prim-0.4.0.0:GHC.Prim.atomicModifyMutVar#
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               @ StdGen
               @ (StdGen, Int)
               @ Int
               r#_acQA
               System.Random.$fRandomInt2
               w_sdIP
        of _ { (# ipv_acQF, ipv1_acQG #) ->
        case ipv1_acQG
        of b1_acQI { ghc-prim-0.4.0.0:GHC.Types.I# ipv2_acQK ->
        (# ipv_acQF, Main.Leaf @ Int b1_acQI #)
        }
        }
        }
    }
end Rec }

Main.generateRandomTree2
  :: Int
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree Int #)
Main.generateRandomTree2 =
  \ (w_sdIO :: Int)
    (w1_sdIP
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case w_sdIO of _ { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdIS ->
    Main.$wa3 ww1_sdIS w1_sdIP
    }

generateRandomTree :: Int -> IO (Tree Int)
generateRandomTree =
  Main.generateRandomTree2
  `cast` (<Int>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree Int>_R)
          :: (Int
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    Tree Int #))
             ~R# (Int -> IO (Tree Int)))

Rec {
Main.$wa4
  :: ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree1 Int #)
Main.$wa4 =
  \ (ww_sdIZ :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdIW
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ww_sdIZ of ds_Xc2s {
      __DEFAULT ->
        case Main.$wa4 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc2s 1) w_sdIW
        of _ { (# ipv_acKg, ipv1_acKh #) ->
        case Main.$wa4 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc2s 1) ipv_acKg
        of _ { (# ipv2_acRn, ipv3_acRo #) ->
        (# ipv2_acRn, Main.Branch1 @ Int ipv1_acKh ipv3_acRo #)
        }
        };
      0 ->
        case System.Random.theStdGen
             `cast` (GHC.IORef.NTCo:IORef[0] <StdGen>_N
                     :: GHC.IORef.IORef StdGen
                        ~R# GHC.STRef.STRef ghc-prim-0.4.0.0:GHC.Prim.RealWorld StdGen)
        of _ { GHC.STRef.STRef r#_acQA ->
        case ghc-prim-0.4.0.0:GHC.Prim.atomicModifyMutVar#
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               @ StdGen
               @ (StdGen, Int)
               @ Int
               r#_acQA
               System.Random.$fRandomInt2
               w_sdIW
        of _ { (# ipv_acQF, ipv1_acQG #) ->
        case ipv1_acQG
        of b1_acQI { ghc-prim-0.4.0.0:GHC.Types.I# ipv2_acQK ->
        (# ipv_acQF, Main.Leaf1 @ Int b1_acQI #)
        }
        }
        }
    }
end Rec }

Main.generateRandomTree3
  :: Int
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree1 Int #)
Main.generateRandomTree3 =
  \ (w_sdIV :: Int)
    (w1_sdIW
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case w_sdIV of _ { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdIZ ->
    Main.$wa4 ww1_sdIZ w1_sdIW
    }

generateRandomTree1 :: Int -> IO (Tree1 Int)
generateRandomTree1 =
  Main.generateRandomTree3
  `cast` (<Int>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree1 Int>_R)
          :: (Int
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    Tree1 Int #))
             ~R# (Int -> IO (Tree1 Int)))

size :: Int
size = ghc-prim-0.4.0.0:GHC.Types.I# 20

Rec {
Main.$fNFDataTree1_$crnf
  :: forall a_abek. NFData a_abek => Tree1 a_abek -> ()
Main.$fNFDataTree1_$crnf =
  \ (@ a17_abek)
    ($dNFData_abel :: NFData a17_abek)
    (eta_B1 :: Tree1 a17_abek) ->
    case eta_B1 of _ {
      Leaf1 a18_a4uM ->
        ($dNFData_abel
         `cast` (Control.DeepSeq.NTCo:NFData[0] <a17_abek>_N
                 :: NFData a17_abek ~R# (a17_abek -> ())))
          a18_a4uM;
      Branch1 t1_a4uN t2_a4uO ->
        case Main.$fNFDataTree1_$crnf @ a17_abek $dNFData_abel t1_a4uN
        of _ { () ->
        Main.$fNFDataTree1_$crnf @ a17_abek $dNFData_abel t2_a4uO
        }
    }
end Rec }

Main.$fNFDataTree1
  :: forall a_a4vP. NFData a_a4vP => NFData (Tree1 a_a4vP)
Main.$fNFDataTree1 =
  Main.$fNFDataTree1_$crnf
  `cast` (forall a17_abek.
          <NFData a17_abek>_R
          -> Sym (Control.DeepSeq.NTCo:NFData[0] <Tree1 a17_abek>_N)
          :: (forall a17_abek. NFData a17_abek => Tree1 a17_abek -> ())
             ~R# (forall a17_abek. NFData a17_abek => NFData (Tree1 a17_abek)))

Main.$sforce2 :: Tree1 Int -> ()
Main.$sforce2 =
  Main.$fNFDataTree1_$crnf
    @ Int
    (Control.DeepSeq.$fNFDataInt_$crnf
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
             :: (Int -> ()) ~R# NFData Int))

Rec {
$wa10_res8
  :: ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> forall r1_ackz.
        ghc-prim-0.4.0.0:GHC.Prim.Addr#
        -> GHC.ForeignPtr.ForeignPtrContents
        -> ghc-prim-0.4.0.0:GHC.Prim.Int#
        -> ghc-prim-0.4.0.0:GHC.Prim.Int#
        -> Data.Binary.Get.Internal.Success () r1_ackz
        -> Data.Binary.Get.Internal.Decoder r1_ackz
$wa10_res8 =
  \ (ww_sdJh :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (@ r1_ackz)
    (ww1_sdJl :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww2_sdJm :: GHC.ForeignPtr.ForeignPtrContents)
    (ww3_sdJn :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww4_sdJo :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdJe :: Data.Binary.Get.Internal.Success () r1_ackz) ->
    let {
      wild_ackG :: Data.ByteString.Internal.ByteString
      wild_ackG =
        Data.ByteString.Internal.PS
          ww1_sdJl ww2_sdJm ww3_sdJn ww4_sdJo } in
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww4_sdJo ww_sdJh)
    of _ {
      False ->
        let {
          kf_ackT :: Data.Binary.Get.Internal.Decoder r1_ackz
          kf_ackT =
            Data.Binary.Get.Internal.Fail
              @ r1_ackz wild_ackG Data.Binary.Get.Internal.readN1 } in
        let {
          lvl20_se0X :: Data.Binary.Get.Internal.Decoder r1_ackz
          lvl20_se0X =
            $wa10_res8
              ww_sdJh @ r1_ackz ww1_sdJl ww2_sdJm ww3_sdJn ww4_sdJo w_sdJe } in
        letrec {
          loop_acl3 :: Data.Binary.Get.Internal.Decoder r1_ackz
          loop_acl3 = Data.Binary.Get.Internal.Partial @ r1_ackz a17_acl4;
          a17_acl4
            :: Maybe Data.ByteString.Internal.ByteString
               -> Data.Binary.Get.Internal.Decoder r1_ackz
          a17_acl4 =
            \ (sm_acl5 :: Maybe Data.ByteString.Internal.ByteString) ->
              case sm_acl5 of _ {
                Nothing -> kf_ackT;
                Just s_acla ->
                  case s_acla
                  of _
                  { Data.ByteString.Internal.PS dt4_acle dt5_aclf dt6_aclg
                                                dt7_aclh ->
                  case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                         @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# dt7_aclh 0)
                  of _ {
                    False ->
                      case ww4_sdJo of ds_adr5 {
                        __DEFAULT ->
                          case dt7_aclh of ds1_adr6 {
                            __DEFAULT ->
                              case GHC.IO.unsafeDupablePerformIO
                                     @ Data.ByteString.Internal.ByteString
                                     ((\ (eta_adr7
                                            :: ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                                         let {
                                           a18_adr8 :: ghc-prim-0.4.0.0:GHC.Prim.Int#
                                           a18_adr8 =
                                             ghc-prim-0.4.0.0:GHC.Prim.+# ds_adr5 ds1_adr6 } in
                                         case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                                                @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<# a18_adr8 0)
                                         of _ {
                                           False ->
                                             case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                                                    @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                                    a18_adr8
                                                    eta_adr7
                                             of _ { (# ipv_adrf, ipv1_adrg #) ->
                                             let {
                                               a19_adre :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                                               a19_adre =
                                                 ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                                                   (ipv1_adrg
                                                    `cast` (UnivCo mkUnsafeCo representational
                                                              (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                                              ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                                            :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                                               ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                                             case {__pkg_ccall bytestring-0.10.6.0 memcpy Addr#
                                        -> Addr#
                                        -> Word#
                                        -> State# RealWorld
                                        -> (# State# RealWorld, Addr# #)}_adri
                                                    a19_adre
                                                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                                                       ww1_sdJl ww3_sdJn)
                                                    (ghc-prim-0.4.0.0:GHC.Prim.int2Word# ds_adr5)
                                                    ipv_adrf
                                             of _ { (# ds3_adrl, ds4_adrm #) ->
                                             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                                                    @ GHC.ForeignPtr.ForeignPtrContents
                                                    ww2_sdJm
                                                    ds3_adrl
                                             of s'_adro { __DEFAULT ->
                                             case {__pkg_ccall bytestring-0.10.6.0 memcpy Addr#
                                        -> Addr#
                                        -> Word#
                                        -> State# RealWorld
                                        -> (# State# RealWorld, Addr# #)}_adrp
                                                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                                                       a19_adre ds_adr5)
                                                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                                                       dt4_acle dt6_aclg)
                                                    (ghc-prim-0.4.0.0:GHC.Prim.int2Word# ds1_adr6)
                                                    s'_adro
                                             of _ { (# ds5_adrs, ds6_adrt #) ->
                                             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                                                    @ GHC.ForeignPtr.ForeignPtrContents
                                                    dt5_aclf
                                                    ds5_adrs
                                             of s'1_adrv { __DEFAULT ->
                                             let {
                                               a20_adrw :: GHC.ForeignPtr.ForeignPtrContents
                                               a20_adrw = GHC.ForeignPtr.PlainPtr ipv1_adrg } in
                                             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                                                    @ GHC.ForeignPtr.ForeignPtrContents
                                                    a20_adrw
                                                    s'1_adrv
                                             of s'2_adrx { __DEFAULT ->
                                             (# s'2_adrx,
                                                Data.ByteString.Internal.PS
                                                  a19_adre a20_adrw 0 a18_adr8 #)
                                             }
                                             }
                                             }
                                             }
                                             }
                                             };
                                           True ->
                                             case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                                             of wild6_00 {
                                             }
                                         })
                                      `cast` (Sym
                                                (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0]
                                                   <Data.ByteString.Internal.ByteString>_R)
                                              :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                                  -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                        Data.ByteString.Internal.ByteString #))
                                                 ~R# IO Data.ByteString.Internal.ByteString))
                              of _
                              { Data.ByteString.Internal.PS ww6_XdOs ww7_XdOu ww8_XdOw
                                                            ww9_XdOy ->
                              $wa10_res8
                                ww_sdJh @ r1_ackz ww6_XdOs ww7_XdOu ww8_XdOw ww9_XdOy w_sdJe
                              };
                            0 -> lvl20_se0X
                          };
                        0 ->
                          $wa10_res8
                            ww_sdJh @ r1_ackz dt4_acle dt5_aclf dt6_aclg dt7_aclh w_sdJe
                      };
                    True -> loop_acl3
                  }
                  }
              }; } in
        loop_acl3;
      True -> w_sdJe wild_ackG ghc-prim-0.4.0.0:GHC.Tuple.()
    }
end Rec }

Rec {
Main.$wa2
  :: forall a_abct.
     Binary a_abct =>
     forall r_acnR.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success (Tree1 a_abct) r_acnR
     -> Data.Binary.Get.Internal.Decoder r_acnR
Main.$wa2 =
  \ (@ a17_abct)
    (w_sdJr :: Binary a17_abct)
    (@ r_acnR)
    (ww_sdJw :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdJx :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdJy :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdJz :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w1_sdJt
       :: Data.Binary.Get.Internal.Success (Tree1 a17_abct) r_acnR) ->
    let {
      a18_scL2 :: Get a17_abct
      a18_scL2 = get @ a17_abct w_sdJr } in
    let {
      lvl20_se0U
        :: Data.ByteString.Internal.ByteString
           -> Tree1 a17_abct -> Data.Binary.Get.Internal.Decoder r_acnR
      lvl20_se0U =
        \ (i'1_acnU :: Data.ByteString.Internal.ByteString)
          (a19_acnV :: Tree1 a17_abct) ->
          case i'1_acnU
          of _
          { Data.ByteString.Internal.PS ww5_XdO1 ww6_XdO3 ww7_XdO5
                                        ww8_XdO7 ->
          Main.$wa2
            @ a17_abct
            w_sdJr
            @ r_acnR
            ww5_XdO1
            ww6_XdO3
            ww7_XdO5
            ww8_XdO7
            (\ (i'2_XcsQ :: Data.ByteString.Internal.ByteString)
               (a20_XcsS :: Tree1 a17_abct) ->
               w1_sdJt i'2_XcsQ (Main.Branch1 @ a17_abct a19_acnV a20_XcsS))
          } } in
    let {
      lvl21_se0T
        :: Data.ByteString.Internal.ByteString
           -> a17_abct -> Data.Binary.Get.Internal.Decoder r_acnR
      lvl21_se0T =
        \ (i'1_acnU :: Data.ByteString.Internal.ByteString)
          (a19_acnV :: a17_abct) ->
          w1_sdJt i'1_acnU (Main.Leaf1 @ a17_abct a19_acnV) } in
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww3_sdJz 1)
    of _ {
      False ->
        $wa10_res8
          1
          @ r_acnR
          ww_sdJw
          ww1_sdJx
          ww2_sdJy
          ww3_sdJz
          (\ (i'_aclB :: Data.ByteString.Internal.ByteString) _ ->
             case i'_aclB
             of _
             { Data.ByteString.Internal.PS dt_aclT dt1_aclU dt2_aclV dt3_aclW ->
             case ghc-prim-0.4.0.0:GHC.Prim.readWord8OffAddr#
                    @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr# dt_aclT dt2_aclV)
                    0
                    ghc-prim-0.4.0.0:GHC.Prim.realWorld#
             of _ { (# ipv_adsq, ipv1_adsr #) ->
             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                    @ GHC.ForeignPtr.ForeignPtrContents dt1_aclU ipv_adsq
             of _ { __DEFAULT ->
             case ipv1_adsr of _ {
               __DEFAULT ->
                 Data.Binary.Get.Internal.Fail
                   @ r_acnR
                   (Data.ByteString.Internal.PS
                      dt_aclT
                      dt1_aclU
                      (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_aclV 1)
                      (ghc-prim-0.4.0.0:GHC.Prim.-# dt3_aclW 1))
                   lvl7_res3;
               __word 0 ->
                 (a18_scL2
                  `cast` (Data.Binary.Get.Internal.NTCo:Get[0] <a17_abct>_R
                          :: Get a17_abct
                             ~R# (forall r_acnR.
                                  Data.ByteString.Internal.ByteString
                                  -> Data.Binary.Get.Internal.Success a17_abct r_acnR
                                  -> Data.Binary.Get.Internal.Decoder r_acnR)))
                   @ r_acnR
                   (Data.ByteString.Internal.PS
                      dt_aclT
                      dt1_aclU
                      (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_aclV 1)
                      (ghc-prim-0.4.0.0:GHC.Prim.-# dt3_aclW 1))
                   lvl21_se0T;
               __word 1 ->
                 Main.$wa2
                   @ a17_abct
                   w_sdJr
                   @ r_acnR
                   dt_aclT
                   dt1_aclU
                   (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_aclV 1)
                   (ghc-prim-0.4.0.0:GHC.Prim.-# dt3_aclW 1)
                   lvl20_se0U
             }
             }
             }
             });
      True ->
        case ghc-prim-0.4.0.0:GHC.Prim.readWord8OffAddr#
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (ghc-prim-0.4.0.0:GHC.Prim.plusAddr# ww_sdJw ww2_sdJy)
               0
               ghc-prim-0.4.0.0:GHC.Prim.realWorld#
        of _ { (# ipv_adsq, ipv1_adsr #) ->
        case ghc-prim-0.4.0.0:GHC.Prim.touch#
               @ GHC.ForeignPtr.ForeignPtrContents ww1_sdJx ipv_adsq
        of _ { __DEFAULT ->
        case ipv1_adsr of _ {
          __DEFAULT ->
            Data.Binary.Get.Internal.Fail
              @ r_acnR
              (Data.ByteString.Internal.PS
                 ww_sdJw
                 ww1_sdJx
                 (ghc-prim-0.4.0.0:GHC.Prim.+# ww2_sdJy 1)
                 (ghc-prim-0.4.0.0:GHC.Prim.-# ww3_sdJz 1))
              lvl7_res3;
          __word 0 ->
            (a18_scL2
             `cast` (Data.Binary.Get.Internal.NTCo:Get[0] <a17_abct>_R
                     :: Get a17_abct
                        ~R# (forall r_acnR.
                             Data.ByteString.Internal.ByteString
                             -> Data.Binary.Get.Internal.Success a17_abct r_acnR
                             -> Data.Binary.Get.Internal.Decoder r_acnR)))
              @ r_acnR
              (Data.ByteString.Internal.PS
                 ww_sdJw
                 ww1_sdJx
                 (ghc-prim-0.4.0.0:GHC.Prim.+# ww2_sdJy 1)
                 (ghc-prim-0.4.0.0:GHC.Prim.-# ww3_sdJz 1))
              lvl21_se0T;
          __word 1 ->
            Main.$wa2
              @ a17_abct
              w_sdJr
              @ r_acnR
              ww_sdJw
              ww1_sdJx
              (ghc-prim-0.4.0.0:GHC.Prim.+# ww2_sdJy 1)
              (ghc-prim-0.4.0.0:GHC.Prim.-# ww3_sdJz 1)
              lvl20_se0U
        }
        }
        }
    }
end Rec }

Main.$fBinaryTree4
  :: forall a_abct.
     Binary a_abct =>
     forall r_acnR.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success (Tree1 a_abct) r_acnR
     -> Data.Binary.Get.Internal.Decoder r_acnR
Main.$fBinaryTree4 =
  \ (@ a17_abct)
    (w_sdJr :: Binary a17_abct)
    (@ r_acnR)
    (w1_sdJs :: Data.ByteString.Internal.ByteString)
    (w2_sdJt
       :: Data.Binary.Get.Internal.Success (Tree1 a17_abct) r_acnR) ->
    case w1_sdJs
    of _
    { Data.ByteString.Internal.PS ww1_sdJw ww2_sdJx ww3_sdJy
                                  ww4_sdJz ->
    Main.$wa2
      @ a17_abct
      w_sdJr
      @ r_acnR
      ww1_sdJw
      ww2_sdJx
      ww3_sdJy
      ww4_sdJz
      w2_sdJt
    }

Main.$fBinaryTree1_$cget
  :: forall a_abct. Binary a_abct => Get (Tree1 a_abct)
Main.$fBinaryTree1_$cget =
  Main.$fBinaryTree4
  `cast` (forall a17_abct.
          <Binary a17_abct>_R
          -> Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree1 a17_abct>_R)
          :: (forall a17_abct.
              Binary a17_abct =>
              forall r_acnR.
              Data.ByteString.Internal.ByteString
              -> Data.Binary.Get.Internal.Success (Tree1 a17_abct) r_acnR
              -> Data.Binary.Get.Internal.Decoder r_acnR)
             ~R# (forall a17_abct. Binary a17_abct => Get (Tree1 a17_abct)))

Main.$fConstructorTree0_$cconName
  :: forall (t_abbA :: * -> (* -> *) -> * -> *)
            (f_abbB :: * -> *)
            a_abbC.
     t_abbA Main.C1_1Tree f_abbB a_abbC -> [Char]
Main.$fConstructorTree0_$cconName =
  \ (@ (t_abcc :: * -> (* -> *) -> * -> *))
    (@ (f_abcd :: * -> *))
    (@ a17_abce)
    _ ->
    Main.$fConstructorTree2

a4_res9
  :: forall (t_ac4y :: * -> (* -> *) -> * -> *)
            (f_ac4z :: * -> *)
            a3_ac4A.
     t_ac4y Main.C1_1Tree f_ac4z a3_ac4A -> Fixity
a4_res9 =
  \ (@ (t_ac4y :: * -> (* -> *) -> * -> *))
    (@ (f_ac4z :: * -> *))
    (@ a17_ac4A)
    _ ->
    GHC.Generics.Prefix

a5_resa
  :: forall (t_ac4s :: * -> (* -> *) -> * -> *)
            (f_ac4t :: * -> *)
            a3_ac4u.
     t_ac4s Main.C1_1Tree f_ac4t a3_ac4u -> Bool
a5_resa =
  \ (@ (t_ac4s :: * -> (* -> *) -> * -> *))
    (@ (f_ac4t :: * -> *))
    (@ a17_ac4u)
    _ ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree0 :: Constructor Main.C1_1Tree
Main.$fConstructorTree0 =
  GHC.Generics.D:Constructor
    @ Main.C1_1Tree Main.$fConstructorTree0_$cconName a4_res9 a5_resa

Main.$fConstructorTree_$cconName
  :: forall (t_abbA :: * -> (* -> *) -> * -> *)
            (f_abbB :: * -> *)
            a_abbC.
     t_abbA Main.C1_0Tree f_abbB a_abbC -> [Char]
Main.$fConstructorTree_$cconName =
  \ (@ (t_abbD :: * -> (* -> *) -> * -> *))
    (@ (f_abbE :: * -> *))
    (@ a17_abbF)
    _ ->
    Main.$fConstructorTree1

a6_resb
  :: forall (t_ac4y :: * -> (* -> *) -> * -> *)
            (f_ac4z :: * -> *)
            a3_ac4A.
     t_ac4y Main.C1_0Tree f_ac4z a3_ac4A -> Fixity
a6_resb =
  \ (@ (t_ac4y :: * -> (* -> *) -> * -> *))
    (@ (f_ac4z :: * -> *))
    (@ a17_ac4A)
    _ ->
    GHC.Generics.Prefix

a7_resc
  :: forall (t_ac4s :: * -> (* -> *) -> * -> *)
            (f_ac4t :: * -> *)
            a3_ac4u.
     t_ac4s Main.C1_0Tree f_ac4t a3_ac4u -> Bool
a7_resc =
  \ (@ (t_ac4s :: * -> (* -> *) -> * -> *))
    (@ (f_ac4t :: * -> *))
    (@ a17_ac4u)
    _ ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree :: Constructor Main.C1_0Tree
Main.$fConstructorTree =
  GHC.Generics.D:Constructor
    @ Main.C1_0Tree Main.$fConstructorTree_$cconName a6_resb a7_resc

Main.$fDatatypeTree_$cmoduleName
  :: forall (t_abbc :: * -> (* -> *) -> * -> *)
            (f_abbd :: * -> *)
            a_abbe.
     t_abbc Main.D1Tree f_abbd a_abbe -> [Char]
Main.$fDatatypeTree_$cmoduleName =
  \ (@ (t_abbf :: * -> (* -> *) -> * -> *))
    (@ (f_abbg :: * -> *))
    (@ a17_abbh)
    _ ->
    Main.$fDatatypeTree1

Main.$fDatatypeTree_$cdatatypeName
  :: forall (t_abb3 :: * -> (* -> *) -> * -> *)
            (f_abb4 :: * -> *)
            a_abb5.
     t_abb3 Main.D1Tree f_abb4 a_abb5 -> [Char]
Main.$fDatatypeTree_$cdatatypeName =
  \ (@ (t_abb6 :: * -> (* -> *) -> * -> *))
    (@ (f_abb7 :: * -> *))
    (@ a17_abb8)
    _ ->
    Main.$fDatatypeTree2

a8_resd
  :: forall (t_ac4E :: * -> (* -> *) -> * -> *)
            (f_ac4F :: * -> *)
            a3_ac4G.
     t_ac4E Main.D1Tree f_ac4F a3_ac4G -> Bool
a8_resd =
  \ (@ (t_ac4E :: * -> (* -> *) -> * -> *))
    (@ (f_ac4F :: * -> *))
    (@ a17_ac4G)
    _ ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fDatatypeTree :: Datatype Main.D1Tree
Main.$fDatatypeTree =
  GHC.Generics.D:Datatype
    @ Main.D1Tree
    Main.$fDatatypeTree_$cdatatypeName
    Main.$fDatatypeTree_$cmoduleName
    a8_resd

Rec {
Main.$w$cshowsPrec1
  :: forall a_abac.
     Show a_abac =>
     ghc-prim-0.4.0.0:GHC.Prim.Int# -> Tree1 a_abac -> ShowS
Main.$w$cshowsPrec1 =
  \ (@ a17_abac)
    (w_sdJC :: Show a17_abac)
    (ww_sdJH :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w1_sdJE :: Tree1 a17_abac) ->
    case w1_sdJE of _ {
      Leaf1 b1_aaVk ->
        let {
          g_ac8W :: String -> String
          g_ac8W = showsPrec @ a17_abac w_sdJC lvl1_rerX b1_aaVk } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdJH 11)
        of _ {
          False ->
            \ (x_ac8X :: String) -> ++ @ Char lvl4_res0 (g_ac8W x_ac8X);
          True ->
            \ (x_ac8O :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl4_res0
                   (g_ac8W
                      (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac8O)))
        };
      Branch1 b1_aaVm b2_aaVn ->
        let {
          f_XchW :: String -> String
          f_XchW = Main.$w$cshowsPrec1 @ a17_abac w_sdJC 11 b1_aaVm } in
        let {
          g_Xci1 :: String -> String
          g_Xci1 = Main.$w$cshowsPrec1 @ a17_abac w_sdJC 11 b2_aaVn } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdJH 11)
        of _ {
          False ->
            \ (x_Xci6 :: String) ->
              ++
                @ Char
                lvl3_rerZ
                (f_XchW
                   (ghc-prim-0.4.0.0:GHC.Types.:
                      @ Char GHC.Show.showSpace1 (g_Xci1 x_Xci6)));
          True ->
            \ (x_ac8O :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl3_rerZ
                   (f_XchW
                      (ghc-prim-0.4.0.0:GHC.Types.:
                         @ Char
                         GHC.Show.showSpace1
                         (g_Xci1
                            (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac8O)))))
        }
    }
end Rec }

Main.$fShowTree1_$cshowsPrec
  :: forall a_abac. Show a_abac => Int -> Tree1 a_abac -> ShowS
Main.$fShowTree1_$cshowsPrec =
  \ (@ a17_abac)
    (w_sdJC :: Show a17_abac)
    (w1_sdJD :: Int)
    (w2_sdJE :: Tree1 a17_abac) ->
    case w1_sdJD of _ { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdJH ->
    Main.$w$cshowsPrec1 @ a17_abac w_sdJC ww1_sdJH w2_sdJE
    }

Main.$fShowTree1_$cshow
  :: forall a_abac. Show a_abac => Tree1 a_abac -> String
Main.$fShowTree1_$cshow =
  \ (@ a17_abac)
    ($dShow_abad :: Show a17_abac)
    (x_ac8F :: Tree1 a17_abac) ->
    Main.$w$cshowsPrec1
      @ a17_abac
      $dShow_abad
      0
      x_ac8F
      (ghc-prim-0.4.0.0:GHC.Types.[] @ Char)

Main.$fShowTree1_$cshowList
  :: forall a_abac. Show a_abac => [Tree1 a_abac] -> ShowS
Main.$fShowTree1_$cshowList =
  \ (@ a17_abac)
    ($dShow_abad :: Show a17_abac)
    (eta_B2 :: [Tree1 a17_abac])
    (eta1_B1 :: String) ->
    GHC.Show.showList__
      @ (Tree1 a17_abac)
      (\ (w_sdJE :: Tree1 a17_abac) ->
         Main.$w$cshowsPrec1 @ a17_abac $dShow_abad 0 w_sdJE)
      eta_B2
      eta1_B1

Main.$fShowTree1
  :: forall a_aaJ3. Show a_aaJ3 => Show (Tree1 a_aaJ3)
Main.$fShowTree1 =
  \ (@ a17_abac) ($dShow_abad :: Show a17_abac) ->
    GHC.Show.D:Show
      @ (Tree1 a17_abac)
      (Main.$fShowTree1_$cshowsPrec @ a17_abac $dShow_abad)
      (Main.$fShowTree1_$cshow @ a17_abac $dShow_abad)
      (Main.$fShowTree1_$cshowList @ a17_abac $dShow_abad)

Rec {
Main.$w$cshowsPrec
  :: forall a_ab5C.
     Show a_ab5C =>
     ghc-prim-0.4.0.0:GHC.Prim.Int# -> Tree a_ab5C -> ShowS
Main.$w$cshowsPrec =
  \ (@ a17_ab5C)
    (w_sdJK :: Show a17_ab5C)
    (ww_sdJP :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w1_sdJM :: Tree a17_ab5C) ->
    case w1_sdJM of _ {
      Leaf b1_aaJb ->
        let {
          g_ac8W :: String -> String
          g_ac8W = showsPrec @ a17_ab5C w_sdJK lvl1_rerX b1_aaJb } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdJP 11)
        of _ {
          False ->
            \ (x_ac8X :: String) -> ++ @ Char lvl2_rerY (g_ac8W x_ac8X);
          True ->
            \ (x_ac8O :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl2_rerY
                   (g_ac8W
                      (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac8O)))
        };
      Branch b1_aaVh b2_aaVi ->
        let {
          f_Xcia :: String -> String
          f_Xcia = Main.$w$cshowsPrec @ a17_ab5C w_sdJK 11 b1_aaVh } in
        let {
          g_Xcif :: String -> String
          g_Xcif = Main.$w$cshowsPrec @ a17_ab5C w_sdJK 11 b2_aaVi } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdJP 11)
        of _ {
          False ->
            \ (x_Xcik :: String) ->
              ++
                @ Char
                lvl_rerW
                (f_Xcia
                   (ghc-prim-0.4.0.0:GHC.Types.:
                      @ Char GHC.Show.showSpace1 (g_Xcif x_Xcik)));
          True ->
            \ (x_ac8O :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl_rerW
                   (f_Xcia
                      (ghc-prim-0.4.0.0:GHC.Types.:
                         @ Char
                         GHC.Show.showSpace1
                         (g_Xcif
                            (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac8O)))))
        }
    }
end Rec }

Main.$fShowTree_$cshowsPrec
  :: forall a_ab5C. Show a_ab5C => Int -> Tree a_ab5C -> ShowS
Main.$fShowTree_$cshowsPrec =
  \ (@ a17_ab5C)
    (w_sdJK :: Show a17_ab5C)
    (w1_sdJL :: Int)
    (w2_sdJM :: Tree a17_ab5C) ->
    case w1_sdJL of _ { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdJP ->
    Main.$w$cshowsPrec @ a17_ab5C w_sdJK ww1_sdJP w2_sdJM
    }

Main.$fShowTree_$cshow
  :: forall a_ab5C. Show a_ab5C => Tree a_ab5C -> String
Main.$fShowTree_$cshow =
  \ (@ a17_ab5C)
    ($dShow_ab5D :: Show a17_ab5C)
    (x_ac8F :: Tree a17_ab5C) ->
    Main.$w$cshowsPrec
      @ a17_ab5C
      $dShow_ab5D
      0
      x_ac8F
      (ghc-prim-0.4.0.0:GHC.Types.[] @ Char)

Main.$fShowTree_$cshowList
  :: forall a_ab5C. Show a_ab5C => [Tree a_ab5C] -> ShowS
Main.$fShowTree_$cshowList =
  \ (@ a17_ab5C)
    ($dShow_ab5D :: Show a17_ab5C)
    (eta_B2 :: [Tree a17_ab5C])
    (eta1_B1 :: String) ->
    GHC.Show.showList__
      @ (Tree a17_ab5C)
      (\ (w_sdJM :: Tree a17_ab5C) ->
         Main.$w$cshowsPrec @ a17_ab5C $dShow_ab5D 0 w_sdJM)
      eta_B2
      eta1_B1

Main.$fShowTree :: forall a_aaJ0. Show a_aaJ0 => Show (Tree a_aaJ0)
Main.$fShowTree =
  \ (@ a17_ab5C) ($dShow_ab5D :: Show a17_ab5C) ->
    GHC.Show.D:Show
      @ (Tree a17_ab5C)
      (Main.$fShowTree_$cshowsPrec @ a17_ab5C $dShow_ab5D)
      (Main.$fShowTree_$cshow @ a17_ab5C $dShow_ab5D)
      (Main.$fShowTree_$cshowList @ a17_ab5C $dShow_ab5D)

Main.$fGenericTree_$cto
  :: forall a_ab3M x_ab4I. Rep (Tree a_ab3M) x_ab4I -> Tree a_ab3M
Main.$fGenericTree_$cto =
  \ (@ a17_ab3M)
    (@ x_ab4J)
    (ds_dc34 :: Rep (Tree a17_ab3M) x_ab4J) ->
    case ds_dc34
         `cast` (Sub (Main.Rep_Tree[0] <a17_ab3M>_N)
                 ; GHC.Generics.NTCo:M1[0]
                     <D>_P
                     <Main.D1Tree>_P
                     <M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab3M))
                      :+: C1
                            Main.C1_1Tree
                            (S1 NoSelector (Rec0 (Tree a17_ab3M))
                             :*: S1 NoSelector (Rec0 (Tree a17_ab3M)))>_R <x_ab4J>_N
                 :: Rep (Tree a17_ab3M) x_ab4J
                    ~R# (:+:)
                          (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab3M)))
                          (C1
                             Main.C1_1Tree
                             (S1 NoSelector (Rec0 (Tree a17_ab3M))
                              :*: S1 NoSelector (Rec0 (Tree a17_ab3M))))
                          x_ab4J)
    of _ {
      L1 ds1_dc3d ->
        Main.Leaf
          @ a17_ab3M
          (ds1_dc3d
           `cast` (GHC.Generics.NTCo:M1[0]
                     <C>_P <Main.C1_0Tree>_P <M1 S NoSelector (K1 R a17_ab3M)>_R
                   ; GHC.Generics.NTCo:M1[0]
                       <S>_P <NoSelector>_P <K1 R a17_ab3M>_R <x_ab4J>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <a17_ab3M>_R <x_ab4J>_P
                   :: M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab3M)) x_ab4J
                      ~R# a17_ab3M));
      R1 ds1_dc37 ->
        case ds1_dc37
             `cast` (GHC.Generics.NTCo:M1[0]
                       <C>_P
                       <Main.C1_1Tree>_P
                       <M1 S NoSelector (K1 R (Tree a17_ab3M))
                        :*: M1 S NoSelector (K1 R (Tree a17_ab3M))>_R <x_ab4J>_N
                     :: M1
                          C
                          Main.C1_1Tree
                          (M1 S NoSelector (K1 R (Tree a17_ab3M))
                           :*: M1 S NoSelector (K1 R (Tree a17_ab3M)))
                          x_ab4J
                        ~R# (:*:)
                              (M1 S NoSelector (K1 R (Tree a17_ab3M)))
                              (M1 S NoSelector (K1 R (Tree a17_ab3M)))
                              x_ab4J)
        of _ { :*: ds2_dc39 ds3_dc3a ->
        Main.Branch
          @ a17_ab3M
          (ds2_dc39
           `cast` (GHC.Generics.NTCo:M1[0]
                     <S>_P <NoSelector>_P <K1 R (Tree a17_ab3M)>_R <x_ab4J>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab3M>_R <x_ab4J>_P
                   :: M1 S NoSelector (K1 R (Tree a17_ab3M)) x_ab4J
                      ~R# Tree a17_ab3M))
          (ds3_dc3a
           `cast` (GHC.Generics.NTCo:M1[0]
                     <S>_P <NoSelector>_P <K1 R (Tree a17_ab3M)>_R <x_ab4J>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab3M>_R <x_ab4J>_P
                   :: M1 S NoSelector (K1 R (Tree a17_ab3M)) x_ab4J
                      ~R# Tree a17_ab3M))
        }
    }

Rec {
Main.$fBinaryTree2
  :: forall r_acfj.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success (Tree Int) r_acfj
     -> Data.Binary.Get.Internal.Decoder r_acfj
Main.$fBinaryTree2 =
  \ (@ r_acfj)
    (w_sdJS :: Data.ByteString.Internal.ByteString)
    (w1_sdJT :: Data.Binary.Get.Internal.Success (Tree Int) r_acfj) ->
    case w_sdJS
    of _
    { Data.ByteString.Internal.PS ww1_sdJW ww2_sdJX ww3_sdJY
                                  ww4_sdJZ ->
    Main.$wa @ r_acfj ww1_sdJW ww2_sdJX ww3_sdJY ww4_sdJZ w1_sdJT
    }

Main.$fBinaryTree_$s$cget :: Get (Tree Int)
Main.$fBinaryTree_$s$cget =
  Main.$fBinaryTree2
  `cast` (Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree Int>_R)
          :: (forall r_acnR.
              Data.ByteString.Internal.ByteString
              -> Data.Binary.Get.Internal.Success (Tree Int) r_acnR
              -> Data.Binary.Get.Internal.Decoder r_acnR)
             ~R# Get (Tree Int))

Main.$fBinaryTree_$s$fBinaryTree :: Binary (Tree Int)
Main.$fBinaryTree_$s$fBinaryTree =
  binary-0.7.3.0:Data.Binary.Class.D:Binary
    @ (Tree Int) lvl10_rese lvl15_resk

Main.$s$fGBinary:*:3 :: Binary (Tree Int)
Main.$s$fGBinary:*:3 = Main.$fBinaryTree_$s$fBinaryTree

Main.$s$fGBinary:*:_$s$fGBinaryK1
  :: forall i_abY4. GBinary (K1 i_abY4 (Tree Int))
Main.$s$fGBinary:*:_$s$fGBinaryK1 =
  \ (@ i_XbY6) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (K1 i_XbY6 (Tree Int))
      (lvl12_resg @ i_XbY6)
      ((a11_resn @ i_XbY6)
       `cast` (forall t_acAr.
               Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0]
                    <K1 i_XbY6 (Tree Int) t_acAr>_R)
               :: (forall t_acAr r_acnR.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success
                        (K1 i_XbY6 (Tree Int) t_acAr) r_acnR
                   -> Data.Binary.Get.Internal.Decoder r_acnR)
                  ~R# (forall t_acAr. Get (K1 i_XbY6 (Tree Int) t_acAr))))

Main.$s$fGBinary:*:2 :: GBinary (K1 R (Tree Int))
Main.$s$fGBinary:*:2 = Main.$s$fGBinary:*:_$s$fGBinaryK1 @ R

Main.$s$fGBinary:*:_$s$fGBinaryM1
  :: forall i_abXX c_abXY.
     GBinary (M1 i_abXX c_abXY (K1 R (Tree Int)))
Main.$s$fGBinary:*:_$s$fGBinaryM1 =
  \ (@ i_XbY0) (@ c_XbY2) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (M1 i_XbY0 c_XbY2 (K1 R (Tree Int)))
      (lvl11_resf @ i_XbY0 @ c_XbY2)
      ((a10_resm @ i_XbY0 @ c_XbY2)
       `cast` (forall t_acA4.
               Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0]
                    <M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_acA4>_R)
               :: (forall t_acA4 r_acnR.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success
                        (M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_acA4) r_acnR
                   -> Data.Binary.Get.Internal.Decoder r_acnR)
                  ~R# (forall t_acA4.
                       Get (M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_acA4))))

Main.$s$fGBinary:*:1 :: GBinary (M1 S NoSelector (Rec0 (Tree Int)))
Main.$s$fGBinary:*:1 =
  Main.$s$fGBinary:*:_$s$fGBinaryM1 @ S @ NoSelector

Main.$s$fGBinary:*:
  :: GBinary
       (M1 S NoSelector (Rec0 (Tree Int))
        :*: M1 S NoSelector (Rec0 (Tree Int)))
Main.$s$fGBinary:*: =
  binary-0.7.3.0:Data.Binary.Class.D:GBinary
    @ (M1 S NoSelector (Rec0 (Tree Int))
       :*: M1 S NoSelector (Rec0 (Tree Int)))
    lvl13_resh
    (a12_resp
     `cast` (forall t_acAE.
             Sym
               (Data.Binary.Get.Internal.NTCo:Get[0]
                  <(:*:)
                     (M1 S NoSelector (Rec0 (Tree Int)))
                     (M1 S NoSelector (Rec0 (Tree Int)))
                     t_acAE>_R)
             :: (forall t_acAE r_acnR.
                 Data.ByteString.Internal.ByteString
                 -> Data.Binary.Get.Internal.Success
                      ((:*:)
                         (M1 S NoSelector (Rec0 (Tree Int)))
                         (M1 S NoSelector (Rec0 (Tree Int)))
                         t_acAE)
                      r_acnR
                 -> Data.Binary.Get.Internal.Decoder r_acnR)
                ~R# (forall t_acAE.
                     Get
                       ((:*:)
                          (M1 S NoSelector (Rec0 (Tree Int)))
                          (M1 S NoSelector (Rec0 (Tree Int)))
                          t_acAE))))

Main.$s$fGBinary:+:1
  :: GBinary
       (S1 NoSelector (Rec0 (Tree Int))
        :*: S1 NoSelector (Rec0 (Tree Int)))
Main.$s$fGBinary:+:1 = Main.$s$fGBinary:*:

Main.$s$fGBinary:+:_$s$fGSumM1
  :: forall c_abYK.
     binary-0.7.3.0:Data.Binary.Generic.GSum
       (C1
          c_abYK
          (S1 NoSelector (Rec0 (Tree Int))
           :*: S1 NoSelector (Rec0 (Tree Int))))
Main.$s$fGBinary:+:_$s$fGSumM1 =
  \ (@ c_XbYM) ->
    binary-0.7.3.0:Data.Binary.Generic.D:GSum
      @ (C1
           c_XbYM
           (S1 NoSelector (Rec0 (Tree Int))
            :*: S1 NoSelector (Rec0 (Tree Int))))
      ((a9_resl @ c_XbYM)
       `cast` (forall word_aczT a17_aczU.
               <Ord word_aczT>_R
               -> <Num word_aczT>_R
               -> <Data.Bits.Bits word_aczT>_R
               -> <word_aczT>_R
               -> <word_aczT>_R
               -> Sym
                    (Data.Binary.Get.Internal.NTCo:Get[0]
                       <M1
                          C
                          c_XbYM
                          (S1 NoSelector (Rec0 (Tree Int))
                           :*: S1 NoSelector (Rec0 (Tree Int)))
                          a17_aczU>_R)
               :: (forall word_aczT a17_aczU.
                   (Ord word_aczT, Num word_aczT, Data.Bits.Bits word_aczT) =>
                   word_aczT
                   -> word_aczT
                   -> forall r_acnR.
                      Data.ByteString.Internal.ByteString
                      -> Data.Binary.Get.Internal.Success
                           (M1
                              C
                              c_XbYM
                              (S1 NoSelector (Rec0 (Tree Int))
                               :*: S1 NoSelector (Rec0 (Tree Int)))
                              a17_aczU)
                           r_acnR
                      -> Data.Binary.Get.Internal.Decoder r_acnR)
                  ~R# (forall word_aczT a17_aczU.
                       (Ord word_aczT, Num word_aczT, Data.Bits.Bits word_aczT) =>
                       word_aczT
                       -> word_aczT
                       -> Get
                            (M1
                               C
                               c_XbYM
                               (S1 NoSelector (Rec0 (Tree Int))
                                :*: S1 NoSelector (Rec0 (Tree Int)))
                               a17_aczU))))
      (lvl14_resj @ c_XbYM)

Main.$wa
  :: forall r_acfj.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success (Tree Int) r_acfj
     -> Data.Binary.Get.Internal.Decoder r_acfj
Main.$wa =
  \ (@ r_acfj)
    (ww_sdJW :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdJX :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdJY :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdJZ :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdJT :: Data.Binary.Get.Internal.Success (Tree Int) r_acfj) ->
    binary-0.7.3.0:Data.Binary.Generic.$wa
      @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
      @ (M1
           C
           Main.C1_1Tree
           (S1 NoSelector (Rec0 (Tree Int))
            :*: S1 NoSelector (Rec0 (Tree Int))))
      (Main.$s$fGBinary:+:_$s$fGSumM2 @ Main.C1_0Tree)
      (Main.$s$fGBinary:+:_$s$fGSumM1 @ Main.C1_1Tree)
      (__word 1)
      (__word 1)
      @ ghc-prim-0.4.0.0:GHC.Prim.Any
      @ r_acfj
      ww_sdJW
      ww1_sdJX
      ww2_sdJY
      ww3_sdJZ
      (\ (i'1_acKr :: Data.ByteString.Internal.ByteString)
         (a17_acKs
            :: (:+:)
                 (C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
                 (C1
                    Main.C1_1Tree
                    (S1 NoSelector (Rec0 (Tree Int))
                     :*: S1 NoSelector (Rec0 (Tree Int))))
                 ghc-prim-0.4.0.0:GHC.Prim.Any) ->
         w_sdJT
           i'1_acKr
           (Main.$fGenericTree_$cto
              @ Int
              @ ghc-prim-0.4.0.0:GHC.Prim.Any
              (a17_acKs
               `cast` (Sym
                         (GHC.Generics.NTCo:M1[0]
                            <D>_P
                            <Main.D1Tree>_P
                            <C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int))
                             :+: C1
                                   Main.C1_1Tree
                                   (S1 NoSelector (Rec0 (Tree Int))
                                    :*: S1 NoSelector (Rec0 (Tree Int)))>_R)
                       ; Sub
                           (Sym (Main.Rep_Tree[0] <Int>_N)) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                       :: (:+:)
                            (C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
                            (C1
                               Main.C1_1Tree
                               (S1 NoSelector (Rec0 (Tree Int))
                                :*: S1 NoSelector (Rec0 (Tree Int))))
                            ghc-prim-0.4.0.0:GHC.Prim.Any
                          ~R# Rep (Tree Int) ghc-prim-0.4.0.0:GHC.Prim.Any))))

Main.$fBinaryTree_$s$cput :: Tree Int -> Put
Main.$fBinaryTree_$s$cput =
  \ (eta_aceP :: Tree Int) ->
    case eta_aceP of _ {
      Leaf g1_aaJ4 ->
        binary-0.7.3.0:Data.Binary.Generic.$w$cgput
          @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
          @ (M1
               C
               Main.C1_1Tree
               (S1 NoSelector (Rec0 (Tree Int))
                :*: S1 NoSelector (Rec0 (Tree Int))))
          (Main.$s$fGBinary:+:_$s$fGSumM2 @ Main.C1_0Tree)
          (Main.$s$fGBinary:+:_$s$fGSumM1 @ Main.C1_1Tree)
          (__word 1)
          (__word 1)
          @ ghc-prim-0.4.0.0:GHC.Prim.Any
          (GHC.Generics.L1
             @ (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R Int)))
             @ (C1
                  Main.C1_1Tree
                  (S1 NoSelector (Rec0 (Tree Int))
                   :*: S1 NoSelector (Rec0 (Tree Int))))
             @ ghc-prim-0.4.0.0:GHC.Prim.Any
             (g1_aaJ4
              `cast` (Sym
                        (GHC.Generics.NTCo:K1[0]
                           <R>_P <Int>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                      ; Sym (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R Int>_R)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0]
                               <C>_P
                               <Main.C1_0Tree>_P
                               <M1 S NoSelector (K1 R Int)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                      :: Int
                         ~R# M1
                               C
                               Main.C1_0Tree
                               (M1 S NoSelector (K1 R Int))
                               ghc-prim-0.4.0.0:GHC.Prim.Any)));
      Branch g1_aaJ5 g2_aaJ6 ->
        binary-0.7.3.0:Data.Binary.Generic.$w$cgput
          @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
          @ (M1
               C
               Main.C1_1Tree
               (S1 NoSelector (Rec0 (Tree Int))
                :*: S1 NoSelector (Rec0 (Tree Int))))
          (Main.$s$fGBinary:+:_$s$fGSumM2 @ Main.C1_0Tree)
          (Main.$s$fGBinary:+:_$s$fGSumM1 @ Main.C1_1Tree)
          (__word 1)
          (__word 1)
          @ ghc-prim-0.4.0.0:GHC.Prim.Any
          (GHC.Generics.R1
             @ (C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
             @ (M1
                  C
                  Main.C1_1Tree
                  (M1 S NoSelector (K1 R (Tree Int))
                   :*: M1 S NoSelector (K1 R (Tree Int))))
             @ ghc-prim-0.4.0.0:GHC.Prim.Any
             ((GHC.Generics.:*:
                 @ (M1 S NoSelector (K1 R (Tree Int)))
                 @ (M1 S NoSelector (K1 R (Tree Int)))
                 @ ghc-prim-0.4.0.0:GHC.Prim.Any
                 (g1_aaJ5
                  `cast` (Sym
                            (GHC.Generics.NTCo:K1[0]
                               <R>_P <Tree Int>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                          ; Sym
                              (GHC.Generics.NTCo:M1[0]
                                 <S>_P
                                 <NoSelector>_P
                                 <K1 R (Tree Int)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                          :: Tree Int
                             ~R# M1
                                   S NoSelector (K1 R (Tree Int)) ghc-prim-0.4.0.0:GHC.Prim.Any))
                 (g2_aaJ6
                  `cast` (Sym
                            (GHC.Generics.NTCo:K1[0]
                               <R>_P <Tree Int>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                          ; Sym
                              (GHC.Generics.NTCo:M1[0]
                                 <S>_P
                                 <NoSelector>_P
                                 <K1 R (Tree Int)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                          :: Tree Int
                             ~R# M1
                                   S NoSelector (K1 R (Tree Int)) ghc-prim-0.4.0.0:GHC.Prim.Any)))
              `cast` (Sym
                        (GHC.Generics.NTCo:M1[0]
                           <C>_P
                           <Main.C1_1Tree>_P
                           <M1 S NoSelector (K1 R (Tree Int))
                            :*: M1
                                  S
                                  NoSelector
                                  (K1 R (Tree Int))>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                      :: (:*:)
                           (M1 S NoSelector (K1 R (Tree Int)))
                           (M1 S NoSelector (K1 R (Tree Int)))
                           ghc-prim-0.4.0.0:GHC.Prim.Any
                         ~R# M1
                               C
                               Main.C1_1Tree
                               (M1 S NoSelector (K1 R (Tree Int))
                                :*: M1 S NoSelector (K1 R (Tree Int)))
                               ghc-prim-0.4.0.0:GHC.Prim.Any)))
    }

lvl10_rese :: Tree Int -> Put
lvl10_rese = Main.$fBinaryTree_$s$cput

lvl11_resf
  :: forall i_XbY0 c_XbY2 t_ac9s.
     M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_ac9s -> Put
lvl11_resf =
  \ (@ i_XbY0)
    (@ c_XbY2)
    (@ t_acA9)
    (eta_acAa :: M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_acA9) ->
    Main.$fBinaryTree_$s$cput
      (eta_acAa
       `cast` (GHC.Generics.NTCo:M1[0]
                 <i_XbY0>_P <c_XbY2>_P <K1 R (Tree Int)>_R <t_acA9>_N
               ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acA9>_P
               :: M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_acA9 ~R# Tree Int))

lvl12_resg
  :: forall i_XbY6 t_ac4Q. K1 i_XbY6 (Tree Int) t_ac4Q -> Put
lvl12_resg =
  \ (@ i_XbY6)
    (@ t_acAv)
    (eta_acAw :: K1 i_XbY6 (Tree Int) t_acAv) ->
    Main.$fBinaryTree_$s$cput
      (eta_acAw
       `cast` (GHC.Generics.NTCo:K1[0] <i_XbY6>_P <Tree Int>_R <t_acAv>_P
               :: K1 i_XbY6 (Tree Int) t_acAv ~R# Tree Int))

lvl13_resh
  :: forall t_acex.
     (:*:)
       (M1 S NoSelector (Rec0 (Tree Int)))
       (M1 S NoSelector (Rec0 (Tree Int)))
       t_acex
     -> Put
lvl13_resh =
  \ (@ t_acex)
    (w_sdKc
       :: (:*:)
            (M1 S NoSelector (Rec0 (Tree Int)))
            (M1 S NoSelector (Rec0 (Tree Int)))
            t_acex) ->
    case w_sdKc of _ { :*: ww1_sdKf ww2_sdKg ->
    let {
      a17_acAN :: Put
      a17_acAN =
        Main.$fBinaryTree_$s$cput
          (ww2_sdKg
           `cast` (GHC.Generics.NTCo:M1[0]
                     <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <t_acex>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acex>_P
                   :: M1 S NoSelector (K1 R (Tree Int)) t_acex ~R# Tree Int)) } in
    (Data.Binary.Put.PairS
       @ ()
       (case a17_acAN
             `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                     :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
        of _ { Data.Binary.Put.PairS b1_acAT w'_acAU ->
        b1_acAT
        })
       (let {
          f_acAW
            :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                -> IO LBS.ByteString)
               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
               -> IO LBS.ByteString
          f_acAW =
            case (Main.$fBinaryTree_$s$cput
                    (ww1_sdKf
                     `cast` (GHC.Generics.NTCo:M1[0]
                               <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <t_acex>_N
                             ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acex>_P
                             :: M1 S NoSelector (K1 R (Tree Int)) t_acex ~R# Tree Int)))
                 `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                         :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
            of _ { Data.Binary.Put.PairS ds1_acAZ w3_acB0 ->
            w3_acB0
            `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                    :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                       ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                             -> IO LBS.ByteString)
                            -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                            -> IO LBS.ByteString))
            } } in
        (\ (x_acB2
              :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                 -> IO LBS.ByteString) ->
           f_acAW
             (case a17_acAN
                   `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                           :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
              of _ { Data.Binary.Put.PairS b1_acB5 w'_acB6 ->
              (w'_acB6
               `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                       :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                          ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString)
                               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString)))
                x_acB2
              }))
        `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString)
                    -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder)))
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

$wlvl1_resi
  :: forall c_XbYM w_aces a1_acet.
     Binary w_aces =>
     w_aces
     -> C1
          c_XbYM
          (S1 NoSelector (Rec0 (Tree Int))
           :*: S1 NoSelector (Rec0 (Tree Int)))
          a1_acet
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
$wlvl1_resi =
  \ (@ c_XbYM)
    (@ w_aces)
    (@ a17_acet)
    (w1_sdK5 :: Binary w_aces)
    (w2_sdK6 :: w_aces)
    (w3_sdK8
       :: C1
            c_XbYM
            (S1 NoSelector (Rec0 (Tree Int))
             :*: S1 NoSelector (Rec0 (Tree Int)))
            a17_acet) ->
    case w2_sdK6 of code_aczr { __DEFAULT ->
    let {
      eta1_aczs :: Data.Binary.Put.PutM ()
      eta1_aczs =
        case w3_sdK8
             `cast` (GHC.Generics.NTCo:M1[0]
                       <C>_P
                       <c_XbYM>_P
                       <S1 NoSelector (Rec0 (Tree Int))
                        :*: S1 NoSelector (Rec0 (Tree Int))>_R <a17_acet>_N
                     :: M1
                          C
                          c_XbYM
                          (S1 NoSelector (Rec0 (Tree Int))
                           :*: S1 NoSelector (Rec0 (Tree Int)))
                          a17_acet
                        ~R# (:*:)
                              (S1 NoSelector (Rec0 (Tree Int)))
                              (S1 NoSelector (Rec0 (Tree Int)))
                              a17_acet)
        of _ { :*: ww1_acAO ww2_acAP ->
        let {
          a18_acAN :: Put
          a18_acAN =
            Main.$fBinaryTree_$s$cput
              (ww2_acAP
               `cast` (GHC.Generics.NTCo:M1[0]
                         <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <a17_acet>_N
                       ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_acet>_P
                       :: M1 S NoSelector (K1 R (Tree Int)) a17_acet ~R# Tree Int)) } in
        (Data.Binary.Put.PairS
           @ ()
           (case a18_acAN
                 `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                         :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
            of _ { Data.Binary.Put.PairS b1_acAT w'_acAU ->
            b1_acAT
            })
           (let {
              f_acAW
                :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString
              f_acAW =
                case (Main.$fBinaryTree_$s$cput
                        (ww1_acAO
                         `cast` (GHC.Generics.NTCo:M1[0]
                                   <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <a17_acet>_N
                                 ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_acet>_P
                                 :: M1 S NoSelector (K1 R (Tree Int)) a17_acet ~R# Tree Int)))
                     `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                             :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                of _ { Data.Binary.Put.PairS ds1_acAZ w4_acB0 ->
                w4_acB0
                `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                        :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                           ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                 -> IO LBS.ByteString)
                                -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString))
                } } in
            (\ (x_acB2
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString) ->
               f_acAW
                 (case a18_acAN
                       `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                               :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                  of _ { Data.Binary.Put.PairS b1_acB5 w'_acB6 ->
                  (w'_acB6
                   `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                           :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                              ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                    -> IO LBS.ByteString)
                                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                   -> IO LBS.ByteString)))
                    x_acB2
                  }))
            `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                    :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                         -> IO LBS.ByteString)
                        -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder)))
        `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
        } } in
    let {
      eta_aczt :: Data.Binary.Put.PutM ()
      eta_aczt = put @ w_aces w1_sdK5 code_aczr } in
    (# case eta_aczt of _ { __DEFAULT ->
       case eta1_aczs
            `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
       of _ { Data.Binary.Put.PairS x_aczx w'_aczy ->
       x_aczx
       }
       },
       (\ (x_aczA
             :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                -> IO LBS.ByteString) ->
          case eta_aczt
               `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                       :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
          of _ { Data.Binary.Put.PairS a18_aczD w8_aczE ->
          (w8_aczE
           `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                      ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                            -> IO LBS.ByteString)
                           -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           -> IO LBS.ByteString)))
            (case eta1_aczs
                  `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                          :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
             of _ { Data.Binary.Put.PairS x1_aczI w'_aczJ ->
             (w'_aczJ
              `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                      :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                         ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString)
                              -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              -> IO LBS.ByteString)))
               x_aczA
             })
          })
       `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
               :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }

lvl14_resj
  :: forall c_XbYM w_aces a1_acet.
     (Num w_aces, Data.Bits.Bits w_aces, Binary w_aces) =>
     w_aces
     -> w_aces
     -> C1
          c_XbYM
          (S1 NoSelector (Rec0 (Tree Int))
           :*: S1 NoSelector (Rec0 (Tree Int)))
          a1_acet
     -> Put
lvl14_resj =
  \ (@ c_XbYM)
    (@ w_aces)
    (@ a17_acet)
    _
    _
    (w3_sdK5 :: Binary w_aces)
    (w4_sdK6 :: w_aces)
    _
    (w6_sdK8
       :: C1
            c_XbYM
            (S1 NoSelector (Rec0 (Tree Int))
             :*: S1 NoSelector (Rec0 (Tree Int)))
            a17_acet) ->
    case $wlvl1_resi
           @ c_XbYM @ w_aces @ a17_acet w3_sdK5 w4_sdK6 w6_sdK8
    of _ { (# ww1_sdMk, ww2_sdMl #) ->
    (Data.Binary.Put.PairS @ () ww1_sdMk ww2_sdMl)
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

lvl15_resk :: Get (Tree Int)
lvl15_resk =
  Main.$fBinaryTree2
  `cast` (Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree Int>_R)
          :: (forall r_acnR.
              Data.ByteString.Internal.ByteString
              -> Data.Binary.Get.Internal.Success (Tree Int) r_acnR
              -> Data.Binary.Get.Internal.Decoder r_acnR)
             ~R# Get (Tree Int))

a9_resl
  :: forall c_XbYM word_acKy a1_acKz.
     (Ord word_acKy, Num word_acKy, Data.Bits.Bits word_acKy) =>
     word_acKy
     -> word_acKy
     -> forall r_acKF.
        Data.ByteString.Internal.ByteString
        -> Data.Binary.Get.Internal.Success
             (M1
                C
                c_XbYM
                (S1 NoSelector (Rec0 (Tree Int))
                 :*: S1 NoSelector (Rec0 (Tree Int)))
                a1_acKz)
             r_acKF
        -> Data.Binary.Get.Internal.Decoder r_acKF
a9_resl =
  \ (@ c_XbYM)
    (@ word_XcSn)
    (@ a17_XcSp)
    _
    _
    _
    _
    _
    (@ r_XcSB)
    (eta_XcSD :: Data.ByteString.Internal.ByteString)
    (eta1_XcSF
       :: Data.Binary.Get.Internal.Success
            (M1
               C
               c_XbYM
               (S1 NoSelector (Rec0 (Tree Int))
                :*: S1 NoSelector (Rec0 (Tree Int)))
               a17_XcSp)
            r_XcSB) ->
    case eta_XcSD
    of _
    { Data.ByteString.Internal.PS ww1_sdJW ww2_sdJX ww3_sdJY
                                  ww4_sdJZ ->
    Main.$wa
      @ r_XcSB
      ww1_sdJW
      ww2_sdJX
      ww3_sdJY
      ww4_sdJZ
      (\ (i'1_acHx :: Data.ByteString.Internal.ByteString)
         (a18_acHy :: Tree Int) ->
         case i'1_acHx
         of _
         { Data.ByteString.Internal.PS ww6_XdOX ww7_XdOZ ww8_XdP1
                                       ww9_XdP3 ->
         Main.$wa
           @ r_XcSB
           ww6_XdOX
           ww7_XdOZ
           ww8_XdP1
           ww9_XdP3
           (\ (i'2_XcML :: Data.ByteString.Internal.ByteString)
              (a19_XcMN :: Tree Int) ->
              eta1_XcSF
                i'2_XcML
                ((GHC.Generics.:*:
                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                    @ a17_XcSp
                    (a18_acHy
                     `cast` (Sym
                               (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_XcSp>_P)
                             ; Sym
                                 (GHC.Generics.NTCo:M1[0]
                                    <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <a17_XcSp>_N
                             :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) a17_XcSp))
                    (a19_XcMN
                     `cast` (Sym
                               (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_XcSp>_P)
                             ; Sym
                                 (GHC.Generics.NTCo:M1[0]
                                    <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <a17_XcSp>_N
                             :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) a17_XcSp)))
                 `cast` (Sym
                           (GHC.Generics.NTCo:M1[0]
                              <C>_P
                              <c_XbYM>_P
                              <S1 NoSelector (Rec0 (Tree Int))
                               :*: S1 NoSelector (Rec0 (Tree Int))>_R) <a17_XcSp>_N
                         :: (:*:)
                              (S1 NoSelector (Rec0 (Tree Int)))
                              (S1 NoSelector (Rec0 (Tree Int)))
                              a17_XcSp
                            ~R# M1
                                  C
                                  c_XbYM
                                  (S1 NoSelector (Rec0 (Tree Int))
                                   :*: S1 NoSelector (Rec0 (Tree Int)))
                                  a17_XcSp)))
         })
    }

a10_resm
  :: forall i_XbY0 c_XbY2 t_acKn r_acKo.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          (M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_acKn) r_acKo
     -> Data.Binary.Get.Internal.Decoder r_acKo
a10_resm =
  \ (@ i_XbY0)
    (@ c_XbY2)
    (@ t_XcSC)
    (@ r_XcSE)
    (eta_XcSG :: Data.ByteString.Internal.ByteString)
    (eta1_XcSI
       :: Data.Binary.Get.Internal.Success
            (M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_XcSC) r_XcSE) ->
    case eta_XcSG
    of _
    { Data.ByteString.Internal.PS ww1_sdJW ww2_sdJX ww3_sdJY
                                  ww4_sdJZ ->
    Main.$wa
      @ r_XcSE
      ww1_sdJW
      ww2_sdJX
      ww3_sdJY
      ww4_sdJZ
      (\ (i'1_acHx :: Data.ByteString.Internal.ByteString)
         (a17_acHy :: Tree Int) ->
         eta1_XcSI
           i'1_acHx
           (a17_acHy
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_XcSC>_P)
                    ; Sym
                        (GHC.Generics.NTCo:M1[0]
                           <i_XbY0>_P <c_XbY2>_P <K1 R (Tree Int)>_R) <t_XcSC>_N
                    :: Tree Int ~R# M1 i_XbY0 c_XbY2 (K1 R (Tree Int)) t_XcSC)))
    }

a11_resn
  :: forall i_XbY6 t_acHt r_acHu.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          (K1 i_XbY6 (Tree Int) t_acHt) r_acHu
     -> Data.Binary.Get.Internal.Decoder r_acHu
a11_resn =
  \ (@ i_XbY6)
    (@ t_XcPL)
    (@ r_XcPN)
    (eta_XcPP :: Data.ByteString.Internal.ByteString)
    (eta1_XcPR
       :: Data.Binary.Get.Internal.Success
            (K1 i_XbY6 (Tree Int) t_XcPL) r_XcPN) ->
    case eta_XcPP
    of _
    { Data.ByteString.Internal.PS ww1_sdJW ww2_sdJX ww3_sdJY
                                  ww4_sdJZ ->
    Main.$wa
      @ r_XcPN
      ww1_sdJW
      ww2_sdJX
      ww3_sdJY
      ww4_sdJZ
      (\ (i'1_acHx :: Data.ByteString.Internal.ByteString)
         (a17_acHy :: Tree Int) ->
         eta1_XcPR
           i'1_acHx
           (a17_acHy
            `cast` (Sym
                      (GHC.Generics.NTCo:K1[0] <i_XbY6>_P <Tree Int>_R <t_XcPL>_P)
                    :: Tree Int ~R# K1 i_XbY6 (Tree Int) t_XcPL)))
    }

$wa11_reso
  :: forall t_acOE r_acOF.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success
          ((:*:)
             (M1 S NoSelector (Rec0 (Tree Int)))
             (M1 S NoSelector (Rec0 (Tree Int)))
             t_acOE)
          r_acOF
     -> Data.Binary.Get.Internal.Decoder r_acOF
$wa11_reso =
  \ (@ t_acOE)
    (@ r_acOF)
    (ww_sdKp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdKq :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdKr :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdKs :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdKm
       :: Data.Binary.Get.Internal.Success
            ((:*:)
               (M1 S NoSelector (Rec0 (Tree Int)))
               (M1 S NoSelector (Rec0 (Tree Int)))
               t_acOE)
            r_acOF) ->
    Main.$wa
      @ r_acOF
      ww_sdKp
      ww1_sdKq
      ww2_sdKr
      ww3_sdKs
      (\ (i'1_acHx :: Data.ByteString.Internal.ByteString)
         (a17_acHy :: Tree Int) ->
         case i'1_acHx
         of _
         { Data.ByteString.Internal.PS ww5_XdOU ww6_XdOW ww7_XdOY
                                       ww8_XdP0 ->
         Main.$wa
           @ r_acOF
           ww5_XdOU
           ww6_XdOW
           ww7_XdOY
           ww8_XdP0
           (\ (i'2_XcMG :: Data.ByteString.Internal.ByteString)
              (a18_XcMI :: Tree Int) ->
              w_sdKm
                i'2_XcMG
                (GHC.Generics.:*:
                   @ (M1 S NoSelector (Rec0 (Tree Int)))
                   @ (M1 S NoSelector (Rec0 (Tree Int)))
                   @ t_acOE
                   (a17_acHy
                    `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acOE>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <t_acOE>_N
                            :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) t_acOE))
                   (a18_XcMI
                    `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acOE>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <t_acOE>_N
                            :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) t_acOE))))
         })

a12_resp
  :: forall t_acOE r_acOF.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          ((:*:)
             (M1 S NoSelector (Rec0 (Tree Int)))
             (M1 S NoSelector (Rec0 (Tree Int)))
             t_acOE)
          r_acOF
     -> Data.Binary.Get.Internal.Decoder r_acOF
a12_resp =
  \ (@ t_acOE)
    (@ r_acOF)
    (w_sdKl :: Data.ByteString.Internal.ByteString)
    (w1_sdKm
       :: Data.Binary.Get.Internal.Success
            ((:*:)
               (M1 S NoSelector (Rec0 (Tree Int)))
               (M1 S NoSelector (Rec0 (Tree Int)))
               t_acOE)
            r_acOF) ->
    case w_sdKl
    of _
    { Data.ByteString.Internal.PS ww1_sdKp ww2_sdKq ww3_sdKr
                                  ww4_sdKs ->
    $wa11_reso
      @ t_acOE @ r_acOF ww1_sdKp ww2_sdKq ww3_sdKr ww4_sdKs w1_sdKm
    }
end Rec }

lvl18_resy
  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           LBS.ByteString #)
lvl18_resy =
  \ (w1_acP5 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
    (w2_acP6
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case w1_acP5
    of _
    { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer ww1_acPa ww2_acPb
                                                     ww3_acPc ww4_acPd ww5_acPe ->
    case ww4_acPd of wild_advv {
      __DEFAULT ->
        (# w2_acP6,
           Data.ByteString.Lazy.Internal.Chunk
             ww1_acPa
             ww2_acPb
             ww3_acPc
             wild_advv
             Data.ByteString.Lazy.Internal.Empty #);
      0 -> (# w2_acP6, Data.ByteString.Lazy.Internal.Empty #)
    }
    }

Rec {
Main.$fBinaryTree
  :: forall a_aaJ2. Binary a_aaJ2 => Binary (Tree a_aaJ2)
Main.$fBinaryTree =
  \ (@ a17_ab75) ($dBinary_ab76 :: Binary a17_ab75) ->
    binary-0.7.3.0:Data.Binary.Class.D:Binary
      @ (Tree a17_ab75)
      (Main.$fBinaryTree_$cput @ a17_ab75 $dBinary_ab76)
      (Main.$fBinaryTree_$cget @ a17_ab75 $dBinary_ab76)

Main.$fBinaryTree_$cget
  :: forall a_ab75. Binary a_ab75 => Get (Tree a_ab75)
Main.$fBinaryTree_$cget =
  \ (@ a17_ab75) ($dBinary_ab76 :: Binary a17_ab75) ->
    let {
      $dGBinary_scyi :: GBinary (K1 R a17_ab75)
      $dGBinary_scyi =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ a17_ab75 $dBinary_ab76 } in
    let {
      $dGBinary1_scyh :: GBinary (M1 S NoSelector (Rec0 a17_ab75))
      $dGBinary1_scyh =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R a17_ab75) $dGBinary_scyi } in
    let {
      a18_scNL
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1 Main.C1_0Tree (M1 S NoSelector (Rec0 a17_ab75)))
      a18_scNL =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_0Tree
          @ (M1 S NoSelector (Rec0 a17_ab75))
          $dGBinary1_scyh } in
    let {
      $dBinary1_scyg :: Binary (Tree a17_ab75)
      $dBinary1_scyg = Main.$fBinaryTree @ a17_ab75 $dBinary_ab76 } in
    let {
      $dGBinary2_scyf :: GBinary (K1 R (Tree a17_ab75))
      $dGBinary2_scyf =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ (Tree a17_ab75) $dBinary1_scyg } in
    let {
      $dGBinary3_scye :: GBinary (M1 S NoSelector (Rec0 (Tree a17_ab75)))
      $dGBinary3_scye =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R (Tree a17_ab75)) $dGBinary2_scyf } in
    let {
      $dGBinary4_scyd
        :: GBinary
             (S1 NoSelector (Rec0 (Tree a17_ab75))
              :*: S1 NoSelector (Rec0 (Tree a17_ab75)))
      $dGBinary4_scyd =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*:
          @ (M1 S NoSelector (Rec0 (Tree a17_ab75)))
          @ (M1 S NoSelector (Rec0 (Tree a17_ab75)))
          $dGBinary3_scye
          $dGBinary3_scye } in
    let {
      a19_scNM
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1
                Main.C1_1Tree
                (S1 NoSelector (Rec0 (Tree a17_ab75))
                 :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
      a19_scNM =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_1Tree
          @ (S1 NoSelector (Rec0 (Tree a17_ab75))
             :*: S1 NoSelector (Rec0 (Tree a17_ab75)))
          $dGBinary4_scyd } in
    (\ (@ r_Xcnd)
       (i_Xcnf :: Data.ByteString.Internal.ByteString)
       (ks_Xcnh
          :: Data.Binary.Get.Internal.Success (Tree a17_ab75) r_Xcnd) ->
       case i_Xcnf
       of _
       { Data.ByteString.Internal.PS ww5_acOf ww6_acOg ww7_acOh
                                     ww8_acOi ->
       binary-0.7.3.0:Data.Binary.Generic.$wa
         @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab75)))
         @ (M1
              C
              Main.C1_1Tree
              (S1 NoSelector (Rec0 (Tree a17_ab75))
               :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
         a18_scNL
         a19_scNM
         (__word 1)
         (__word 1)
         @ ghc-prim-0.4.0.0:GHC.Prim.Any
         @ r_Xcnd
         ww5_acOf
         ww6_acOg
         ww7_acOh
         ww8_acOi
         (\ (i'1_acKr :: Data.ByteString.Internal.ByteString)
            (a20_acKs
               :: (:+:)
                    (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab75)))
                    (C1
                       Main.C1_1Tree
                       (S1 NoSelector (Rec0 (Tree a17_ab75))
                        :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
                    ghc-prim-0.4.0.0:GHC.Prim.Any) ->
            ks_Xcnh
              i'1_acKr
              (Main.$fGenericTree_$cto
                 @ a17_ab75
                 @ ghc-prim-0.4.0.0:GHC.Prim.Any
                 (a20_acKs
                  `cast` (Sym
                            (GHC.Generics.NTCo:M1[0]
                               <D>_P
                               <Main.D1Tree>_P
                               <C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab75))
                                :+: C1
                                      Main.C1_1Tree
                                      (S1 NoSelector (Rec0 (Tree a17_ab75))
                                       :*: S1 NoSelector (Rec0 (Tree a17_ab75)))>_R)
                          ; Sub
                              (Sym
                                 (Main.Rep_Tree[0] <a17_ab75>_N)) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                          :: (:+:)
                               (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab75)))
                               (C1
                                  Main.C1_1Tree
                                  (S1 NoSelector (Rec0 (Tree a17_ab75))
                                   :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
                               ghc-prim-0.4.0.0:GHC.Prim.Any
                             ~R# Rep (Tree a17_ab75) ghc-prim-0.4.0.0:GHC.Prim.Any))))
       })
    `cast` (Sym
              (Data.Binary.Get.Internal.NTCo:Get[0] <Tree a17_ab75>_R)
            :: (forall r_acnR.
                Data.ByteString.Internal.ByteString
                -> Data.Binary.Get.Internal.Success (Tree a17_ab75) r_acnR
                -> Data.Binary.Get.Internal.Decoder r_acnR)
               ~R# Get (Tree a17_ab75))

Main.$fBinaryTree_$cput
  :: forall a_ab75. Binary a_ab75 => Tree a_ab75 -> Put
Main.$fBinaryTree_$cput =
  \ (@ a17_ab75) ($dBinary_ab76 :: Binary a17_ab75) ->
    let {
      $dGBinary_scyu :: GBinary (K1 R a17_ab75)
      $dGBinary_scyu =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ a17_ab75 $dBinary_ab76 } in
    let {
      $dGBinary1_scyt :: GBinary (M1 S NoSelector (Rec0 a17_ab75))
      $dGBinary1_scyt =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R a17_ab75) $dGBinary_scyu } in
    let {
      a18_scOn
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1 Main.C1_0Tree (M1 S NoSelector (Rec0 a17_ab75)))
      a18_scOn =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_0Tree
          @ (M1 S NoSelector (Rec0 a17_ab75))
          $dGBinary1_scyt } in
    let {
      $dBinary1_scys :: Binary (Tree a17_ab75)
      $dBinary1_scys = Main.$fBinaryTree @ a17_ab75 $dBinary_ab76 } in
    let {
      $dGBinary2_scyr :: GBinary (K1 R (Tree a17_ab75))
      $dGBinary2_scyr =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ (Tree a17_ab75) $dBinary1_scys } in
    let {
      $dGBinary3_scyq :: GBinary (M1 S NoSelector (Rec0 (Tree a17_ab75)))
      $dGBinary3_scyq =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R (Tree a17_ab75)) $dGBinary2_scyr } in
    let {
      $dGBinary4_scyp
        :: GBinary
             (S1 NoSelector (Rec0 (Tree a17_ab75))
              :*: S1 NoSelector (Rec0 (Tree a17_ab75)))
      $dGBinary4_scyp =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*:
          @ (M1 S NoSelector (Rec0 (Tree a17_ab75)))
          @ (M1 S NoSelector (Rec0 (Tree a17_ab75)))
          $dGBinary3_scyq
          $dGBinary3_scyq } in
    let {
      a19_scOo
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1
                Main.C1_1Tree
                (S1 NoSelector (Rec0 (Tree a17_ab75))
                 :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
      a19_scOo =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_1Tree
          @ (S1 NoSelector (Rec0 (Tree a17_ab75))
             :*: S1 NoSelector (Rec0 (Tree a17_ab75)))
          $dGBinary4_scyp } in
    \ (eta_aceP :: Tree a17_ab75) ->
      case eta_aceP of _ {
        Leaf g1_aaJ4 ->
          binary-0.7.3.0:Data.Binary.Generic.$w$cgput
            @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab75)))
            @ (M1
                 C
                 Main.C1_1Tree
                 (S1 NoSelector (Rec0 (Tree a17_ab75))
                  :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
            a18_scOn
            a19_scOo
            (__word 1)
            (__word 1)
            @ ghc-prim-0.4.0.0:GHC.Prim.Any
            (GHC.Generics.L1
               @ (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab75)))
               @ (C1
                    Main.C1_1Tree
                    (S1 NoSelector (Rec0 (Tree a17_ab75))
                     :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
               @ ghc-prim-0.4.0.0:GHC.Prim.Any
               (g1_aaJ4
                `cast` (Sym
                          (GHC.Generics.NTCo:K1[0]
                             <R>_P <a17_ab75>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R a17_ab75>_R)
                          ; Sym
                              (GHC.Generics.NTCo:M1[0]
                                 <C>_P
                                 <Main.C1_0Tree>_P
                                 <M1
                                    S
                                    NoSelector
                                    (K1 R a17_ab75)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                        :: a17_ab75
                           ~R# M1
                                 C
                                 Main.C1_0Tree
                                 (M1 S NoSelector (K1 R a17_ab75))
                                 ghc-prim-0.4.0.0:GHC.Prim.Any)));
        Branch g1_aaJ5 g2_aaJ6 ->
          binary-0.7.3.0:Data.Binary.Generic.$w$cgput
            @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab75)))
            @ (M1
                 C
                 Main.C1_1Tree
                 (S1 NoSelector (Rec0 (Tree a17_ab75))
                  :*: S1 NoSelector (Rec0 (Tree a17_ab75))))
            a18_scOn
            a19_scOo
            (__word 1)
            (__word 1)
            @ ghc-prim-0.4.0.0:GHC.Prim.Any
            (GHC.Generics.R1
               @ (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab75)))
               @ (M1
                    C
                    Main.C1_1Tree
                    (M1 S NoSelector (K1 R (Tree a17_ab75))
                     :*: M1 S NoSelector (K1 R (Tree a17_ab75))))
               @ ghc-prim-0.4.0.0:GHC.Prim.Any
               ((GHC.Generics.:*:
                   @ (M1 S NoSelector (K1 R (Tree a17_ab75)))
                   @ (M1 S NoSelector (K1 R (Tree a17_ab75)))
                   @ ghc-prim-0.4.0.0:GHC.Prim.Any
                   (g1_aaJ5
                    `cast` (Sym
                              (GHC.Generics.NTCo:K1[0]
                                 <R>_P <Tree a17_ab75>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P
                                   <NoSelector>_P
                                   <K1 R (Tree a17_ab75)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                            :: Tree a17_ab75
                               ~R# M1
                                     S
                                     NoSelector
                                     (K1 R (Tree a17_ab75))
                                     ghc-prim-0.4.0.0:GHC.Prim.Any))
                   (g2_aaJ6
                    `cast` (Sym
                              (GHC.Generics.NTCo:K1[0]
                                 <R>_P <Tree a17_ab75>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P
                                   <NoSelector>_P
                                   <K1 R (Tree a17_ab75)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                            :: Tree a17_ab75
                               ~R# M1
                                     S
                                     NoSelector
                                     (K1 R (Tree a17_ab75))
                                     ghc-prim-0.4.0.0:GHC.Prim.Any)))
                `cast` (Sym
                          (GHC.Generics.NTCo:M1[0]
                             <C>_P
                             <Main.C1_1Tree>_P
                             <M1 S NoSelector (K1 R (Tree a17_ab75))
                              :*: M1
                                    S
                                    NoSelector
                                    (K1 R (Tree a17_ab75))>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                        :: (:*:)
                             (M1 S NoSelector (K1 R (Tree a17_ab75)))
                             (M1 S NoSelector (K1 R (Tree a17_ab75)))
                             ghc-prim-0.4.0.0:GHC.Prim.Any
                           ~R# M1
                                 C
                                 Main.C1_1Tree
                                 (M1 S NoSelector (K1 R (Tree a17_ab75))
                                  :*: M1 S NoSelector (K1 R (Tree a17_ab75)))
                                 ghc-prim-0.4.0.0:GHC.Prim.Any)))
      }
end Rec }

Main.$fGenericTree_$cfrom
  :: forall a_ab3M x_ab3P. Tree a_ab3M -> Rep (Tree a_ab3M) x_ab3P
Main.$fGenericTree_$cfrom =
  \ (@ a17_ab3M) (@ x_ab3Q) (ds_dc2g :: Tree a17_ab3M) ->
    case ds_dc2g of _ {
      Leaf g1_aaJ4 ->
        (GHC.Generics.L1
           @ (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab3M)))
           @ (C1
                Main.C1_1Tree
                (S1 NoSelector (Rec0 (Tree a17_ab3M))
                 :*: S1 NoSelector (Rec0 (Tree a17_ab3M))))
           @ x_ab3Q
           (g1_aaJ4
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <a17_ab3M>_R <x_ab3Q>_P)
                    ; Sym
                        (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R a17_ab3M>_R)
                      ; Sym
                          (GHC.Generics.NTCo:M1[0]
                             <C>_P
                             <Main.C1_0Tree>_P
                             <M1 S NoSelector (K1 R a17_ab3M)>_R) <x_ab3Q>_N
                    :: a17_ab3M
                       ~R# M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab3M)) x_ab3Q)))
        `cast` (Sym
                  (GHC.Generics.NTCo:M1[0]
                     <D>_P
                     <Main.D1Tree>_P
                     <M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab3M))
                      :+: C1
                            Main.C1_1Tree
                            (S1 NoSelector (Rec0 (Tree a17_ab3M))
                             :*: S1 NoSelector (Rec0 (Tree a17_ab3M)))>_R)
                ; Sub (Sym (Main.Rep_Tree[0] <a17_ab3M>_N)) <x_ab3Q>_N
                :: (:+:)
                     (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab3M)))
                     (C1
                        Main.C1_1Tree
                        (S1 NoSelector (Rec0 (Tree a17_ab3M))
                         :*: S1 NoSelector (Rec0 (Tree a17_ab3M))))
                     x_ab3Q
                   ~R# Rep (Tree a17_ab3M) x_ab3Q);
      Branch g1_aaJ5 g2_aaJ6 ->
        (GHC.Generics.R1
           @ (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab3M)))
           @ (M1
                C
                Main.C1_1Tree
                (M1 S NoSelector (K1 R (Tree a17_ab3M))
                 :*: M1 S NoSelector (K1 R (Tree a17_ab3M))))
           @ x_ab3Q
           ((GHC.Generics.:*:
               @ (M1 S NoSelector (K1 R (Tree a17_ab3M)))
               @ (M1 S NoSelector (K1 R (Tree a17_ab3M)))
               @ x_ab3Q
               (g1_aaJ5
                `cast` (Sym
                          (GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab3M>_R <x_ab3Q>_P)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0]
                               <S>_P <NoSelector>_P <K1 R (Tree a17_ab3M)>_R) <x_ab3Q>_N
                        :: Tree a17_ab3M
                           ~R# M1 S NoSelector (K1 R (Tree a17_ab3M)) x_ab3Q))
               (g2_aaJ6
                `cast` (Sym
                          (GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab3M>_R <x_ab3Q>_P)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0]
                               <S>_P <NoSelector>_P <K1 R (Tree a17_ab3M)>_R) <x_ab3Q>_N
                        :: Tree a17_ab3M
                           ~R# M1 S NoSelector (K1 R (Tree a17_ab3M)) x_ab3Q)))
            `cast` (Sym
                      (GHC.Generics.NTCo:M1[0]
                         <C>_P
                         <Main.C1_1Tree>_P
                         <M1 S NoSelector (K1 R (Tree a17_ab3M))
                          :*: M1 S NoSelector (K1 R (Tree a17_ab3M))>_R) <x_ab3Q>_N
                    :: (:*:)
                         (M1 S NoSelector (K1 R (Tree a17_ab3M)))
                         (M1 S NoSelector (K1 R (Tree a17_ab3M)))
                         x_ab3Q
                       ~R# M1
                             C
                             Main.C1_1Tree
                             (M1 S NoSelector (K1 R (Tree a17_ab3M))
                              :*: M1 S NoSelector (K1 R (Tree a17_ab3M)))
                             x_ab3Q)))
        `cast` (Sym
                  (GHC.Generics.NTCo:M1[0]
                     <D>_P
                     <Main.D1Tree>_P
                     <C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab3M))
                      :+: M1
                            C
                            Main.C1_1Tree
                            (M1 S NoSelector (K1 R (Tree a17_ab3M))
                             :*: M1 S NoSelector (K1 R (Tree a17_ab3M)))>_R)
                ; Sub (Sym (Main.Rep_Tree[0] <a17_ab3M>_N)) <x_ab3Q>_N
                :: (:+:)
                     (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab3M)))
                     (M1
                        C
                        Main.C1_1Tree
                        (M1 S NoSelector (K1 R (Tree a17_ab3M))
                         :*: M1 S NoSelector (K1 R (Tree a17_ab3M))))
                     x_ab3Q
                   ~R# Rep (Tree a17_ab3M) x_ab3Q)
    }

Rec {
Main.$fNFDataTree_$crnf
  :: forall a_ab6L. NFData a_ab6L => Tree a_ab6L -> ()
Main.$fNFDataTree_$crnf =
  \ (@ a17_ab6L)
    ($dNFData_ab6M :: NFData a17_ab6L)
    (eta_B1 :: Tree a17_ab6L) ->
    case eta_B1 of _ {
      Leaf g1_aaJ4 ->
        ($dNFData_ab6M
         `cast` (Control.DeepSeq.NTCo:NFData[0] <a17_ab6L>_N
                 :: NFData a17_ab6L ~R# (a17_ab6L -> ())))
          g1_aaJ4;
      Branch g1_aaJ5 g2_aaJ6 ->
        case Main.$fNFDataTree_$crnf @ a17_ab6L $dNFData_ab6M g1_aaJ5
        of _ { () ->
        Main.$fNFDataTree_$crnf @ a17_ab6L $dNFData_ab6M g2_aaJ6
        }
    }
end Rec }

Main.$fNFDataTree
  :: forall a_aaJ1. NFData a_aaJ1 => NFData (Tree a_aaJ1)
Main.$fNFDataTree =
  Main.$fNFDataTree_$crnf
  `cast` (forall a17_ab6L.
          <NFData a17_ab6L>_R
          -> Sym (Control.DeepSeq.NTCo:NFData[0] <Tree a17_ab6L>_N)
          :: (forall a17_ab6L. NFData a17_ab6L => Tree a17_ab6L -> ())
             ~R# (forall a17_ab6L. NFData a17_ab6L => NFData (Tree a17_ab6L)))

Main.$sforce5 :: Tree Int -> ()
Main.$sforce5 =
  Main.$fNFDataTree_$crnf
    @ Int
    (Control.DeepSeq.$fNFDataInt_$crnf
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
             :: (Int -> ()) ~R# NFData Int))

Main.$fGenericTree :: forall a_aaIZ. Generic (Tree a_aaIZ)
Main.$fGenericTree =
  \ (@ a17_ab3M) ->
    GHC.Generics.D:Generic
      @ (Tree a17_ab3M)
      (Main.$fGenericTree_$cfrom @ a17_ab3M)
      (Main.$fGenericTree_$cto @ a17_ab3M)

Rec {
Main.$w$s$cput
  :: Tree1 Int
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
Main.$w$s$cput =
  \ (w_sdLn :: Tree1 Int) ->
    case w_sdLn of _ {
      Leaf1 a17_a4rn ->
        let {
          a18_scLj :: Put
          a18_scLj =
            case binary-0.7.3.0:Data.Binary.Class.$w$cput9
                   (case a17_a4rn of _ { ghc-prim-0.4.0.0:GHC.Types.I# x#_acHT ->
                    GHC.Int.I64# x#_acHT
                    })
            of _ { (# ww1_acLf, ww2_acLg #) ->
            (Data.Binary.Put.PairS @ () ww1_acLf ww2_acLg)
            `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
            } } in
        (# case a18_scLj
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ { Data.Binary.Put.PairS b1_acoC w'_acoD ->
           b1_acoC
           },
           (\ (x_ac8X
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac6r
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                eta_ac6r =
                  case a18_scLj
                       `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                               :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                  of _ { Data.Binary.Put.PairS b1_acoM w'_acoN ->
                  (w'_acoN
                   `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                           :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                              ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                    -> IO LBS.ByteString)
                                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                   -> IO LBS.ByteString)))
                    x_ac8X
                  } } in
              let {
                lvl20_se10 :: LBS.ByteString
                lvl20_se10 =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ { (# ipv1_acIF, ipv2_acIG #) ->
                  let {
                    a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    a20_acIE =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acIG
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acIE
                         0
                         (__word 0)
                         ipv1_acIF
                  of s2_acJJ { __DEFAULT ->
                  let {
                    a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                    a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                  of s'_acIO { __DEFAULT ->
                  case ((eta_ac6r
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acIE a21_acII 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acIO
                  of _ { (# ipv3_acIX, ipv4_acIY #) ->
                  ipv4_acIY
                  }
                  }
                  }
                  } } in
              \ (eta1_ac6s :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac6t
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac6s
                of _
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acIe dt1_acIf
                                                                 dt2_acIg dt3_acIh dt4_acIi ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acIi)
                of _ {
                  False ->
                    case dt3_acIh of wild3_acIU {
                      __DEFAULT ->
                        (# eta2_ac6t,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acIe dt1_acIf dt2_acIg wild3_acIU lvl20_se10 #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac6t
                        of _ { (# ipv1_acIF, ipv2_acIG #) ->
                        let {
                          a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          a20_acIE =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acIG
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acIE
                               0
                               (__word 0)
                               ipv1_acIF
                        of s2_acJJ { __DEFAULT ->
                        let {
                          a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                          a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                        of s'_acIO { __DEFAULT ->
                        ((eta_ac6r
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acIE a21_acII 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acIO
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acIe (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acIg dt3_acIh))
                           0
                           (__word 0)
                           eta2_ac6t
                    of s2_acJJ { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acIf s2_acJJ
                    of s'_acJ7 { __DEFAULT ->
                    ((eta_ac6r
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acIe
                           dt1_acIf
                           dt2_acIg
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acIh 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acIi 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acJ7
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #);
      Branch1 t1_a4sJ t2_a4sK ->
        let {
          a17_scLK :: Put
          a17_scLK =
            case Main.$w$s$cput t2_a4sK of _ { (# ww1_sdMw, ww2_sdMx #) ->
            (Data.Binary.Put.PairS @ () ww1_sdMw ww2_sdMx)
            `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
            } } in
        (# case a17_scLK
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ { Data.Binary.Put.PairS b1_acoC w'_acoD ->
           b1_acoC
           },
           let {
             g_ac8W
               :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                  -> IO LBS.ByteString
             g_ac8W =
               case Main.$w$s$cput t1_a4sJ of _ { (# ww1_sdMw, ww2_sdMx #) ->
               ww2_sdMx
               `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                       :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                          ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString)
                               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString))
               } } in
           (\ (x_XceZ
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac6r
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                eta_ac6r =
                  g_ac8W
                    (case a17_scLK
                          `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                                  :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                     of _ { Data.Binary.Put.PairS b1_acoM w'_acoN ->
                     (w'_acoN
                      `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                              :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                 ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                       -> IO LBS.ByteString)
                                      -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                      -> IO LBS.ByteString)))
                       x_XceZ
                     }) } in
              let {
                lvl20_se11 :: LBS.ByteString
                lvl20_se11 =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ { (# ipv1_acIF, ipv2_acIG #) ->
                  let {
                    a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    a20_acIE =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acIG
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acIE
                         0
                         (__word 1)
                         ipv1_acIF
                  of s2_acJJ { __DEFAULT ->
                  let {
                    a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                    a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                  of s'_acIO { __DEFAULT ->
                  case ((eta_ac6r
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acIE a21_acII 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acIO
                  of _ { (# ipv3_acIX, ipv4_acIY #) ->
                  ipv4_acIY
                  }
                  }
                  }
                  } } in
              \ (eta1_ac6s :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac6t
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac6s
                of _
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acIe dt1_acIf
                                                                 dt2_acIg dt3_acIh dt4_acIi ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acIi)
                of _ {
                  False ->
                    case dt3_acIh of wild3_acIU {
                      __DEFAULT ->
                        (# eta2_ac6t,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acIe dt1_acIf dt2_acIg wild3_acIU lvl20_se11 #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac6t
                        of _ { (# ipv1_acIF, ipv2_acIG #) ->
                        let {
                          a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          a20_acIE =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acIG
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acIE
                               0
                               (__word 1)
                               ipv1_acIF
                        of s2_acJJ { __DEFAULT ->
                        let {
                          a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                          a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                        of s'_acIO { __DEFAULT ->
                        ((eta_ac6r
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acIE a21_acII 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acIO
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acIe (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acIg dt3_acIh))
                           0
                           (__word 1)
                           eta2_ac6t
                    of s2_acJJ { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acIf s2_acJJ
                    of s'_acJ7 { __DEFAULT ->
                    ((eta_ac6r
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acIe
                           dt1_acIf
                           dt2_acIg
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acIh 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acIi 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acJ7
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }
end Rec }

Main.main13
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree Int #)
Main.main13 =
  \ (w_sdIP
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    Main.$wa3 20 w_sdIP

Rec {
Main.main_$s$wa3
  :: Tree Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
Main.main_$s$wa3 =
  \ (sc_seai :: Tree Int)
    (sc1_seaj :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_seak
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_seaj 0)
    of _ {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ (Tree Int)
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (case Main.$fNFDataTree_$crnf
                       @ Int
                       (Control.DeepSeq.$fNFDataInt_$crnf
                        `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
                                :: (Int -> ()) ~R# NFData Int))
                       sc_seai
                of _ { () ->
                sc_seai
                })
               sc2_seak
        of _ { (# ipv_acJo, ipv1_acJp #) ->
        Main.main_$s$wa3
          sc_seai (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_seaj 1) ipv_acJo
        };
      True -> (# sc2_seak, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Rec {
Main.main_$s$wa2
  :: Tree Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
Main.main_$s$wa2 =
  \ (sc_seab :: Tree Int)
    (sc1_seac :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_sead
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_seac 0)
    of _ {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ Data.ByteString.Internal.ByteString
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (LBS.toStrict
                  (GHC.IO.unsafeDupablePerformIO
                     @ LBS.ByteString
                     ((\ (s_acBH
                            :: ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                         case ghc-prim-0.4.0.0:GHC.Prim.noDuplicate# s_acBH
                         of s'_acBI { __DEFAULT ->
                         case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                                @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 s'_acBI
                         of _ { (# ipv_acHd, ipv1_acHe #) ->
                         case (Main.$fBinaryTree_$s$cput sc_seab)
                              `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                                      :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                         of _ { Data.Binary.Put.PairS ds1_acBQ b_acBR ->
                         (((b_acBR
                            `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                                    :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                       ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                             -> IO LBS.ByteString)
                                            -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                            -> IO LBS.ByteString)))
                             (lvl18_resy
                              `cast` (<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                                      -> Sym
                                           (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0]
                                              <LBS.ByteString>_R)
                                      :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                          -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))
                                         ~R# (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                              -> IO LBS.ByteString)))
                             (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                (ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                                   (ipv1_acHe
                                    `cast` (UnivCo mkUnsafeCo representational
                                              (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                              ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                            :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                               ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)))
                                (GHC.ForeignPtr.PlainPtr ipv1_acHe)
                                0
                                0
                                32752))
                          `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                  :: IO LBS.ByteString
                                     ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))))
                           ipv_acHd
                         }
                         }
                         })
                      `cast` (Sym
                                (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R)
                              :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                  -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                        LBS.ByteString #))
                                 ~R# IO LBS.ByteString))))
               sc2_sead
        of _ { (# ipv_acJo, ipv1_acJp #) ->
        Main.main_$s$wa2
          sc_seab (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_seac 1) ipv_acJo
        };
      True -> (# sc2_sead, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Main.$wa6 :: Tree Int -> (# String, [Benchmark] #)
Main.$wa6 =
  \ (w_sdLK :: Tree Int) ->
    (# Main.main12,
       ghc-prim-0.4.0.0:GHC.Types.:
         @ Benchmark
         (Criterion.Types.Benchmark
            Main.main7
            ((\ (w1_sdLu :: GHC.Int.Int64)
                (w2_sdLv
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case w1_sdLu of _ { GHC.Int.I64# ww1_sdLy ->
                Main.main_$s$wa3 w_sdLK ww1_sdLy w2_sdLv
                })
             `cast` ((<GHC.Int.Int64>_R
                      -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                     ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                     :: (GHC.Int.Int64
                         -> ghc-prim-0.4.0.0:GHC.Prim.State#
                              ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                               () #))
                        ~R# Benchmarkable)))
         (ghc-prim-0.4.0.0:GHC.Types.:
            @ Benchmark
            (Criterion.Types.Benchmark
               Main.main6
               ((\ (w1_sdLD :: GHC.Int.Int64)
                   (w2_sdLE
                      :: ghc-prim-0.4.0.0:GHC.Prim.State#
                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                   case w1_sdLD of _ { GHC.Int.I64# ww1_sdLH ->
                   Main.main_$s$wa2 w_sdLK ww1_sdLH w2_sdLE
                   })
                `cast` ((<GHC.Int.Int64>_R
                         -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                        ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                        :: (GHC.Int.Int64
                            -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                  () #))
                           ~R# Benchmarkable)))
            (ghc-prim-0.4.0.0:GHC.Types.[] @ Benchmark)) #)

Main.main11 :: Tree Int -> Benchmark
Main.main11 =
  \ (w_sdLK :: Tree Int) ->
    case Main.$wa6 w_sdLK of _ { (# ww1_sdMA, ww2_sdMB #) ->
    Criterion.Types.BenchGroup ww1_sdMA ww2_sdMB
    }

Main.main10 :: Benchmark
Main.main10 =
  Criterion.Types.Environment
    @ (Tree Int)
    (Main.$sforce5
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Tree Int>_N)
             :: (Tree Int -> ()) ~R# NFData (Tree Int)))
    (Main.main13
     `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree Int>_R)
             :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                 -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                       Tree Int #))
                ~R# IO (Tree Int)))
    Main.main11

Main.main9
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree1 Int #)
Main.main9 =
  \ (w_sdIW
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    Main.$wa4 20 w_sdIW

Rec {
Main.main_$s$wa1
  :: Tree1 Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
Main.main_$s$wa1 =
  \ (sc_sea4 :: Tree1 Int)
    (sc1_sea5 :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_sea6
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_sea5 0)
    of _ {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ (Tree1 Int)
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (case Main.$fNFDataTree1_$crnf
                       @ Int
                       (Control.DeepSeq.$fNFDataInt_$crnf
                        `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
                                :: (Int -> ()) ~R# NFData Int))
                       sc_sea4
                of _ { () ->
                sc_sea4
                })
               sc2_sea6
        of _ { (# ipv_acJo, ipv1_acJp #) ->
        Main.main_$s$wa1
          sc_sea4 (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_sea5 1) ipv_acJo
        };
      True -> (# sc2_sea6, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Rec {
Main.main_$s$wa
  :: Tree1 Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
Main.main_$s$wa =
  \ (sc_se9X :: Tree1 Int)
    (sc1_se9Y :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_se9Z
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_se9Y 0)
    of _ {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ Data.ByteString.Internal.ByteString
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (LBS.toStrict
                  (GHC.IO.unsafeDupablePerformIO
                     @ LBS.ByteString
                     ((\ (s_acBH
                            :: ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                         case ghc-prim-0.4.0.0:GHC.Prim.noDuplicate# s_acBH
                         of s'_acBI { __DEFAULT ->
                         case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                                @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 s'_acBI
                         of _ { (# ipv_acHd, ipv1_acHe #) ->
                         case Main.$w$s$cput sc_se9X of _ { (# ww1_sdMw, ww2_sdMx #) ->
                         (((ww2_sdMx
                            `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                                    :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                       ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                             -> IO LBS.ByteString)
                                            -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                            -> IO LBS.ByteString)))
                             (lvl18_resy
                              `cast` (<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                                      -> Sym
                                           (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0]
                                              <LBS.ByteString>_R)
                                      :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                          -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))
                                         ~R# (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                              -> IO LBS.ByteString)))
                             (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                (ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                                   (ipv1_acHe
                                    `cast` (UnivCo mkUnsafeCo representational
                                              (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                              ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                            :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                               ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)))
                                (GHC.ForeignPtr.PlainPtr ipv1_acHe)
                                0
                                0
                                32752))
                          `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                  :: IO LBS.ByteString
                                     ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))))
                           ipv_acHd
                         }
                         }
                         })
                      `cast` (Sym
                                (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R)
                              :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                  -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                        LBS.ByteString #))
                                 ~R# IO LBS.ByteString))))
               sc2_se9Z
        of _ { (# ipv_acJo, ipv1_acJp #) ->
        Main.main_$s$wa
          sc_se9X (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_se9Y 1) ipv_acJo
        };
      True -> (# sc2_se9Z, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Main.$wa5 :: Tree1 Int -> (# String, [Benchmark] #)
Main.$wa5 =
  \ (w_sdM6 :: Tree1 Int) ->
    (# Main.main8,
       ghc-prim-0.4.0.0:GHC.Types.:
         @ Benchmark
         (Criterion.Types.Benchmark
            Main.main7
            ((\ (w1_sdLQ :: GHC.Int.Int64)
                (w2_sdLR
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case w1_sdLQ of _ { GHC.Int.I64# ww1_sdLU ->
                Main.main_$s$wa1 w_sdM6 ww1_sdLU w2_sdLR
                })
             `cast` ((<GHC.Int.Int64>_R
                      -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                     ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                     :: (GHC.Int.Int64
                         -> ghc-prim-0.4.0.0:GHC.Prim.State#
                              ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                               () #))
                        ~R# Benchmarkable)))
         (ghc-prim-0.4.0.0:GHC.Types.:
            @ Benchmark
            (Criterion.Types.Benchmark
               Main.main6
               ((\ (w1_sdLZ :: GHC.Int.Int64)
                   (w2_sdM0
                      :: ghc-prim-0.4.0.0:GHC.Prim.State#
                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                   case w1_sdLZ of _ { GHC.Int.I64# ww1_sdM3 ->
                   Main.main_$s$wa w_sdM6 ww1_sdM3 w2_sdM0
                   })
                `cast` ((<GHC.Int.Int64>_R
                         -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                        ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                        :: (GHC.Int.Int64
                            -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                  () #))
                           ~R# Benchmarkable)))
            (ghc-prim-0.4.0.0:GHC.Types.[] @ Benchmark)) #)

Main.main5 :: Tree1 Int -> Benchmark
Main.main5 =
  \ (w_sdM6 :: Tree1 Int) ->
    case Main.$wa5 w_sdM6 of _ { (# ww1_sdME, ww2_sdMF #) ->
    Criterion.Types.BenchGroup ww1_sdME ww2_sdMF
    }

Main.main4 :: Benchmark
Main.main4 =
  Criterion.Types.Environment
    @ (Tree1 Int)
    (Main.$sforce2
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Tree1 Int>_N)
             :: (Tree1 Int -> ()) ~R# NFData (Tree1 Int)))
    (Main.main9
     `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree1 Int>_R)
             :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                 -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                       Tree1 Int #))
                ~R# IO (Tree1 Int)))
    Main.main5

Main.main3 :: [Benchmark]
Main.main3 =
  ghc-prim-0.4.0.0:GHC.Types.:
    @ Benchmark Main.main4 (ghc-prim-0.4.0.0:GHC.Types.[] @ Benchmark)

Main.main2 :: [Benchmark]
Main.main2 =
  ghc-prim-0.4.0.0:GHC.Types.: @ Benchmark Main.main10 Main.main3

Main.main1
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
Main.main1 = Criterion.Main.defaultMain2 defaultConfig Main.main2

main :: IO ()
main =
  Main.main1
  `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
          :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    () #))
             ~R# IO ())

Main.main14
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
Main.main14 =
  GHC.TopHandler.runMainIO1
    @ ()
    (Main.main1
     `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
             :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                 -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                       () #))
                ~R# IO ()))

Rec {
Main.$w$cput
  :: forall a_abct.
     Binary a_abct =>
     Tree1 a_abct
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
Main.$w$cput =
  \ (@ a17_abct)
    (w_sdMa :: Binary a17_abct)
    (w1_sdMb :: Tree1 a17_abct) ->
    case w1_sdMb of _ {
      Leaf1 a18_a4rn ->
        let {
          a19_scLS :: Put
          a19_scLS = put @ a17_abct w_sdMa a18_a4rn } in
        (# case a19_scLS
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ { Data.Binary.Put.PairS b1_acoC w'_acoD ->
           b1_acoC
           },
           (\ (x_ac8X
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac6r
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                eta_ac6r =
                  case a19_scLS
                       `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                               :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                  of _ { Data.Binary.Put.PairS b1_acoM w'_acoN ->
                  (w'_acoN
                   `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                           :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                              ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                    -> IO LBS.ByteString)
                                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                   -> IO LBS.ByteString)))
                    x_ac8X
                  } } in
              let {
                lvl20_se1c :: LBS.ByteString
                lvl20_se1c =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ { (# ipv1_acIF, ipv2_acIG #) ->
                  let {
                    a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    a20_acIE =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acIG
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acIE
                         0
                         (__word 0)
                         ipv1_acIF
                  of s2_acJJ { __DEFAULT ->
                  let {
                    a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                    a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                  of s'_acIO { __DEFAULT ->
                  case ((eta_ac6r
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acIE a21_acII 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acIO
                  of _ { (# ipv3_acIX, ipv4_acIY #) ->
                  ipv4_acIY
                  }
                  }
                  }
                  } } in
              \ (eta1_ac6s :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac6t
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac6s
                of _
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acIe dt1_acIf
                                                                 dt2_acIg dt3_acIh dt4_acIi ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acIi)
                of _ {
                  False ->
                    case dt3_acIh of wild3_acIU {
                      __DEFAULT ->
                        (# eta2_ac6t,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acIe dt1_acIf dt2_acIg wild3_acIU lvl20_se1c #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac6t
                        of _ { (# ipv1_acIF, ipv2_acIG #) ->
                        let {
                          a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          a20_acIE =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acIG
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acIE
                               0
                               (__word 0)
                               ipv1_acIF
                        of s2_acJJ { __DEFAULT ->
                        let {
                          a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                          a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                        of s'_acIO { __DEFAULT ->
                        ((eta_ac6r
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acIE a21_acII 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acIO
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acIe (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acIg dt3_acIh))
                           0
                           (__word 0)
                           eta2_ac6t
                    of s2_acJJ { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acIf s2_acJJ
                    of s'_acJ7 { __DEFAULT ->
                    ((eta_ac6r
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acIe
                           dt1_acIf
                           dt2_acIg
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acIh 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acIi 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acJ7
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #);
      Branch1 t1_a4sJ t2_a4sK ->
        let {
          a18_scLV :: Put
          a18_scLV =
            case Main.$w$cput @ a17_abct w_sdMa t2_a4sK
            of _ { (# ww1_sdMI, ww2_sdMJ #) ->
            (Data.Binary.Put.PairS @ () ww1_sdMI ww2_sdMJ)
            `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
            } } in
        (# case a18_scLV
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ { Data.Binary.Put.PairS b1_acoC w'_acoD ->
           b1_acoC
           },
           let {
             g_ac8W
               :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                  -> IO LBS.ByteString
             g_ac8W =
               case Main.$w$cput @ a17_abct w_sdMa t1_a4sJ
               of _ { (# ww1_sdMI, ww2_sdMJ #) ->
               ww2_sdMJ
               `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                       :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                          ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString)
                               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString))
               } } in
           (\ (x_Xcfj
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac6r
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                eta_ac6r =
                  g_ac8W
                    (case a18_scLV
                          `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                                  :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                     of _ { Data.Binary.Put.PairS b1_acoM w'_acoN ->
                     (w'_acoN
                      `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                              :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                 ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                       -> IO LBS.ByteString)
                                      -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                      -> IO LBS.ByteString)))
                       x_Xcfj
                     }) } in
              let {
                lvl20_se1d :: LBS.ByteString
                lvl20_se1d =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ { (# ipv1_acIF, ipv2_acIG #) ->
                  let {
                    a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    a20_acIE =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acIG
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acIE
                         0
                         (__word 1)
                         ipv1_acIF
                  of s2_acJJ { __DEFAULT ->
                  let {
                    a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                    a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                  of s'_acIO { __DEFAULT ->
                  case ((eta_ac6r
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acIE a21_acII 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acIO
                  of _ { (# ipv3_acIX, ipv4_acIY #) ->
                  ipv4_acIY
                  }
                  }
                  }
                  } } in
              \ (eta1_ac6s :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac6t
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac6s
                of _
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acIe dt1_acIf
                                                                 dt2_acIg dt3_acIh dt4_acIi ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acIi)
                of _ {
                  False ->
                    case dt3_acIh of wild3_acIU {
                      __DEFAULT ->
                        (# eta2_ac6t,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acIe dt1_acIf dt2_acIg wild3_acIU lvl20_se1d #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac6t
                        of _ { (# ipv1_acIF, ipv2_acIG #) ->
                        let {
                          a20_acIE :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          a20_acIE =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acIG
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acIE
                               0
                               (__word 1)
                               ipv1_acIF
                        of s2_acJJ { __DEFAULT ->
                        let {
                          a21_acII :: GHC.ForeignPtr.ForeignPtrContents
                          a21_acII = GHC.ForeignPtr.PlainPtr ipv2_acIG } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acII s2_acJJ
                        of s'_acIO { __DEFAULT ->
                        ((eta_ac6r
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acIE a21_acII 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acIO
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acIe (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acIg dt3_acIh))
                           0
                           (__word 1)
                           eta2_ac6t
                    of s2_acJJ { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acIf s2_acJJ
                    of s'_acJ7 { __DEFAULT ->
                    ((eta_ac6r
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acIe
                           dt1_acIf
                           dt2_acIg
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acIh 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acIi 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acJ7
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }
end Rec }

Main.$fBinaryTree1_$cput
  :: forall a_abct. Binary a_abct => Tree1 a_abct -> Put
Main.$fBinaryTree1_$cput =
  \ (@ a17_abct)
    (w_sdMa :: Binary a17_abct)
    (w1_sdMb :: Tree1 a17_abct) ->
    case Main.$w$cput @ a17_abct w_sdMa w1_sdMb
    of _ { (# ww1_sdMI, ww2_sdMJ #) ->
    (Data.Binary.Put.PairS @ () ww1_sdMI ww2_sdMJ)
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

Main.$fBinaryTree1
  :: forall a_a4vF. Binary a_a4vF => Binary (Tree1 a_a4vF)
Main.$fBinaryTree1 =
  \ (@ a17_Xbi6) ($dBinary_Xbi8 :: Binary a17_Xbi6) ->
    binary-0.7.3.0:Data.Binary.Class.D:Binary
      @ (Tree1 a17_Xbi6)
      (Main.$fBinaryTree1_$cput @ a17_Xbi6 $dBinary_Xbi8)
      ((Main.$fBinaryTree4 @ a17_Xbi6 $dBinary_Xbi8)
       `cast` (Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0] <Tree1 a17_Xbi6>_R)
               :: (forall r_acnR.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success (Tree1 a17_Xbi6) r_acnR
                   -> Data.Binary.Get.Internal.Decoder r_acnR)
                  ~R# Get (Tree1 a17_Xbi6)))

:Main.main :: IO ()
:Main.main =
  Main.main14
  `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
          :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    () #))
             ~R# IO ())


------ Local rules for imported ids --------
"SPEC $fBinaryTree @ Int" [ALWAYS]
    forall ($dBinary_scyv :: Binary Int).
      Main.$fBinaryTree @ Int $dBinary_scyv
      = Main.$fBinaryTree_$s$fBinaryTree
"SPEC $cget @ Int" [ALWAYS]
    forall ($dBinary_scyL :: Binary Int).
      Main.$fBinaryTree_$cget @ Int $dBinary_scyL
      = Main.$fBinaryTree_$s$cget
"SPEC $cput @ Int" [ALWAYS]
    forall ($dBinary_scyx :: Binary Int).
      Main.$fBinaryTree_$cput @ Int $dBinary_scyx
      = Main.$fBinaryTree_$s$cput
"SPEC/Main $fGSumM1 _ @ (M1 S NoSelector (Rec0 Int))" [ALWAYS]
    forall (@ c_abYK)
           ($dGBinary_scDz :: GBinary (M1 S NoSelector (Rec0 Int))).
      binary-0.7.3.0:Data.Binary.Generic.$fGSumM1 @ c_abYK
                                                  @ (M1 S NoSelector (Rec0 Int))
                                                  $dGBinary_scDz
      = Main.$s$fGBinary:+:_$s$fGSumM2 @ c_abYK
"SPEC/Main $fGSumM1 _ @ (S1 NoSelector (Rec0 (Tree Int))
                        :*: S1 NoSelector (Rec0 (Tree Int)))" [ALWAYS]
    forall (@ c_abYK)
           ($dGBinary_scDB
              :: GBinary
                   (S1 NoSelector (Rec0 (Tree Int))
                    :*: S1 NoSelector (Rec0 (Tree Int)))).
      binary-0.7.3.0:Data.Binary.Generic.$fGSumM1 @ c_abYK
                                                  @ (S1 NoSelector (Rec0 (Tree Int))
                                                     :*: S1 NoSelector (Rec0 (Tree Int)))
                                                  $dGBinary_scDB
      = Main.$s$fGBinary:+:_$s$fGSumM1 @ c_abYK
"SPEC/Main $fGBinaryM1 _ _ @ (K1 R Int)" [ALWAYS]
    forall (@ i_abXX)
           (@ c_abXY)
           ($dGBinary_scAd :: GBinary (K1 R Int)).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1 @ i_abXX
                                                     @ c_abXY
                                                     @ (K1 R Int)
                                                     $dGBinary_scAd
      = Main.$s$fGBinary:+:_$s$fGBinaryM3 @ i_abXX @ c_abXY
"SPEC/Main $fGBinaryM1 _ _ @ (K1 R (Tree Int))" [ALWAYS]
    forall (@ i_abXX)
           (@ c_abXY)
           ($dGBinary_scAf :: GBinary (K1 R (Tree Int))).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1 @ i_abXX
                                                     @ c_abXY
                                                     @ (K1 R (Tree Int))
                                                     $dGBinary_scAf
      = Main.$s$fGBinary:*:_$s$fGBinaryM1 @ i_abXX @ c_abXY
"SPEC/Main $fGBinaryK1 _ @ Int" [ALWAYS]
    forall (@ i_abY4) ($dBinary_scDo :: Binary Int).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1 @ i_abY4
                                                     @ Int
                                                     $dBinary_scDo
      = Main.$s$fGBinary:+:_$s$fGBinaryK1 @ i_abY4
"SPEC/Main $fGBinaryK1 _ @ (Tree Int)" [ALWAYS]
    forall (@ i_abY4) ($dBinary_scDq :: Binary (Tree Int)).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1 @ i_abY4
                                                     @ (Tree Int)
                                                     $dBinary_scDq
      = Main.$s$fGBinary:*:_$s$fGBinaryK1 @ i_abY4
"SPEC/Main $fGBinary:*: @ (M1 S NoSelector (Rec0 (Tree Int))) @ (M1
                                                                  S NoSelector (Rec0 (Tree Int)))" [ALWAYS]
    forall ($dGBinary_scDl
              :: GBinary (M1 S NoSelector (Rec0 (Tree Int))))
           ($dGBinary1_scDm :: GBinary (M1 S NoSelector (Rec0 (Tree Int)))).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*: @ (M1
                                                           S NoSelector (Rec0 (Tree Int)))
                                                      @ (M1 S NoSelector (Rec0 (Tree Int)))
                                                      $dGBinary_scDl
                                                      $dGBinary1_scDm
      = Main.$s$fGBinary:*:
"SPEC/Main $dmisNewtype @ D1Tree" [ALWAYS]
    forall ($dDatatype_scDj :: Datatype Main.D1Tree).
      GHC.Generics.$dmisNewtype @ Main.D1Tree $dDatatype_scDj
      = Main.$fDatatypeTree_$s$dmisNewtype
"SPEC/Main $dmconIsRecord @ C1_1Tree" [ALWAYS]
    forall ($dConstructor_scDf :: Constructor Main.C1_1Tree).
      GHC.Generics.$dmconIsRecord @ Main.C1_1Tree $dConstructor_scDf
      = Main.$fConstructorTree0_$s$dmconIsRecord
"SPEC/Main $dmconIsRecord @ C1_0Tree" [ALWAYS]
    forall ($dConstructor_scDh :: Constructor Main.C1_0Tree).
      GHC.Generics.$dmconIsRecord @ Main.C1_0Tree $dConstructor_scDh
      = Main.$fConstructorTree_$s$dmconIsRecord
"SPEC/Main $dmconFixity @ C1_1Tree" [ALWAYS]
    forall ($dConstructor_scDb :: Constructor Main.C1_1Tree).
      GHC.Generics.$dmconFixity @ Main.C1_1Tree $dConstructor_scDb
      = Main.$fConstructorTree0_$s$dmconFixity
"SPEC/Main $dmconFixity @ C1_0Tree" [ALWAYS]
    forall ($dConstructor_scDd :: Constructor Main.C1_0Tree).
      GHC.Generics.$dmconFixity @ Main.C1_0Tree $dConstructor_scDd
      = Main.$fConstructorTree_$s$dmconFixity

