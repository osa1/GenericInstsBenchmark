
==================== Tidy Core ====================
2015-08-22 21:52:29.538044 UTC

Result size of Tidy Core
  = {terms: 2,438, types: 3,708, coercions: 1,212}

a1_rerR
  :: forall c_XbXx word_acJj a1_acJk.
     (Ord word_acJj, Num word_acJj, Data.Bits.Bits word_acJj) =>
     word_acJj
     -> word_acJj
     -> forall r_acJq.
        Data.ByteString.Internal.ByteString
        -> Data.Binary.Get.Internal.Success
             (M1 C c_XbXx (M1 S NoSelector (Rec0 Int)) a1_acJk) r_acJq
        -> Data.Binary.Get.Internal.Decoder r_acJq
[GblId,
 Arity=7,
 Str=DmdType <L,A><L,A><L,A><L,A><L,A><S,1*U(U,U,U,U)><L,C(C1(U))>]
a1_rerR =
  \ (@ c_XbXx)
    (@ word_XcPA)
    (@ a17_XcPC)
    _ [Occ=Dead]
    _ [Occ=Dead]
    _ [Occ=Dead]
    _ [Occ=Dead]
    _ [Occ=Dead]
    (@ r_XcPO)
    (eta_XcPQ :: Data.ByteString.Internal.ByteString)
    (eta1_XcPS
       :: Data.Binary.Get.Internal.Success
            (M1 C c_XbXx (M1 S NoSelector (Rec0 Int)) a17_XcPC) r_XcPO) ->
    case eta_XcPQ
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_acFN ww2_acFO ww3_acFP
                                  ww4_acFQ ->
    binary-0.7.3.0:Data.Binary.Class.$wa3
      @ r_XcPO
      ww1_acFN
      ww2_acFO
      ww3_acFP
      ww4_acFQ
      (\ (i'_adns :: Data.ByteString.Internal.ByteString)
         (a18_adnt [OS=OneShot] :: Word64) ->
         eta1_XcPS
           i'_adns
           (case a18_adnt of _ [Occ=Dead] { GHC.Word.W64# x#_adnw ->
            (ghc-prim-0.4.0.0:GHC.Types.I#
               (ghc-prim-0.4.0.0:GHC.Prim.word2Int# x#_adnw))
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <a17_XcPC>_P)
                    ; Sym (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R Int>_R)
                      ; Sym
                          (GHC.Generics.NTCo:M1[0]
                             <C>_P <c_XbXx>_P <M1 S NoSelector (Rec0 Int)>_R) <a17_XcPC>_N
                    :: Int ~R# M1 C c_XbXx (M1 S NoSelector (Rec0 Int)) a17_XcPC)
            }))
    }

$wa8_rerS
  :: forall i_XbWL c_XbWN t_acJ8 r_acJ9.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success
          (M1 i_XbWL c_XbWN (K1 R Int) t_acJ8) r_acJ9
     -> Data.Binary.Get.Internal.Decoder r_acJ9
[GblId, Arity=5, Str=DmdType <L,U><L,U><L,U><L,U><L,C(C1(U))>]
$wa8_rerS =
  \ (@ i_XbWL)
    (@ c_XbWN)
    (@ t_acJ8)
    (@ r_acJ9)
    (ww_sdGw :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdGx :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdGy :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdGz :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdGt
       :: Data.Binary.Get.Internal.Success
            (M1 i_XbWL c_XbWN (K1 R Int) t_acJ8) r_acJ9) ->
    binary-0.7.3.0:Data.Binary.Class.$wa3
      @ r_acJ9
      ww_sdGw
      ww1_sdGx
      ww2_sdGy
      ww3_sdGz
      (\ (i'_adns :: Data.ByteString.Internal.ByteString)
         (a17_adnt [OS=OneShot] :: Word64) ->
         w_sdGt
           i'_adns
           (case a17_adnt of _ [Occ=Dead] { GHC.Word.W64# x#_adnw ->
            (ghc-prim-0.4.0.0:GHC.Types.I#
               (ghc-prim-0.4.0.0:GHC.Prim.word2Int# x#_adnw))
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <t_acJ8>_P)
                    ; Sym
                        (GHC.Generics.NTCo:M1[0]
                           <i_XbWL>_P <c_XbWN>_P <K1 R Int>_R) <t_acJ8>_N
                    :: Int ~R# M1 i_XbWL c_XbWN (K1 R Int) t_acJ8)
            }))

a2_rerT
  :: forall i_XbWL c_XbWN t_acJ8 r_acJ9.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          (M1 i_XbWL c_XbWN (K1 R Int) t_acJ8) r_acJ9
     -> Data.Binary.Get.Internal.Decoder r_acJ9
[GblId, Arity=2, Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>]
a2_rerT =
  \ (@ i_XbWL)
    (@ c_XbWN)
    (@ t_acJ8)
    (@ r_acJ9)
    (w_sdGs :: Data.ByteString.Internal.ByteString)
    (w1_sdGt
       :: Data.Binary.Get.Internal.Success
            (M1 i_XbWL c_XbWN (K1 R Int) t_acJ8) r_acJ9) ->
    case w_sdGs
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdGw ww2_sdGx ww3_sdGy
                                  ww4_sdGz ->
    $wa8_rerS
      @ i_XbWL
      @ c_XbWN
      @ t_acJ8
      @ r_acJ9
      ww1_sdGw
      ww2_sdGx
      ww3_sdGy
      ww4_sdGz
      w1_sdGt
    }

$wa9_rerU
  :: forall i_XbWR t_acFy r_acFz.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success (K1 i_XbWR Int t_acFy) r_acFz
     -> Data.Binary.Get.Internal.Decoder r_acFz
[GblId, Arity=5, Str=DmdType <L,U><L,U><L,U><L,U><L,C(C1(U))>]
$wa9_rerU =
  \ (@ i_XbWR)
    (@ t_acFy)
    (@ r_acFz)
    (ww_sdGG :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdGH :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdGI :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdGJ :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdGD
       :: Data.Binary.Get.Internal.Success
            (K1 i_XbWR Int t_acFy) r_acFz) ->
    binary-0.7.3.0:Data.Binary.Class.$wa3
      @ r_acFz
      ww_sdGG
      ww1_sdGH
      ww2_sdGI
      ww3_sdGJ
      (\ (i'_adns :: Data.ByteString.Internal.ByteString)
         (a17_adnt [OS=OneShot] :: Word64) ->
         w_sdGD
           i'_adns
           (case a17_adnt of _ [Occ=Dead] { GHC.Word.W64# x#_adnw ->
            (ghc-prim-0.4.0.0:GHC.Types.I#
               (ghc-prim-0.4.0.0:GHC.Prim.word2Int# x#_adnw))
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <i_XbWR>_P <Int>_R <t_acFy>_P)
                    :: Int ~R# K1 i_XbWR Int t_acFy)
            }))

a3_rerV
  :: forall i_XbWR t_acFy r_acFz.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success (K1 i_XbWR Int t_acFy) r_acFz
     -> Data.Binary.Get.Internal.Decoder r_acFz
[GblId, Arity=2, Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>]
a3_rerV =
  \ (@ i_XbWR)
    (@ t_acFy)
    (@ r_acFz)
    (w_sdGC :: Data.ByteString.Internal.ByteString)
    (w1_sdGD
       :: Data.Binary.Get.Internal.Success
            (K1 i_XbWR Int t_acFy) r_acFz) ->
    case w_sdGC
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdGG ww2_sdGH ww3_sdGI
                                  ww4_sdGJ ->
    $wa9_rerU
      @ i_XbWR
      @ t_acFy
      @ r_acFz
      ww1_sdGG
      ww2_sdGH
      ww3_sdGI
      ww4_sdGJ
      w1_sdGD
    }

Main.main6 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
Main.main6 = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Binary"#

Main.main7 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
Main.main7 = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "NFData"#

Main.main8 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 60 0}]
Main.main8 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Hand-written"#

Main.main12 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
Main.main12 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Generic"#

Main.$fShowTree2 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
Main.$fShowTree2 = ghc-prim-0.4.0.0:GHC.Types.I# 0

lvl_rerW :: [Char]
[GblId, Str=DmdType]
lvl_rerW = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Branch "#

lvl1_rerX :: Int
[GblId, Caf=NoCafRefs, Str=DmdType m]
lvl1_rerX = ghc-prim-0.4.0.0:GHC.Types.I# 11

lvl2_rerY :: [Char]
[GblId, Str=DmdType]
lvl2_rerY = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Leaf "#

lvl3_rerZ :: [Char]
[GblId, Str=DmdType]
lvl3_rerZ = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Branch1 "#

lvl4_res0 :: [Char]
[GblId, Str=DmdType]
lvl4_res0 = ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Leaf1 "#

Main.$s$fGBinary:+:4
  :: forall i_XbWR t_ac3B. K1 i_XbWR Int t_ac3B -> Put
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <L,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ i_XbWR)
                 (@ t_acA0)
                 (eta_acA1 [Occ=Once] :: K1 i_XbWR Int t_acA0) ->
                 binary-0.7.3.0:Data.Binary.Class.$fBinaryInt_$cput
                   (eta_acA1
                    `cast` (GHC.Generics.NTCo:K1[0] <i_XbWR>_P <Int>_R <t_acA0>_P
                            :: K1 i_XbWR Int t_acA0 ~R# Int))}]
Main.$s$fGBinary:+:4 =
  \ (@ i_XbWR) (@ t_acA0) (eta_acA1 :: K1 i_XbWR Int t_acA0) ->
    binary-0.7.3.0:Data.Binary.Class.$fBinaryInt_$cput
      (eta_acA1
       `cast` (GHC.Generics.NTCo:K1[0] <i_XbWR>_P <Int>_R <t_acA0>_P
               :: K1 i_XbWR Int t_acA0 ~R# Int))

lvl6_res2
  :: forall i_XbWL c_XbWN t_ac8d.
     M1 i_XbWL c_XbWN (K1 R Int) t_ac8d -> Put
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType <L,1*U(U)>m]
lvl6_res2 =
  \ (@ i_XbWL)
    (@ c_XbWN)
    (@ t_aczA)
    (eta_aczB :: M1 i_XbWL c_XbWN (K1 R Int) t_aczA) ->
    binary-0.7.3.0:Data.Binary.Class.$fBinaryInt_$cput
      (eta_aczB
       `cast` (GHC.Generics.NTCo:M1[0]
                 <i_XbWL>_P <c_XbWN>_P <K1 R Int>_R <t_aczA>_N
               ; GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <t_aczA>_P
               :: M1 i_XbWL c_XbWN (K1 R Int) t_aczA ~R# Int))

lvl7_res3 :: [Char]
[GblId, Str=DmdType]
lvl7_res3 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString#
    "get for Tree1: encoding or decoding error"#

Main.$fConstructorTree2 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 50 0}]
Main.$fConstructorTree2 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Branch"#

Main.$fConstructorTree1 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
Main.$fConstructorTree1 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Leaf"#

Main.$fDatatypeTree1 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
Main.$fDatatypeTree1 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Main"#

Main.$fDatatypeTree2 :: [Char]
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
Main.$fDatatypeTree2 =
  ghc-prim-0.4.0.0:GHC.CString.unpackCString# "Tree"#

Main.$fConstructorTree0_$s$dmconFixity
  :: forall (t_abaB :: * -> (* -> *) -> * -> *)
            (f_abaC :: * -> *)
            a_abaD.
     t_abaB Main.C1_1Tree f_abaC a_abaD -> Fixity
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=-1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_ac3j :: * -> (* -> *) -> * -> *))
                 (@ (f_ac3k :: * -> *))
                 (@ a17_ac3l)
                 _ [Occ=Dead] ->
                 GHC.Generics.Prefix}]
Main.$fConstructorTree0_$s$dmconFixity =
  \ (@ (t_ac3j :: * -> (* -> *) -> * -> *))
    (@ (f_ac3k :: * -> *))
    (@ a17_ac3l)
    _ [Occ=Dead] ->
    GHC.Generics.Prefix

Main.$fConstructorTree_$s$dmconFixity
  :: forall (t_abaB :: * -> (* -> *) -> * -> *)
            (f_abaC :: * -> *)
            a_abaD.
     t_abaB Main.C1_0Tree f_abaC a_abaD -> Fixity
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=-1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_ac3j :: * -> (* -> *) -> * -> *))
                 (@ (f_ac3k :: * -> *))
                 (@ a17_ac3l)
                 _ [Occ=Dead] ->
                 GHC.Generics.Prefix}]
Main.$fConstructorTree_$s$dmconFixity =
  \ (@ (t_ac3j :: * -> (* -> *) -> * -> *))
    (@ (f_ac3k :: * -> *))
    (@ a17_ac3l)
    _ [Occ=Dead] ->
    GHC.Generics.Prefix

Main.$fConstructorTree0_$s$dmconIsRecord
  :: forall (t_abaP :: * -> (* -> *) -> * -> *)
            (f_abaQ :: * -> *)
            a_abaR.
     t_abaP Main.C1_1Tree f_abaQ a_abaR -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=-1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_ac3d :: * -> (* -> *) -> * -> *))
                 (@ (f_ac3e :: * -> *))
                 (@ a17_ac3f)
                 _ [Occ=Dead] ->
                 ghc-prim-0.4.0.0:GHC.Types.False}]
Main.$fConstructorTree0_$s$dmconIsRecord =
  \ (@ (t_ac3d :: * -> (* -> *) -> * -> *))
    (@ (f_ac3e :: * -> *))
    (@ a17_ac3f)
    _ [Occ=Dead] ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree_$s$dmconIsRecord
  :: forall (t_abaP :: * -> (* -> *) -> * -> *)
            (f_abaQ :: * -> *)
            a_abaR.
     t_abaP Main.C1_0Tree f_abaQ a_abaR -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=-1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_ac3d :: * -> (* -> *) -> * -> *))
                 (@ (f_ac3e :: * -> *))
                 (@ a17_ac3f)
                 _ [Occ=Dead] ->
                 ghc-prim-0.4.0.0:GHC.Types.False}]
Main.$fConstructorTree_$s$dmconIsRecord =
  \ (@ (t_ac3d :: * -> (* -> *) -> * -> *))
    (@ (f_ac3e :: * -> *))
    (@ a17_ac3f)
    _ [Occ=Dead] ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fDatatypeTree_$s$dmisNewtype
  :: forall (t_abad :: * -> (* -> *) -> * -> *)
            (f_abae :: * -> *)
            a_abaf.
     t_abad Main.D1Tree f_abae a_abaf -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=-1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_ac3p :: * -> (* -> *) -> * -> *))
                 (@ (f_ac3q :: * -> *))
                 (@ a17_ac3r)
                 _ [Occ=Dead] ->
                 ghc-prim-0.4.0.0:GHC.Types.False}]
Main.$fDatatypeTree_$s$dmisNewtype =
  \ (@ (t_ac3p :: * -> (* -> *) -> * -> *))
    (@ (f_ac3q :: * -> *))
    (@ a17_ac3r)
    _ [Occ=Dead] ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$s$fGBinary:+:_$s$fGBinaryK1 [InlPrag=[ALWAYS] CONLIKE]
  :: forall i_abWP. GBinary (K1 i_abWP Int)
[GblId,
 Str=DmdType m,
 Unf=DFun: \ (@ i_abWP) ->
       binary-0.7.3.0:Data.Binary.Class.D:GBinary TYPE K1 i_abWP Int
                                                  Main.$s$fGBinary:+:4 @ i_abWP
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1_$cgget
                                                    @ i_abWP
                                                    @ Int
                                                    binary-0.7.3.0:Data.Binary.Class.$fBinaryInt]
Main.$s$fGBinary:+:_$s$fGBinaryK1 =
  \ (@ i_XbWR) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (K1 i_XbWR Int)
      (Main.$s$fGBinary:+:4 @ i_XbWR)
      ((a3_rerV @ i_XbWR)
       `cast` (forall t_aczW.
               Sym (Data.Binary.Get.Internal.NTCo:Get[0] <K1 i_XbWR Int t_aczW>_R)
               :: (forall t_aczW r_acmC.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success (K1 i_XbWR Int t_aczW) r_acmC
                   -> Data.Binary.Get.Internal.Decoder r_acmC)
                  ~R# (forall t_aczW. Get (K1 i_XbWR Int t_aczW))))

Main.$s$fGBinary:+:3 :: GBinary (K1 R Int)
[GblId,
 Str=DmdType m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$s$fGBinary:+:_$s$fGBinaryK1 @ R}]
Main.$s$fGBinary:+:3 = Main.$s$fGBinary:+:_$s$fGBinaryK1 @ R

Main.$s$fGBinary:+:_$s$fGBinaryM3 [InlPrag=[ALWAYS] CONLIKE]
  :: forall i_abWI c_abWJ. GBinary (M1 i_abWI c_abWJ (K1 R Int))
[GblId,
 Str=DmdType m,
 Unf=DFun: \ (@ i_abWI) (@ c_abWJ) ->
       binary-0.7.3.0:Data.Binary.Class.D:GBinary TYPE M1
                                                         i_abWI c_abWJ (K1 R Int)
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1_$cgput
                                                    @ i_abWI
                                                    @ c_abWJ
                                                    @ (K1 R Int)
                                                    Main.$s$fGBinary:+:3
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1_$cgget
                                                    @ i_abWI
                                                    @ c_abWJ
                                                    @ (K1 R Int)
                                                    Main.$s$fGBinary:+:3]
Main.$s$fGBinary:+:_$s$fGBinaryM3 =
  \ (@ i_XbWL) (@ c_XbWN) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (M1 i_XbWL c_XbWN (K1 R Int))
      (lvl6_res2 @ i_XbWL @ c_XbWN)
      ((a2_rerT @ i_XbWL @ c_XbWN)
       `cast` (forall t_aczv.
               Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0]
                    <M1 i_XbWL c_XbWN (K1 R Int) t_aczv>_R)
               :: (forall t_aczv r_acmC.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success
                        (M1 i_XbWL c_XbWN (K1 R Int) t_aczv) r_acmC
                   -> Data.Binary.Get.Internal.Decoder r_acmC)
                  ~R# (forall t_aczv. Get (M1 i_XbWL c_XbWN (K1 R Int) t_aczv))))

$wlvl_res5
  :: forall c_XbXx w_acdd a1_acde.
     Binary w_acdd =>
     w_acdd
     -> C1 c_XbXx (M1 S NoSelector (Rec0 Int)) a1_acde
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=DmdType <L,1*U(1*C1(U(U,U)),A)><S,1*U><L,1*U(U)>]
$wlvl_res5 =
  \ (@ c_XbXx)
    (@ w_acdd)
    (@ a17_acde)
    (w1_sdHs :: Binary w_acdd)
    (w2_sdHt :: w_acdd)
    (w3_sdHv :: C1 c_XbXx (M1 S NoSelector (Rec0 Int)) a17_acde) ->
    case w2_sdHt of code_acyS { __DEFAULT ->
    let {
      eta1_acyT [Dmd=<L,U(1*U,C(U))>] :: Data.Binary.Put.PutM ()
      [LclId, Str=DmdType]
      eta1_acyT =
        case binary-0.7.3.0:Data.Binary.Class.$w$cput9
               (case w3_sdHv
                     `cast` (GHC.Generics.NTCo:M1[0]
                               <C>_P <c_XbXx>_P <M1 S NoSelector (Rec0 Int)>_R
                             ; GHC.Generics.NTCo:M1[0]
                                 <S>_P <NoSelector>_P <K1 R Int>_R <a17_acde>_N
                             ; GHC.Generics.NTCo:K1[0] <R>_P <Int>_R <a17_acde>_P
                             :: M1 C c_XbXx (M1 S NoSelector (Rec0 Int)) a17_acde ~R# Int)
                of _ [Occ=Dead] { ghc-prim-0.4.0.0:GHC.Types.I# x#_acG0 ->
                GHC.Int.I64# x#_acG0
                })
        of _ [Occ=Dead] { (# ww1_acK0, ww2_acK1 #) ->
        (Data.Binary.Put.PairS @ () ww1_acK0 ww2_acK1)
        `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
        } } in
    let {
      eta_acyU [Dmd=<L,U(U,U)>] :: Data.Binary.Put.PutM ()
      [LclId, Str=DmdType]
      eta_acyU = put @ w_acdd w1_sdHs code_acyS } in
    (# case eta_acyU of _ [Occ=Dead] { __DEFAULT ->
       case eta1_acyT
            `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
       of _ [Occ=Dead] { Data.Binary.Put.PairS x_acyY w'_acyZ ->
       x_acyY
       }
       },
       (\ (x_acz1
             :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                -> IO LBS.ByteString) ->
          case eta_acyU
               `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                       :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
          of _ [Occ=Dead] { Data.Binary.Put.PairS a18_acz4 w8_acz5 ->
          (w8_acz5
           `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                      ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                            -> IO LBS.ByteString)
                           -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           -> IO LBS.ByteString)))
            (case eta1_acyT
                  `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                          :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
             of _ [Occ=Dead] { Data.Binary.Put.PairS x1_acz9 w'_acza ->
             (w'_acza
              `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                      :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                         ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString)
                              -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              -> IO LBS.ByteString)))
               x_acz1
             })
          })
       `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
               :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }

lvl8_res6
  :: forall c_XbXx w_acdd a1_acde.
     (Num w_acdd, Data.Bits.Bits w_acdd, Binary w_acdd) =>
     w_acdd
     -> w_acdd -> C1 c_XbXx (M1 S NoSelector (Rec0 Int)) a1_acde -> Put
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=DmdType <L,A><L,A><L,1*U(1*C1(U(U,U)),A)><S,1*U><L,A><L,1*U(U)>m]
lvl8_res6 =
  \ (@ c_XbXx)
    (@ w_acdd)
    (@ a17_acde)
    _ [Occ=Dead]
    _ [Occ=Dead]
    (w3_sdHs :: Binary w_acdd)
    (w4_sdHt :: w_acdd)
    _ [Occ=Dead]
    (w6_sdHv :: C1 c_XbXx (M1 S NoSelector (Rec0 Int)) a17_acde) ->
    case $wlvl_res5
           @ c_XbXx @ w_acdd @ a17_acde w3_sdHs w4_sdHt w6_sdHv
    of _ [Occ=Dead] { (# ww1_sdL1, ww2_sdL2 #) ->
    (Data.Binary.Put.PairS @ () ww1_sdL1 ww2_sdL2)
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

Main.$s$fGBinary:+:2 :: GBinary (M1 S NoSelector (Rec0 Int))
[GblId,
 Str=DmdType m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$s$fGBinary:+:_$s$fGBinaryM3 @ S @ NoSelector}]
Main.$s$fGBinary:+:2 =
  Main.$s$fGBinary:+:_$s$fGBinaryM3 @ S @ NoSelector

Main.$s$fGBinary:+:_$s$fGSumM2 [InlPrag=[ALWAYS] CONLIKE]
  :: forall c_abXv.
     binary-0.7.3.0:Data.Binary.Generic.GSum
       (C1 c_abXv (M1 S NoSelector (Rec0 Int)))
[GblId,
 Str=DmdType m,
 Unf=DFun: \ (@ c_abXv) ->
       binary-0.7.3.0:Data.Binary.Generic.D:GSum TYPE C1
                                                        c_abXv (M1 S NoSelector (Rec0 Int))
                                                 binary-0.7.3.0:Data.Binary.Generic.$fGSumM1_$cgetSum
                                                   @ c_abXv
                                                   @ (M1 S NoSelector (Rec0 Int))
                                                   Main.$s$fGBinary:+:2
                                                 binary-0.7.3.0:Data.Binary.Generic.$fGSumM1_$cputSum
                                                   @ c_abXv
                                                   @ (M1 S NoSelector (Rec0 Int))
                                                   Main.$s$fGBinary:+:2]
Main.$s$fGBinary:+:_$s$fGSumM2 =
  \ (@ c_XbXx) ->
    binary-0.7.3.0:Data.Binary.Generic.D:GSum
      @ (C1 c_XbXx (M1 S NoSelector (Rec0 Int)))
      ((a1_rerR @ c_XbXx)
       `cast` (forall word_aczk a17_aczl.
               <Ord word_aczk>_R
               -> <Num word_aczk>_R
               -> <Data.Bits.Bits word_aczk>_R
               -> <word_aczk>_R
               -> <word_aczk>_R
               -> Sym
                    (Data.Binary.Get.Internal.NTCo:Get[0]
                       <M1 C c_XbXx (M1 S NoSelector (Rec0 Int)) a17_aczl>_R)
               :: (forall word_aczk a17_aczl.
                   (Ord word_aczk, Num word_aczk, Data.Bits.Bits word_aczk) =>
                   word_aczk
                   -> word_aczk
                   -> forall r_acmC.
                      Data.ByteString.Internal.ByteString
                      -> Data.Binary.Get.Internal.Success
                           (M1 C c_XbXx (M1 S NoSelector (Rec0 Int)) a17_aczl) r_acmC
                      -> Data.Binary.Get.Internal.Decoder r_acmC)
                  ~R# (forall word_aczk a17_aczl.
                       (Ord word_aczk, Num word_aczk, Data.Bits.Bits word_aczk) =>
                       word_aczk
                       -> word_aczk
                       -> Get (M1 C c_XbXx (M1 S NoSelector (Rec0 Int)) a17_aczl))))
      (lvl8_res6 @ c_XbXx)

size :: Int
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
size = ghc-prim-0.4.0.0:GHC.Types.I# 20

Rec {
Main.$wa4 [InlPrag=[0], Occ=LoopBreaker]
  :: ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree1 Int #)
[GblId, Arity=2, Str=DmdType <S,1*U><L,U>]
Main.$wa4 =
  \ (ww_sdHD :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdHA [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ww_sdHD of ds_Xc1d {
      __DEFAULT ->
        case Main.$wa4 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc1d 1) w_sdHA
        of _ [Occ=Dead] { (# ipv_acJ1, ipv1_acJ2 #) ->
        case Main.$wa4 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc1d 1) ipv_acJ1
        of _ [Occ=Dead] { (# ipv2_acQ8, ipv3_acQ9 #) ->
        (# ipv2_acQ8, Main.Branch1 @ Int ipv1_acJ2 ipv3_acQ9 #)
        }
        };
      0 ->
        case System.Random.theStdGen
             `cast` (GHC.IORef.NTCo:IORef[0] <StdGen>_N
                     :: GHC.IORef.IORef StdGen
                        ~R# GHC.STRef.STRef ghc-prim-0.4.0.0:GHC.Prim.RealWorld StdGen)
        of _ [Occ=Dead] { GHC.STRef.STRef r#_acPl ->
        case ghc-prim-0.4.0.0:GHC.Prim.atomicModifyMutVar#
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               @ StdGen
               @ (StdGen, Int)
               @ Int
               r#_acPl
               System.Random.$fRandomInt2
               w_sdHA
        of _ [Occ=Dead] { (# ipv_acPq, ipv1_acPr #) ->
        case ipv1_acPr
        of b1_acPt { ghc-prim-0.4.0.0:GHC.Types.I# ipv2_acPv ->
        (# ipv_acPq, Main.Leaf1 @ Int b1_acPt #)
        }
        }
        }
    }
end Rec }

Main.generateRandomTree3 [InlPrag=INLINE[0]]
  :: Int
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree1 Int #)
[GblId,
 Arity=2,
 Str=DmdType <S(S),1*U(1*U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sdHz [Occ=Once!] :: Int)
                 (w1_sdHA [Occ=Once, OS=OneShot]
                    :: ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                 case w_sdHz
                 of _ [Occ=Dead]
                 { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdHD [Occ=Once] ->
                 Main.$wa4 ww1_sdHD w1_sdHA
                 }}]
Main.generateRandomTree3 =
  \ (w_sdHz :: Int)
    (w1_sdHA [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case w_sdHz
    of _ [Occ=Dead] { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdHD ->
    Main.$wa4 ww1_sdHD w1_sdHA
    }

generateRandomTree1 :: Int -> IO (Tree1 Int)
[GblId,
 Arity=2,
 Str=DmdType <S(S),1*U(1*U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.generateRandomTree3
               `cast` (<Int>_R
                       -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree1 Int>_R)
                       :: (Int
                           -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 Tree1 Int #))
                          ~R# (Int -> IO (Tree1 Int)))}]
generateRandomTree1 =
  Main.generateRandomTree3
  `cast` (<Int>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree1 Int>_R)
          :: (Int
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    Tree1 Int #))
             ~R# (Int -> IO (Tree1 Int)))

Rec {
Main.$wa3 [InlPrag=[0], Occ=LoopBreaker]
  :: ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree Int #)
[GblId, Arity=2, Str=DmdType <S,1*U><L,U>]
Main.$wa3 =
  \ (ww_sdHK :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdHH [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ww_sdHK of ds_Xc1g {
      __DEFAULT ->
        case Main.$wa3 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc1g 1) w_sdHH
        of _ [Occ=Dead] { (# ipv_acJ1, ipv1_acJ2 #) ->
        case Main.$wa3 (ghc-prim-0.4.0.0:GHC.Prim.-# ds_Xc1g 1) ipv_acJ1
        of _ [Occ=Dead] { (# ipv2_acQ8, ipv3_acQ9 #) ->
        (# ipv2_acQ8, Main.Branch @ Int ipv1_acJ2 ipv3_acQ9 #)
        }
        };
      0 ->
        case System.Random.theStdGen
             `cast` (GHC.IORef.NTCo:IORef[0] <StdGen>_N
                     :: GHC.IORef.IORef StdGen
                        ~R# GHC.STRef.STRef ghc-prim-0.4.0.0:GHC.Prim.RealWorld StdGen)
        of _ [Occ=Dead] { GHC.STRef.STRef r#_acPl ->
        case ghc-prim-0.4.0.0:GHC.Prim.atomicModifyMutVar#
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               @ StdGen
               @ (StdGen, Int)
               @ Int
               r#_acPl
               System.Random.$fRandomInt2
               w_sdHH
        of _ [Occ=Dead] { (# ipv_acPq, ipv1_acPr #) ->
        case ipv1_acPr
        of b1_acPt { ghc-prim-0.4.0.0:GHC.Types.I# ipv2_acPv ->
        (# ipv_acPq, Main.Leaf @ Int b1_acPt #)
        }
        }
        }
    }
end Rec }

Main.generateRandomTree2 [InlPrag=INLINE[0]]
  :: Int
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree Int #)
[GblId,
 Arity=2,
 Str=DmdType <S(S),1*U(1*U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sdHG [Occ=Once!] :: Int)
                 (w1_sdHH [Occ=Once, OS=OneShot]
                    :: ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                 case w_sdHG
                 of _ [Occ=Dead]
                 { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdHK [Occ=Once] ->
                 Main.$wa3 ww1_sdHK w1_sdHH
                 }}]
Main.generateRandomTree2 =
  \ (w_sdHG :: Int)
    (w1_sdHH [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case w_sdHG
    of _ [Occ=Dead] { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdHK ->
    Main.$wa3 ww1_sdHK w1_sdHH
    }

generateRandomTree :: Int -> IO (Tree Int)
[GblId,
 Arity=2,
 Str=DmdType <S(S),1*U(1*U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.generateRandomTree2
               `cast` (<Int>_R
                       -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree Int>_R)
                       :: (Int
                           -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 Tree Int #))
                          ~R# (Int -> IO (Tree Int)))}]
generateRandomTree =
  Main.generateRandomTree2
  `cast` (<Int>_R
          -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree Int>_R)
          :: (Int
              -> ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    Tree Int #))
             ~R# (Int -> IO (Tree Int)))

Rec {
Main.$fNFDataTree1_$crnf [Occ=LoopBreaker]
  :: forall a_abd4. NFData a_abd4 => Tree1 a_abd4 -> ()
[GblId, Arity=2, Caf=NoCafRefs, Str=DmdType <C(S),C(U())><S,1*U>]
Main.$fNFDataTree1_$crnf =
  \ (@ a17_abd4)
    ($dNFData_abd5 :: NFData a17_abd4)
    (eta_B1 :: Tree1 a17_abd4) ->
    case eta_B1 of _ [Occ=Dead] {
      Leaf1 a18_a4tg ->
        ($dNFData_abd5
         `cast` (Control.DeepSeq.NTCo:NFData[0] <a17_abd4>_N
                 :: NFData a17_abd4 ~R# (a17_abd4 -> ())))
          a18_a4tg;
      Branch1 t1_a4th t2_a4ti ->
        case Main.$fNFDataTree1_$crnf @ a17_abd4 $dNFData_abd5 t1_a4th
        of _ [Occ=Dead] { () ->
        Main.$fNFDataTree1_$crnf @ a17_abd4 $dNFData_abd5 t2_a4ti
        }
    }
end Rec }

Main.$fNFDataTree1 [InlPrag=INLINE (sat-args=0)]
  :: forall a_a4un. NFData a_a4un => NFData (Tree1 a_a4un)
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <C(S),C(U())><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= Main.$fNFDataTree1_$crnf
               `cast` (forall a17_abd4.
                       <NFData a17_abd4>_R
                       -> Sym (Control.DeepSeq.NTCo:NFData[0] <Tree1 a17_abd4>_N)
                       :: (forall a17_abd4. NFData a17_abd4 => Tree1 a17_abd4 -> ())
                          ~R# (forall a17_abd4.
                               NFData a17_abd4 =>
                               NFData (Tree1 a17_abd4)))}]
Main.$fNFDataTree1 =
  Main.$fNFDataTree1_$crnf
  `cast` (forall a17_abd4.
          <NFData a17_abd4>_R
          -> Sym (Control.DeepSeq.NTCo:NFData[0] <Tree1 a17_abd4>_N)
          :: (forall a17_abd4. NFData a17_abd4 => Tree1 a17_abd4 -> ())
             ~R# (forall a17_abd4. NFData a17_abd4 => NFData (Tree1 a17_abd4)))

Main.$sforce2 :: Tree1 Int -> ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.$sforce2 =
  Main.$fNFDataTree1_$crnf
    @ Int
    (Control.DeepSeq.$fNFDataInt_$crnf
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
             :: (Int -> ()) ~R# NFData Int))

Rec {
$wa10_res8
  :: ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> forall r1_acjk.
        ghc-prim-0.4.0.0:GHC.Prim.Addr#
        -> GHC.ForeignPtr.ForeignPtrContents
        -> ghc-prim-0.4.0.0:GHC.Prim.Int#
        -> ghc-prim-0.4.0.0:GHC.Prim.Int#
        -> Data.Binary.Get.Internal.Success () r1_acjk
        -> Data.Binary.Get.Internal.Decoder r1_acjk
[GblId, Arity=6, Str=DmdType <L,U><L,U><L,U><L,U><L,U><L,C(C1(U))>]
$wa10_res8 =
  \ (ww_sdI2 :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (@ r1_acjk)
    (ww1_sdI6 :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww2_sdI7 :: GHC.ForeignPtr.ForeignPtrContents)
    (ww3_sdI8 :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww4_sdI9 :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdHZ :: Data.Binary.Get.Internal.Success () r1_acjk) ->
    let {
      wild_acjr :: Data.ByteString.Internal.ByteString
      [LclId, Str=DmdType]
      wild_acjr =
        Data.ByteString.Internal.PS
          ww1_sdI6 ww2_sdI7 ww3_sdI8 ww4_sdI9 } in
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww4_sdI9 ww_sdI2)
    of _ [Occ=Dead] {
      False ->
        let {
          kf_acjE :: Data.Binary.Get.Internal.Decoder r1_acjk
          [LclId, Str=DmdType]
          kf_acjE =
            Data.Binary.Get.Internal.Fail
              @ r1_acjk wild_acjr Data.Binary.Get.Internal.readN1 } in
        let {
          lvl20_sdZI :: Data.Binary.Get.Internal.Decoder r1_acjk
          [LclId, Str=DmdType]
          lvl20_sdZI =
            $wa10_res8
              ww_sdI2 @ r1_acjk ww1_sdI6 ww2_sdI7 ww3_sdI8 ww4_sdI9 w_sdHZ } in
        letrec {
          loop_acjO :: Data.Binary.Get.Internal.Decoder r1_acjk
          [LclId, Str=DmdType]
          loop_acjO = Data.Binary.Get.Internal.Partial @ r1_acjk a17_acjP;
          a17_acjP [Occ=LoopBreaker]
            :: Maybe Data.ByteString.Internal.ByteString
               -> Data.Binary.Get.Internal.Decoder r1_acjk
          [LclId, Arity=1, Str=DmdType <S,1*U>]
          a17_acjP =
            \ (sm_acjQ :: Maybe Data.ByteString.Internal.ByteString) ->
              case sm_acjQ of _ [Occ=Dead] {
                Nothing -> kf_acjE;
                Just s_acjV ->
                  case s_acjV
                  of _ [Occ=Dead]
                  { Data.ByteString.Internal.PS dt4_acjZ dt5_ack0 dt6_ack1
                                                dt7_ack2 ->
                  case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                         @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# dt7_ack2 0)
                  of _ [Occ=Dead] {
                    False ->
                      case ww4_sdI9 of ds_adpQ {
                        __DEFAULT ->
                          case dt7_ack2 of ds1_adpR {
                            __DEFAULT ->
                              case GHC.IO.unsafeDupablePerformIO
                                     @ Data.ByteString.Internal.ByteString
                                     ((\ (eta_adpS [OS=OneShot]
                                            :: ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                                         let {
                                           a18_adpT :: ghc-prim-0.4.0.0:GHC.Prim.Int#
                                           [LclId, Str=DmdType]
                                           a18_adpT =
                                             ghc-prim-0.4.0.0:GHC.Prim.+# ds_adpQ ds1_adpR } in
                                         case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                                                @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<# a18_adpT 0)
                                         of _ [Occ=Dead] {
                                           False ->
                                             case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                                                    @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                                    a18_adpT
                                                    eta_adpS
                                             of _ [Occ=Dead] { (# ipv_adq0, ipv1_adq1 #) ->
                                             let {
                                               a19_adpZ :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                                               [LclId, Str=DmdType]
                                               a19_adpZ =
                                                 ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                                                   (ipv1_adq1
                                                    `cast` (UnivCo mkUnsafeCo representational
                                                              (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                                              ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                                            :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                                               ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                                             case {__pkg_ccall bytestring-0.10.6.0 memcpy Addr#
                                        -> Addr#
                                        -> Word#
                                        -> State# RealWorld
                                        -> (# State# RealWorld, Addr# #)}_adq3
                                                    a19_adpZ
                                                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                                                       ww1_sdI6 ww3_sdI8)
                                                    (ghc-prim-0.4.0.0:GHC.Prim.int2Word# ds_adpQ)
                                                    ipv_adq0
                                             of _ [Occ=Dead] { (# ds3_adq6, ds4_adq7 #) ->
                                             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                                                    @ GHC.ForeignPtr.ForeignPtrContents
                                                    ww2_sdI7
                                                    ds3_adq6
                                             of s'_adq9 [OS=OneShot] { __DEFAULT ->
                                             case {__pkg_ccall bytestring-0.10.6.0 memcpy Addr#
                                        -> Addr#
                                        -> Word#
                                        -> State# RealWorld
                                        -> (# State# RealWorld, Addr# #)}_adqa
                                                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                                                       a19_adpZ ds_adpQ)
                                                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                                                       dt4_acjZ dt6_ack1)
                                                    (ghc-prim-0.4.0.0:GHC.Prim.int2Word# ds1_adpR)
                                                    s'_adq9
                                             of _ [Occ=Dead] { (# ds5_adqd, ds6_adqe #) ->
                                             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                                                    @ GHC.ForeignPtr.ForeignPtrContents
                                                    dt5_ack0
                                                    ds5_adqd
                                             of s'1_adqg [OS=OneShot] { __DEFAULT ->
                                             let {
                                               a20_adqh :: GHC.ForeignPtr.ForeignPtrContents
                                               [LclId, Str=DmdType]
                                               a20_adqh = GHC.ForeignPtr.PlainPtr ipv1_adq1 } in
                                             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                                                    @ GHC.ForeignPtr.ForeignPtrContents
                                                    a20_adqh
                                                    s'1_adqg
                                             of s'2_adqi [OS=OneShot] { __DEFAULT ->
                                             (# s'2_adqi,
                                                Data.ByteString.Internal.PS
                                                  a19_adpZ a20_adqh 0 a18_adpT #)
                                             }
                                             }
                                             }
                                             }
                                             }
                                             };
                                           True ->
                                             case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                                             of wild6_00 {
                                             }
                                         })
                                      `cast` (Sym
                                                (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0]
                                                   <Data.ByteString.Internal.ByteString>_R)
                                              :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                                  -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                        Data.ByteString.Internal.ByteString #))
                                                 ~R# IO Data.ByteString.Internal.ByteString))
                              of _ [Occ=Dead]
                              { Data.ByteString.Internal.PS ww6_XdNd ww7_XdNf ww8_XdNh
                                                            ww9_XdNj ->
                              $wa10_res8
                                ww_sdI2 @ r1_acjk ww6_XdNd ww7_XdNf ww8_XdNh ww9_XdNj w_sdHZ
                              };
                            0 -> lvl20_sdZI
                          };
                        0 ->
                          $wa10_res8
                            ww_sdI2 @ r1_acjk dt4_acjZ dt5_ack0 dt6_ack1 dt7_ack2 w_sdHZ
                      };
                    True -> loop_acjO
                  }
                  }
              }; } in
        loop_acjO;
      True -> w_sdHZ wild_acjr ghc-prim-0.4.0.0:GHC.Tuple.()
    }
end Rec }

Rec {
Main.$wa2 [InlPrag=[0], Occ=LoopBreaker]
  :: forall a_abbd.
     Binary a_abbd =>
     forall r_acmC.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success (Tree1 a_abbd) r_acmC
     -> Data.Binary.Get.Internal.Decoder r_acmC
[GblId,
 Arity=6,
 Str=DmdType <L,U(A,U)><L,U><L,U><L,U><L,U><L,C(C1(U))>]
Main.$wa2 =
  \ (@ a17_abbd)
    (w_sdIc :: Binary a17_abbd)
    (@ r_acmC)
    (ww_sdIh :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdIi :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdIj :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdIk :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w1_sdIe
       :: Data.Binary.Get.Internal.Success (Tree1 a17_abbd) r_acmC) ->
    let {
      a18_scJN [Dmd=<L,C(C1(U))>] :: Get a17_abbd
      [LclId, Str=DmdType]
      a18_scJN = get @ a17_abbd w_sdIc } in
    let {
      lvl20_sdZF
        :: Data.ByteString.Internal.ByteString
           -> Tree1 a17_abbd -> Data.Binary.Get.Internal.Decoder r_acmC
      [LclId, Arity=2, Str=DmdType]
      lvl20_sdZF =
        \ (i'1_acmF :: Data.ByteString.Internal.ByteString)
          (a19_acmG [OS=OneShot] :: Tree1 a17_abbd) ->
          case i'1_acmF
          of _ [Occ=Dead]
          { Data.ByteString.Internal.PS ww5_XdMM ww6_XdMO ww7_XdMQ
                                        ww8_XdMS ->
          Main.$wa2
            @ a17_abbd
            w_sdIc
            @ r_acmC
            ww5_XdMM
            ww6_XdMO
            ww7_XdMQ
            ww8_XdMS
            (\ (i'2_XcrB :: Data.ByteString.Internal.ByteString)
               (a20_XcrD [OS=OneShot] :: Tree1 a17_abbd) ->
               w1_sdIe i'2_XcrB (Main.Branch1 @ a17_abbd a19_acmG a20_XcrD))
          } } in
    let {
      lvl21_sdZE
        :: Data.ByteString.Internal.ByteString
           -> a17_abbd -> Data.Binary.Get.Internal.Decoder r_acmC
      [LclId, Arity=2, Str=DmdType]
      lvl21_sdZE =
        \ (i'1_acmF :: Data.ByteString.Internal.ByteString)
          (a19_acmG :: a17_abbd) ->
          w1_sdIe i'1_acmF (Main.Leaf1 @ a17_abbd a19_acmG) } in
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww3_sdIk 1)
    of _ [Occ=Dead] {
      False ->
        $wa10_res8
          1
          @ r_acmC
          ww_sdIh
          ww1_sdIi
          ww2_sdIj
          ww3_sdIk
          (\ (i'_ackm :: Data.ByteString.Internal.ByteString)
             _ [Occ=Dead, OS=OneShot] ->
             case i'_ackm
             of _ [Occ=Dead]
             { Data.ByteString.Internal.PS dt_ackE dt1_ackF dt2_ackG dt3_ackH ->
             case ghc-prim-0.4.0.0:GHC.Prim.readWord8OffAddr#
                    @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                    (ghc-prim-0.4.0.0:GHC.Prim.plusAddr# dt_ackE dt2_ackG)
                    0
                    ghc-prim-0.4.0.0:GHC.Prim.realWorld#
             of _ [Occ=Dead] { (# ipv_adrb, ipv1_adrc #) ->
             case ghc-prim-0.4.0.0:GHC.Prim.touch#
                    @ GHC.ForeignPtr.ForeignPtrContents dt1_ackF ipv_adrb
             of _ [Occ=Dead, OS=OneShot] { __DEFAULT ->
             case ipv1_adrc of _ [Occ=Dead] {
               __DEFAULT ->
                 Data.Binary.Get.Internal.Fail
                   @ r_acmC
                   (Data.ByteString.Internal.PS
                      dt_ackE
                      dt1_ackF
                      (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_ackG 1)
                      (ghc-prim-0.4.0.0:GHC.Prim.-# dt3_ackH 1))
                   lvl7_res3;
               __word 0 ->
                 (a18_scJN
                  `cast` (Data.Binary.Get.Internal.NTCo:Get[0] <a17_abbd>_R
                          :: Get a17_abbd
                             ~R# (forall r_acmC.
                                  Data.ByteString.Internal.ByteString
                                  -> Data.Binary.Get.Internal.Success a17_abbd r_acmC
                                  -> Data.Binary.Get.Internal.Decoder r_acmC)))
                   @ r_acmC
                   (Data.ByteString.Internal.PS
                      dt_ackE
                      dt1_ackF
                      (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_ackG 1)
                      (ghc-prim-0.4.0.0:GHC.Prim.-# dt3_ackH 1))
                   lvl21_sdZE;
               __word 1 ->
                 Main.$wa2
                   @ a17_abbd
                   w_sdIc
                   @ r_acmC
                   dt_ackE
                   dt1_ackF
                   (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_ackG 1)
                   (ghc-prim-0.4.0.0:GHC.Prim.-# dt3_ackH 1)
                   lvl20_sdZF
             }
             }
             }
             });
      True ->
        case ghc-prim-0.4.0.0:GHC.Prim.readWord8OffAddr#
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (ghc-prim-0.4.0.0:GHC.Prim.plusAddr# ww_sdIh ww2_sdIj)
               0
               ghc-prim-0.4.0.0:GHC.Prim.realWorld#
        of _ [Occ=Dead] { (# ipv_adrb, ipv1_adrc #) ->
        case ghc-prim-0.4.0.0:GHC.Prim.touch#
               @ GHC.ForeignPtr.ForeignPtrContents ww1_sdIi ipv_adrb
        of _ [Occ=Dead, OS=OneShot] { __DEFAULT ->
        case ipv1_adrc of _ [Occ=Dead] {
          __DEFAULT ->
            Data.Binary.Get.Internal.Fail
              @ r_acmC
              (Data.ByteString.Internal.PS
                 ww_sdIh
                 ww1_sdIi
                 (ghc-prim-0.4.0.0:GHC.Prim.+# ww2_sdIj 1)
                 (ghc-prim-0.4.0.0:GHC.Prim.-# ww3_sdIk 1))
              lvl7_res3;
          __word 0 ->
            (a18_scJN
             `cast` (Data.Binary.Get.Internal.NTCo:Get[0] <a17_abbd>_R
                     :: Get a17_abbd
                        ~R# (forall r_acmC.
                             Data.ByteString.Internal.ByteString
                             -> Data.Binary.Get.Internal.Success a17_abbd r_acmC
                             -> Data.Binary.Get.Internal.Decoder r_acmC)))
              @ r_acmC
              (Data.ByteString.Internal.PS
                 ww_sdIh
                 ww1_sdIi
                 (ghc-prim-0.4.0.0:GHC.Prim.+# ww2_sdIj 1)
                 (ghc-prim-0.4.0.0:GHC.Prim.-# ww3_sdIk 1))
              lvl21_sdZE;
          __word 1 ->
            Main.$wa2
              @ a17_abbd
              w_sdIc
              @ r_acmC
              ww_sdIh
              ww1_sdIi
              (ghc-prim-0.4.0.0:GHC.Prim.+# ww2_sdIj 1)
              (ghc-prim-0.4.0.0:GHC.Prim.-# ww3_sdIk 1)
              lvl20_sdZF
        }
        }
        }
    }
end Rec }

Main.$fBinaryTree4 [InlPrag=INLINE[0]]
  :: forall a_abbd.
     Binary a_abbd =>
     forall r_acmC.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success (Tree1 a_abbd) r_acmC
     -> Data.Binary.Get.Internal.Decoder r_acmC
[GblId,
 Arity=3,
 Str=DmdType <L,U(A,U)><S,1*U(U,U,U,U)><L,C(C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_abbd)
                 (w_sdIc [Occ=Once] :: Binary a17_abbd)
                 (@ r_acmC)
                 (w1_sdId [Occ=Once!] :: Data.ByteString.Internal.ByteString)
                 (w2_sdIe [Occ=Once]
                    :: Data.Binary.Get.Internal.Success (Tree1 a17_abbd) r_acmC) ->
                 case w1_sdId
                 of _ [Occ=Dead]
                 { Data.ByteString.Internal.PS ww1_sdIh [Occ=Once]
                                               ww2_sdIi [Occ=Once] ww3_sdIj [Occ=Once]
                                               ww4_sdIk [Occ=Once] ->
                 Main.$wa2
                   @ a17_abbd
                   w_sdIc
                   @ r_acmC
                   ww1_sdIh
                   ww2_sdIi
                   ww3_sdIj
                   ww4_sdIk
                   w2_sdIe
                 }}]
Main.$fBinaryTree4 =
  \ (@ a17_abbd)
    (w_sdIc :: Binary a17_abbd)
    (@ r_acmC)
    (w1_sdId :: Data.ByteString.Internal.ByteString)
    (w2_sdIe
       :: Data.Binary.Get.Internal.Success (Tree1 a17_abbd) r_acmC) ->
    case w1_sdId
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdIh ww2_sdIi ww3_sdIj
                                  ww4_sdIk ->
    Main.$wa2
      @ a17_abbd
      w_sdIc
      @ r_acmC
      ww1_sdIh
      ww2_sdIi
      ww3_sdIj
      ww4_sdIk
      w2_sdIe
    }

Main.$fBinaryTree1_$cget
  :: forall a_abbd. Binary a_abbd => Get (Tree1 a_abbd)
[GblId,
 Arity=3,
 Str=DmdType <L,U(A,U)><S,1*U(U,U,U,U)><L,C(C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$fBinaryTree4
               `cast` (forall a17_abbd.
                       <Binary a17_abbd>_R
                       -> Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree1 a17_abbd>_R)
                       :: (forall a17_abbd.
                           Binary a17_abbd =>
                           forall r_acmC.
                           Data.ByteString.Internal.ByteString
                           -> Data.Binary.Get.Internal.Success (Tree1 a17_abbd) r_acmC
                           -> Data.Binary.Get.Internal.Decoder r_acmC)
                          ~R# (forall a17_abbd. Binary a17_abbd => Get (Tree1 a17_abbd)))}]
Main.$fBinaryTree1_$cget =
  Main.$fBinaryTree4
  `cast` (forall a17_abbd.
          <Binary a17_abbd>_R
          -> Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree1 a17_abbd>_R)
          :: (forall a17_abbd.
              Binary a17_abbd =>
              forall r_acmC.
              Data.ByteString.Internal.ByteString
              -> Data.Binary.Get.Internal.Success (Tree1 a17_abbd) r_acmC
              -> Data.Binary.Get.Internal.Decoder r_acmC)
             ~R# (forall a17_abbd. Binary a17_abbd => Get (Tree1 a17_abbd)))

Main.$fConstructorTree0_$cconName
  :: forall (t_abak :: * -> (* -> *) -> * -> *)
            (f_abal :: * -> *)
            a_abam.
     t_abak Main.C1_1Tree f_abal a_abam -> [Char]
[GblId,
 Arity=1,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_abaW :: * -> (* -> *) -> * -> *))
                 (@ (f_abaX :: * -> *))
                 (@ a17_abaY)
                 _ [Occ=Dead] ->
                 Main.$fConstructorTree2}]
Main.$fConstructorTree0_$cconName =
  \ (@ (t_abaW :: * -> (* -> *) -> * -> *))
    (@ (f_abaX :: * -> *))
    (@ a17_abaY)
    _ [Occ=Dead] ->
    Main.$fConstructorTree2

a4_res9
  :: forall (t_ac3j :: * -> (* -> *) -> * -> *)
            (f_ac3k :: * -> *)
            a3_ac3l.
     t_ac3j Main.C1_1Tree f_ac3k a3_ac3l -> Fixity
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType]
a4_res9 =
  \ (@ (t_ac3j :: * -> (* -> *) -> * -> *))
    (@ (f_ac3k :: * -> *))
    (@ a17_ac3l)
    _ [Occ=Dead] ->
    GHC.Generics.Prefix

a5_resa
  :: forall (t_ac3d :: * -> (* -> *) -> * -> *)
            (f_ac3e :: * -> *)
            a3_ac3f.
     t_ac3d Main.C1_1Tree f_ac3e a3_ac3f -> Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType]
a5_resa =
  \ (@ (t_ac3d :: * -> (* -> *) -> * -> *))
    (@ (f_ac3e :: * -> *))
    (@ a17_ac3f)
    _ [Occ=Dead] ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree0 [InlPrag=[ALWAYS] CONLIKE]
  :: Constructor Main.C1_1Tree
[GblId[DFunId],
 Str=DmdType m,
 Unf=DFun: \ ->
       GHC.Generics.D:Constructor TYPE Main.C1_1Tree
                                  Main.$fConstructorTree0_$cconName
                                  Main.$fConstructorTree0_$s$dmconFixity
                                  Main.$fConstructorTree0_$s$dmconIsRecord]
Main.$fConstructorTree0 =
  GHC.Generics.D:Constructor
    @ Main.C1_1Tree Main.$fConstructorTree0_$cconName a4_res9 a5_resa

Main.$fConstructorTree_$cconName
  :: forall (t_abak :: * -> (* -> *) -> * -> *)
            (f_abal :: * -> *)
            a_abam.
     t_abak Main.C1_0Tree f_abal a_abam -> [Char]
[GblId,
 Arity=1,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_aban :: * -> (* -> *) -> * -> *))
                 (@ (f_abao :: * -> *))
                 (@ a17_abap)
                 _ [Occ=Dead] ->
                 Main.$fConstructorTree1}]
Main.$fConstructorTree_$cconName =
  \ (@ (t_aban :: * -> (* -> *) -> * -> *))
    (@ (f_abao :: * -> *))
    (@ a17_abap)
    _ [Occ=Dead] ->
    Main.$fConstructorTree1

a6_resb
  :: forall (t_ac3j :: * -> (* -> *) -> * -> *)
            (f_ac3k :: * -> *)
            a3_ac3l.
     t_ac3j Main.C1_0Tree f_ac3k a3_ac3l -> Fixity
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType]
a6_resb =
  \ (@ (t_ac3j :: * -> (* -> *) -> * -> *))
    (@ (f_ac3k :: * -> *))
    (@ a17_ac3l)
    _ [Occ=Dead] ->
    GHC.Generics.Prefix

a7_resc
  :: forall (t_ac3d :: * -> (* -> *) -> * -> *)
            (f_ac3e :: * -> *)
            a3_ac3f.
     t_ac3d Main.C1_0Tree f_ac3e a3_ac3f -> Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType]
a7_resc =
  \ (@ (t_ac3d :: * -> (* -> *) -> * -> *))
    (@ (f_ac3e :: * -> *))
    (@ a17_ac3f)
    _ [Occ=Dead] ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fConstructorTree [InlPrag=[ALWAYS] CONLIKE]
  :: Constructor Main.C1_0Tree
[GblId[DFunId],
 Str=DmdType m,
 Unf=DFun: \ ->
       GHC.Generics.D:Constructor TYPE Main.C1_0Tree
                                  Main.$fConstructorTree_$cconName
                                  Main.$fConstructorTree_$s$dmconFixity
                                  Main.$fConstructorTree_$s$dmconIsRecord]
Main.$fConstructorTree =
  GHC.Generics.D:Constructor
    @ Main.C1_0Tree Main.$fConstructorTree_$cconName a6_resb a7_resc

Main.$fDatatypeTree_$cmoduleName
  :: forall (t_ab9W :: * -> (* -> *) -> * -> *)
            (f_ab9X :: * -> *)
            a_ab9Y.
     t_ab9W Main.D1Tree f_ab9X a_ab9Y -> [Char]
[GblId,
 Arity=1,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_ab9Z :: * -> (* -> *) -> * -> *))
                 (@ (f_aba0 :: * -> *))
                 (@ a17_aba1)
                 _ [Occ=Dead] ->
                 Main.$fDatatypeTree1}]
Main.$fDatatypeTree_$cmoduleName =
  \ (@ (t_ab9Z :: * -> (* -> *) -> * -> *))
    (@ (f_aba0 :: * -> *))
    (@ a17_aba1)
    _ [Occ=Dead] ->
    Main.$fDatatypeTree1

Main.$fDatatypeTree_$cdatatypeName
  :: forall (t_ab9N :: * -> (* -> *) -> * -> *)
            (f_ab9O :: * -> *)
            a_ab9P.
     t_ab9N Main.D1Tree f_ab9O a_ab9P -> [Char]
[GblId,
 Arity=1,
 Str=DmdType <L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (t_ab9Q :: * -> (* -> *) -> * -> *))
                 (@ (f_ab9R :: * -> *))
                 (@ a17_ab9S)
                 _ [Occ=Dead] ->
                 Main.$fDatatypeTree2}]
Main.$fDatatypeTree_$cdatatypeName =
  \ (@ (t_ab9Q :: * -> (* -> *) -> * -> *))
    (@ (f_ab9R :: * -> *))
    (@ a17_ab9S)
    _ [Occ=Dead] ->
    Main.$fDatatypeTree2

a8_resd
  :: forall (t_ac3p :: * -> (* -> *) -> * -> *)
            (f_ac3q :: * -> *)
            a3_ac3r.
     t_ac3p Main.D1Tree f_ac3q a3_ac3r -> Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType]
a8_resd =
  \ (@ (t_ac3p :: * -> (* -> *) -> * -> *))
    (@ (f_ac3q :: * -> *))
    (@ a17_ac3r)
    _ [Occ=Dead] ->
    ghc-prim-0.4.0.0:GHC.Types.False

Main.$fDatatypeTree [InlPrag=[ALWAYS] CONLIKE]
  :: Datatype Main.D1Tree
[GblId[DFunId],
 Str=DmdType m,
 Unf=DFun: \ ->
       GHC.Generics.D:Datatype TYPE Main.D1Tree
                               Main.$fDatatypeTree_$cdatatypeName
                               Main.$fDatatypeTree_$cmoduleName
                               Main.$fDatatypeTree_$s$dmisNewtype]
Main.$fDatatypeTree =
  GHC.Generics.D:Datatype
    @ Main.D1Tree
    Main.$fDatatypeTree_$cdatatypeName
    Main.$fDatatypeTree_$cmoduleName
    a8_resd

Rec {
Main.$w$cshowsPrec1 [InlPrag=[0], Occ=LoopBreaker]
  :: forall a_ab8W.
     Show a_ab8W =>
     ghc-prim-0.4.0.0:GHC.Prim.Int# -> Tree1 a_ab8W -> ShowS
[GblId, Arity=3, Str=DmdType <L,U(C(C1(U)),A,A)><L,U><S,1*U>]
Main.$w$cshowsPrec1 =
  \ (@ a17_ab8W)
    (w_sdIn :: Show a17_ab8W)
    (ww_sdIs :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w1_sdIp :: Tree1 a17_ab8W) ->
    case w1_sdIp of _ [Occ=Dead] {
      Leaf1 b1_aaU4 ->
        let {
          g_ac7H [Dmd=<L,C(U)>] :: String -> String
          [LclId, Str=DmdType]
          g_ac7H = showsPrec @ a17_ab8W w_sdIn lvl1_rerX b1_aaU4 } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdIs 11)
        of _ [Occ=Dead] {
          False ->
            \ (x_ac7I :: String) -> ++ @ Char lvl4_res0 (g_ac7H x_ac7I);
          True ->
            \ (x_ac7z :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl4_res0
                   (g_ac7H
                      (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac7z)))
        };
      Branch1 b1_aaU6 b2_aaU7 ->
        let {
          f_XcgH [Dmd=<L,C(U)>] :: String -> String
          [LclId, Str=DmdType]
          f_XcgH = Main.$w$cshowsPrec1 @ a17_ab8W w_sdIn 11 b1_aaU6 } in
        let {
          g_XcgM [Dmd=<L,C(U)>] :: String -> String
          [LclId, Str=DmdType]
          g_XcgM = Main.$w$cshowsPrec1 @ a17_ab8W w_sdIn 11 b2_aaU7 } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdIs 11)
        of _ [Occ=Dead] {
          False ->
            \ (x_XcgR :: String) ->
              ++
                @ Char
                lvl3_rerZ
                (f_XcgH
                   (ghc-prim-0.4.0.0:GHC.Types.:
                      @ Char GHC.Show.showSpace1 (g_XcgM x_XcgR)));
          True ->
            \ (x_ac7z :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl3_rerZ
                   (f_XcgH
                      (ghc-prim-0.4.0.0:GHC.Types.:
                         @ Char
                         GHC.Show.showSpace1
                         (g_XcgM
                            (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac7z)))))
        }
    }
end Rec }

Main.$fShowTree1_$cshowsPrec [InlPrag=INLINE[0]]
  :: forall a_ab8W. Show a_ab8W => Int -> Tree1 a_ab8W -> ShowS
[GblId,
 Arity=3,
 Str=DmdType <L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab8W)
                 (w_sdIn [Occ=Once] :: Show a17_ab8W)
                 (w1_sdIo [Occ=Once!] :: Int)
                 (w2_sdIp [Occ=Once] :: Tree1 a17_ab8W) ->
                 case w1_sdIo
                 of _ [Occ=Dead]
                 { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdIs [Occ=Once] ->
                 Main.$w$cshowsPrec1 @ a17_ab8W w_sdIn ww1_sdIs w2_sdIp
                 }}]
Main.$fShowTree1_$cshowsPrec =
  \ (@ a17_ab8W)
    (w_sdIn :: Show a17_ab8W)
    (w1_sdIo :: Int)
    (w2_sdIp :: Tree1 a17_ab8W) ->
    case w1_sdIo
    of _ [Occ=Dead] { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdIs ->
    Main.$w$cshowsPrec1 @ a17_ab8W w_sdIn ww1_sdIs w2_sdIp
    }

Main.$fShowTree1_$cshow
  :: forall a_ab8W. Show a_ab8W => Tree1 a_ab8W -> String
[GblId,
 Arity=2,
 Str=DmdType <L,U(C(C1(U)),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab8W)
                 ($dShow_ab8X [Occ=Once] :: Show a17_ab8W)
                 (x_ac7q [Occ=Once] :: Tree1 a17_ab8W) ->
                 Main.$fShowTree1_$cshowsPrec
                   @ a17_ab8W
                   $dShow_ab8X
                   GHC.Show.shows18
                   x_ac7q
                   (ghc-prim-0.4.0.0:GHC.Types.[] @ Char)}]
Main.$fShowTree1_$cshow =
  \ (@ a17_ab8W)
    ($dShow_ab8X :: Show a17_ab8W)
    (x_ac7q :: Tree1 a17_ab8W) ->
    Main.$w$cshowsPrec1
      @ a17_ab8W
      $dShow_ab8X
      0
      x_ac7q
      (ghc-prim-0.4.0.0:GHC.Types.[] @ Char)

Main.$fShowTree1_$cshowList
  :: forall a_ab8W. Show a_ab8W => [Tree1 a_ab8W] -> ShowS
[GblId,
 Arity=3,
 Str=DmdType <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab8W)
                 ($dShow_ab8X [Occ=Once] :: Show a17_ab8W)
                 (eta_B2 [Occ=Once] :: [Tree1 a17_ab8W])
                 (eta1_B1 [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ (Tree1 a17_ab8W)
                   (Main.$fShowTree1_$cshowsPrec
                      @ a17_ab8W $dShow_ab8X Main.$fShowTree2)
                   eta_B2
                   eta1_B1}]
Main.$fShowTree1_$cshowList =
  \ (@ a17_ab8W)
    ($dShow_ab8X :: Show a17_ab8W)
    (eta_B2 :: [Tree1 a17_ab8W])
    (eta1_B1 :: String) ->
    GHC.Show.showList__
      @ (Tree1 a17_ab8W)
      (\ (w_sdIp :: Tree1 a17_ab8W) ->
         Main.$w$cshowsPrec1 @ a17_ab8W $dShow_ab8X 0 w_sdIp)
      eta_B2
      eta1_B1

Main.$fShowTree1 [InlPrag=[ALWAYS] CONLIKE]
  :: forall a_aaHN. Show a_aaHN => Show (Tree1 a_aaHN)
[GblId[DFunId],
 Arity=1,
 Str=DmdType <L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a17_ab8W) ($dShow_ab8X :: Show a17_ab8W) ->
       GHC.Show.D:Show TYPE Tree1 a17_ab8W
                       Main.$fShowTree1_$cshowsPrec @ a17_ab8W $dShow_ab8X
                       Main.$fShowTree1_$cshow @ a17_ab8W $dShow_ab8X
                       Main.$fShowTree1_$cshowList @ a17_ab8W $dShow_ab8X]
Main.$fShowTree1 =
  \ (@ a17_ab8W) ($dShow_ab8X :: Show a17_ab8W) ->
    GHC.Show.D:Show
      @ (Tree1 a17_ab8W)
      (Main.$fShowTree1_$cshowsPrec @ a17_ab8W $dShow_ab8X)
      (Main.$fShowTree1_$cshow @ a17_ab8W $dShow_ab8X)
      (Main.$fShowTree1_$cshowList @ a17_ab8W $dShow_ab8X)

Rec {
Main.$w$cshowsPrec [InlPrag=[0], Occ=LoopBreaker]
  :: forall a_ab4m.
     Show a_ab4m =>
     ghc-prim-0.4.0.0:GHC.Prim.Int# -> Tree a_ab4m -> ShowS
[GblId, Arity=3, Str=DmdType <L,U(C(C1(U)),A,A)><L,U><S,1*U>]
Main.$w$cshowsPrec =
  \ (@ a17_ab4m)
    (w_sdIv :: Show a17_ab4m)
    (ww_sdIA :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w1_sdIx :: Tree a17_ab4m) ->
    case w1_sdIx of _ [Occ=Dead] {
      Leaf b1_aaHV ->
        let {
          g_ac7H [Dmd=<L,C(U)>] :: String -> String
          [LclId, Str=DmdType]
          g_ac7H = showsPrec @ a17_ab4m w_sdIv lvl1_rerX b1_aaHV } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdIA 11)
        of _ [Occ=Dead] {
          False ->
            \ (x_ac7I :: String) -> ++ @ Char lvl2_rerY (g_ac7H x_ac7I);
          True ->
            \ (x_ac7z :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl2_rerY
                   (g_ac7H
                      (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac7z)))
        };
      Branch b1_aaU1 b2_aaU2 ->
        let {
          f_XcgV [Dmd=<L,C(U)>] :: String -> String
          [LclId, Str=DmdType]
          f_XcgV = Main.$w$cshowsPrec @ a17_ab4m w_sdIv 11 b1_aaU1 } in
        let {
          g_Xch0 [Dmd=<L,C(U)>] :: String -> String
          [LclId, Str=DmdType]
          g_Xch0 = Main.$w$cshowsPrec @ a17_ab4m w_sdIv 11 b2_aaU2 } in
        case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
               @ Bool (ghc-prim-0.4.0.0:GHC.Prim.>=# ww_sdIA 11)
        of _ [Occ=Dead] {
          False ->
            \ (x_Xch5 :: String) ->
              ++
                @ Char
                lvl_rerW
                (f_XcgV
                   (ghc-prim-0.4.0.0:GHC.Types.:
                      @ Char GHC.Show.showSpace1 (g_Xch0 x_Xch5)));
          True ->
            \ (x_ac7z :: String) ->
              ghc-prim-0.4.0.0:GHC.Types.:
                @ Char
                GHC.Show.shows9
                (++
                   @ Char
                   lvl_rerW
                   (f_XcgV
                      (ghc-prim-0.4.0.0:GHC.Types.:
                         @ Char
                         GHC.Show.showSpace1
                         (g_Xch0
                            (ghc-prim-0.4.0.0:GHC.Types.: @ Char GHC.Show.shows8 x_ac7z)))))
        }
    }
end Rec }

Main.$fShowTree_$cshowsPrec [InlPrag=INLINE[0]]
  :: forall a_ab4m. Show a_ab4m => Int -> Tree a_ab4m -> ShowS
[GblId,
 Arity=3,
 Str=DmdType <L,U(C(C1(U)),A,A)><S,1*U(U)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab4m)
                 (w_sdIv [Occ=Once] :: Show a17_ab4m)
                 (w1_sdIw [Occ=Once!] :: Int)
                 (w2_sdIx [Occ=Once] :: Tree a17_ab4m) ->
                 case w1_sdIw
                 of _ [Occ=Dead]
                 { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdIA [Occ=Once] ->
                 Main.$w$cshowsPrec @ a17_ab4m w_sdIv ww1_sdIA w2_sdIx
                 }}]
Main.$fShowTree_$cshowsPrec =
  \ (@ a17_ab4m)
    (w_sdIv :: Show a17_ab4m)
    (w1_sdIw :: Int)
    (w2_sdIx :: Tree a17_ab4m) ->
    case w1_sdIw
    of _ [Occ=Dead] { ghc-prim-0.4.0.0:GHC.Types.I# ww1_sdIA ->
    Main.$w$cshowsPrec @ a17_ab4m w_sdIv ww1_sdIA w2_sdIx
    }

Main.$fShowTree_$cshow
  :: forall a_ab4m. Show a_ab4m => Tree a_ab4m -> String
[GblId,
 Arity=2,
 Str=DmdType <L,U(C(C1(U)),A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab4m)
                 ($dShow_ab4n [Occ=Once] :: Show a17_ab4m)
                 (x_ac7q [Occ=Once] :: Tree a17_ab4m) ->
                 Main.$fShowTree_$cshowsPrec
                   @ a17_ab4m
                   $dShow_ab4n
                   GHC.Show.shows18
                   x_ac7q
                   (ghc-prim-0.4.0.0:GHC.Types.[] @ Char)}]
Main.$fShowTree_$cshow =
  \ (@ a17_ab4m)
    ($dShow_ab4n :: Show a17_ab4m)
    (x_ac7q :: Tree a17_ab4m) ->
    Main.$w$cshowsPrec
      @ a17_ab4m
      $dShow_ab4n
      0
      x_ac7q
      (ghc-prim-0.4.0.0:GHC.Types.[] @ Char)

Main.$fShowTree_$cshowList
  :: forall a_ab4m. Show a_ab4m => [Tree a_ab4m] -> ShowS
[GblId,
 Arity=3,
 Str=DmdType <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab4m)
                 ($dShow_ab4n [Occ=Once] :: Show a17_ab4m)
                 (eta_B2 [Occ=Once] :: [Tree a17_ab4m])
                 (eta1_B1 [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ (Tree a17_ab4m)
                   (Main.$fShowTree_$cshowsPrec
                      @ a17_ab4m $dShow_ab4n Main.$fShowTree2)
                   eta_B2
                   eta1_B1}]
Main.$fShowTree_$cshowList =
  \ (@ a17_ab4m)
    ($dShow_ab4n :: Show a17_ab4m)
    (eta_B2 :: [Tree a17_ab4m])
    (eta1_B1 :: String) ->
    GHC.Show.showList__
      @ (Tree a17_ab4m)
      (\ (w_sdIx :: Tree a17_ab4m) ->
         Main.$w$cshowsPrec @ a17_ab4m $dShow_ab4n 0 w_sdIx)
      eta_B2
      eta1_B1

Main.$fShowTree [InlPrag=[ALWAYS] CONLIKE]
  :: forall a_aaHK. Show a_aaHK => Show (Tree a_aaHK)
[GblId[DFunId],
 Arity=1,
 Str=DmdType <L,U(C(C1(U)),A,A)>m,
 Unf=DFun: \ (@ a17_ab4m) ($dShow_ab4n :: Show a17_ab4m) ->
       GHC.Show.D:Show TYPE Tree a17_ab4m
                       Main.$fShowTree_$cshowsPrec @ a17_ab4m $dShow_ab4n
                       Main.$fShowTree_$cshow @ a17_ab4m $dShow_ab4n
                       Main.$fShowTree_$cshowList @ a17_ab4m $dShow_ab4n]
Main.$fShowTree =
  \ (@ a17_ab4m) ($dShow_ab4n :: Show a17_ab4m) ->
    GHC.Show.D:Show
      @ (Tree a17_ab4m)
      (Main.$fShowTree_$cshowsPrec @ a17_ab4m $dShow_ab4n)
      (Main.$fShowTree_$cshow @ a17_ab4m $dShow_ab4n)
      (Main.$fShowTree_$cshowList @ a17_ab4m $dShow_ab4n)

Main.$fGenericTree_$cto
  :: forall a_ab2w x_ab3s. Rep (Tree a_ab2w) x_ab3s -> Tree a_ab2w
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab2w)
                 (@ x_ab3t)
                 (ds_dc1P [Occ=Once] :: Rep (Tree a17_ab2w) x_ab3t) ->
                 case ds_dc1P
                      `cast` (Sub (Main.Rep_Tree[0] <a17_ab2w>_N)
                              ; GHC.Generics.NTCo:M1[0]
                                  <D>_P
                                  <Main.D1Tree>_P
                                  <M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w))
                                   :+: C1
                                         Main.C1_1Tree
                                         (S1 NoSelector (Rec0 (Tree a17_ab2w))
                                          :*: S1 NoSelector (Rec0 (Tree a17_ab2w)))>_R <x_ab3t>_N
                              :: Rep (Tree a17_ab2w) x_ab3t
                                 ~R# (:+:)
                                       (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)))
                                       (C1
                                          Main.C1_1Tree
                                          (S1 NoSelector (Rec0 (Tree a17_ab2w))
                                           :*: S1 NoSelector (Rec0 (Tree a17_ab2w))))
                                       x_ab3t)
                 of _ [Occ=Dead] {
                   L1 ds1_dc1Y [Occ=Once] ->
                     Main.Leaf
                       @ a17_ab2w
                       (ds1_dc1Y
                        `cast` (GHC.Generics.NTCo:M1[0]
                                  <C>_P <Main.C1_0Tree>_P <M1 S NoSelector (K1 R a17_ab2w)>_R
                                ; GHC.Generics.NTCo:M1[0]
                                    <S>_P <NoSelector>_P <K1 R a17_ab2w>_R <x_ab3t>_N
                                ; GHC.Generics.NTCo:K1[0] <R>_P <a17_ab2w>_R <x_ab3t>_P
                                :: M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)) x_ab3t
                                   ~R# a17_ab2w));
                   R1 ds1_dc1S [Occ=Once] ->
                     case ds1_dc1S
                          `cast` (GHC.Generics.NTCo:M1[0]
                                    <C>_P
                                    <Main.C1_1Tree>_P
                                    <M1 S NoSelector (K1 R (Tree a17_ab2w))
                                     :*: M1 S NoSelector (K1 R (Tree a17_ab2w))>_R <x_ab3t>_N
                                  :: M1
                                       C
                                       Main.C1_1Tree
                                       (M1 S NoSelector (K1 R (Tree a17_ab2w))
                                        :*: M1 S NoSelector (K1 R (Tree a17_ab2w)))
                                       x_ab3t
                                     ~R# (:*:)
                                           (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                                           (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                                           x_ab3t)
                     of _ [Occ=Dead] { :*: ds2_dc1U [Occ=Once] ds3_dc1V [Occ=Once] ->
                     Main.Branch
                       @ a17_ab2w
                       (ds2_dc1U
                        `cast` (GHC.Generics.NTCo:M1[0]
                                  <S>_P <NoSelector>_P <K1 R (Tree a17_ab2w)>_R <x_ab3t>_N
                                ; GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab3t>_P
                                :: M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab3t
                                   ~R# Tree a17_ab2w))
                       (ds3_dc1V
                        `cast` (GHC.Generics.NTCo:M1[0]
                                  <S>_P <NoSelector>_P <K1 R (Tree a17_ab2w)>_R <x_ab3t>_N
                                ; GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab3t>_P
                                :: M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab3t
                                   ~R# Tree a17_ab2w))
                     }
                 }}]
Main.$fGenericTree_$cto =
  \ (@ a17_ab2w)
    (@ x_ab3t)
    (ds_dc1P :: Rep (Tree a17_ab2w) x_ab3t) ->
    case ds_dc1P
         `cast` (Sub (Main.Rep_Tree[0] <a17_ab2w>_N)
                 ; GHC.Generics.NTCo:M1[0]
                     <D>_P
                     <Main.D1Tree>_P
                     <M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w))
                      :+: C1
                            Main.C1_1Tree
                            (S1 NoSelector (Rec0 (Tree a17_ab2w))
                             :*: S1 NoSelector (Rec0 (Tree a17_ab2w)))>_R <x_ab3t>_N
                 :: Rep (Tree a17_ab2w) x_ab3t
                    ~R# (:+:)
                          (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)))
                          (C1
                             Main.C1_1Tree
                             (S1 NoSelector (Rec0 (Tree a17_ab2w))
                              :*: S1 NoSelector (Rec0 (Tree a17_ab2w))))
                          x_ab3t)
    of _ [Occ=Dead] {
      L1 ds1_dc1Y ->
        Main.Leaf
          @ a17_ab2w
          (ds1_dc1Y
           `cast` (GHC.Generics.NTCo:M1[0]
                     <C>_P <Main.C1_0Tree>_P <M1 S NoSelector (K1 R a17_ab2w)>_R
                   ; GHC.Generics.NTCo:M1[0]
                       <S>_P <NoSelector>_P <K1 R a17_ab2w>_R <x_ab3t>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <a17_ab2w>_R <x_ab3t>_P
                   :: M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)) x_ab3t
                      ~R# a17_ab2w));
      R1 ds1_dc1S ->
        case ds1_dc1S
             `cast` (GHC.Generics.NTCo:M1[0]
                       <C>_P
                       <Main.C1_1Tree>_P
                       <M1 S NoSelector (K1 R (Tree a17_ab2w))
                        :*: M1 S NoSelector (K1 R (Tree a17_ab2w))>_R <x_ab3t>_N
                     :: M1
                          C
                          Main.C1_1Tree
                          (M1 S NoSelector (K1 R (Tree a17_ab2w))
                           :*: M1 S NoSelector (K1 R (Tree a17_ab2w)))
                          x_ab3t
                        ~R# (:*:)
                              (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                              (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                              x_ab3t)
        of _ [Occ=Dead] { :*: ds2_dc1U ds3_dc1V ->
        Main.Branch
          @ a17_ab2w
          (ds2_dc1U
           `cast` (GHC.Generics.NTCo:M1[0]
                     <S>_P <NoSelector>_P <K1 R (Tree a17_ab2w)>_R <x_ab3t>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab3t>_P
                   :: M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab3t
                      ~R# Tree a17_ab2w))
          (ds3_dc1V
           `cast` (GHC.Generics.NTCo:M1[0]
                     <S>_P <NoSelector>_P <K1 R (Tree a17_ab2w)>_R <x_ab3t>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab3t>_P
                   :: M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab3t
                      ~R# Tree a17_ab2w))
        }
    }

Rec {
Main.$fBinaryTree2 [InlPrag=INLINE[0]]
  :: forall r_ace4.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success (Tree Int) r_ace4
     -> Data.Binary.Get.Internal.Decoder r_ace4
[GblId,
 Arity=2,
 Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ r_ace4)
                 (w_sdID [Occ=Once!] :: Data.ByteString.Internal.ByteString)
                 (w1_sdIE [Occ=Once]
                    :: Data.Binary.Get.Internal.Success (Tree Int) r_ace4) ->
                 case w_sdID
                 of _ [Occ=Dead]
                 { Data.ByteString.Internal.PS ww1_sdIH [Occ=Once]
                                               ww2_sdII [Occ=Once] ww3_sdIJ [Occ=Once]
                                               ww4_sdIK [Occ=Once] ->
                 Main.$wa @ r_ace4 ww1_sdIH ww2_sdII ww3_sdIJ ww4_sdIK w1_sdIE
                 }}]
Main.$fBinaryTree2 =
  \ (@ r_ace4)
    (w_sdID :: Data.ByteString.Internal.ByteString)
    (w1_sdIE :: Data.Binary.Get.Internal.Success (Tree Int) r_ace4) ->
    case w_sdID
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdIH ww2_sdII ww3_sdIJ
                                  ww4_sdIK ->
    Main.$wa @ r_ace4 ww1_sdIH ww2_sdII ww3_sdIJ ww4_sdIK w1_sdIE
    }

Main.$fBinaryTree_$s$cget :: Get (Tree Int)
[GblId,
 Arity=2,
 Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$fBinaryTree2
               `cast` (Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree Int>_R)
                       :: (forall r_acmC.
                           Data.ByteString.Internal.ByteString
                           -> Data.Binary.Get.Internal.Success (Tree Int) r_acmC
                           -> Data.Binary.Get.Internal.Decoder r_acmC)
                          ~R# Get (Tree Int))}]
Main.$fBinaryTree_$s$cget =
  Main.$fBinaryTree2
  `cast` (Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree Int>_R)
          :: (forall r_acmC.
              Data.ByteString.Internal.ByteString
              -> Data.Binary.Get.Internal.Success (Tree Int) r_acmC
              -> Data.Binary.Get.Internal.Decoder r_acmC)
             ~R# Get (Tree Int))

Main.$fBinaryTree_$s$fBinaryTree [InlPrag=[ALWAYS] CONLIKE]
  :: Binary (Tree Int)
[GblId,
 Str=DmdType m,
 Unf=DFun: \ ->
       binary-0.7.3.0:Data.Binary.Class.D:Binary TYPE Tree Int
                                                 Main.$fBinaryTree_$s$cput
                                                 Main.$fBinaryTree_$s$cget]
Main.$fBinaryTree_$s$fBinaryTree =
  binary-0.7.3.0:Data.Binary.Class.D:Binary
    @ (Tree Int) lvl10_rese lvl15_resk

Main.$s$fGBinary:*:3 :: Binary (Tree Int)
[GblId,
 Str=DmdType m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$fBinaryTree_$s$fBinaryTree}]
Main.$s$fGBinary:*:3 = Main.$fBinaryTree_$s$fBinaryTree

Main.$s$fGBinary:*:_$s$fGBinaryK1 [InlPrag=[ALWAYS] CONLIKE]
  :: forall i_abWP. GBinary (K1 i_abWP (Tree Int))
[GblId,
 Str=DmdType m,
 Unf=DFun: \ (@ i_abWP) ->
       binary-0.7.3.0:Data.Binary.Class.D:GBinary TYPE K1
                                                         i_abWP (Tree Int)
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1_$cgput
                                                    @ i_abWP @ (Tree Int) Main.$s$fGBinary:*:3
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1_$cgget
                                                    @ i_abWP @ (Tree Int) Main.$s$fGBinary:*:3]
Main.$s$fGBinary:*:_$s$fGBinaryK1 =
  \ (@ i_XbWR) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (K1 i_XbWR (Tree Int))
      (lvl12_resg @ i_XbWR)
      ((a11_resn @ i_XbWR)
       `cast` (forall t_aczW.
               Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0]
                    <K1 i_XbWR (Tree Int) t_aczW>_R)
               :: (forall t_aczW r_acmC.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success
                        (K1 i_XbWR (Tree Int) t_aczW) r_acmC
                   -> Data.Binary.Get.Internal.Decoder r_acmC)
                  ~R# (forall t_aczW. Get (K1 i_XbWR (Tree Int) t_aczW))))

Main.$s$fGBinary:*:2 :: GBinary (K1 R (Tree Int))
[GblId,
 Str=DmdType m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$s$fGBinary:*:_$s$fGBinaryK1 @ R}]
Main.$s$fGBinary:*:2 = Main.$s$fGBinary:*:_$s$fGBinaryK1 @ R

Main.$s$fGBinary:*:_$s$fGBinaryM1 [InlPrag=[ALWAYS] CONLIKE]
  :: forall i_abWI c_abWJ.
     GBinary (M1 i_abWI c_abWJ (K1 R (Tree Int)))
[GblId,
 Str=DmdType m,
 Unf=DFun: \ (@ i_abWI) (@ c_abWJ) ->
       binary-0.7.3.0:Data.Binary.Class.D:GBinary TYPE M1
                                                         i_abWI c_abWJ (K1 R (Tree Int))
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1_$cgput
                                                    @ i_abWI
                                                    @ c_abWJ
                                                    @ (K1 R (Tree Int))
                                                    Main.$s$fGBinary:*:2
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1_$cgget
                                                    @ i_abWI
                                                    @ c_abWJ
                                                    @ (K1 R (Tree Int))
                                                    Main.$s$fGBinary:*:2]
Main.$s$fGBinary:*:_$s$fGBinaryM1 =
  \ (@ i_XbWL) (@ c_XbWN) ->
    binary-0.7.3.0:Data.Binary.Class.D:GBinary
      @ (M1 i_XbWL c_XbWN (K1 R (Tree Int)))
      (lvl11_resf @ i_XbWL @ c_XbWN)
      ((a10_resm @ i_XbWL @ c_XbWN)
       `cast` (forall t_aczv.
               Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0]
                    <M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_aczv>_R)
               :: (forall t_aczv r_acmC.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success
                        (M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_aczv) r_acmC
                   -> Data.Binary.Get.Internal.Decoder r_acmC)
                  ~R# (forall t_aczv.
                       Get (M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_aczv))))

Main.$s$fGBinary:*:1 :: GBinary (M1 S NoSelector (Rec0 (Tree Int)))
[GblId,
 Str=DmdType m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$s$fGBinary:*:_$s$fGBinaryM1 @ S @ NoSelector}]
Main.$s$fGBinary:*:1 =
  Main.$s$fGBinary:*:_$s$fGBinaryM1 @ S @ NoSelector

Main.$s$fGBinary:*: [InlPrag=[ALWAYS] CONLIKE]
  :: GBinary
       (M1 S NoSelector (Rec0 (Tree Int))
        :*: M1 S NoSelector (Rec0 (Tree Int)))
[GblId,
 Str=DmdType m,
 Unf=DFun: \ ->
       binary-0.7.3.0:Data.Binary.Class.D:GBinary TYPE M1
                                                         S NoSelector (Rec0 (Tree Int))
                                                       :*: M1 S NoSelector (Rec0 (Tree Int))
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*:_$cgput
                                                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                                                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                                                    Main.$s$fGBinary:*:1
                                                    Main.$s$fGBinary:*:1
                                                  binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*:_$cgget
                                                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                                                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                                                    Main.$s$fGBinary:*:1
                                                    Main.$s$fGBinary:*:1]
Main.$s$fGBinary:*: =
  binary-0.7.3.0:Data.Binary.Class.D:GBinary
    @ (M1 S NoSelector (Rec0 (Tree Int))
       :*: M1 S NoSelector (Rec0 (Tree Int)))
    lvl13_resh
    (a12_resp
     `cast` (forall t_acAS.
             Sym
               (Data.Binary.Get.Internal.NTCo:Get[0]
                  <(:*:)
                     (M1 S NoSelector (Rec0 (Tree Int)))
                     (M1 S NoSelector (Rec0 (Tree Int)))
                     t_acAS>_R)
             :: (forall t_acAS r_acmC.
                 Data.ByteString.Internal.ByteString
                 -> Data.Binary.Get.Internal.Success
                      ((:*:)
                         (M1 S NoSelector (Rec0 (Tree Int)))
                         (M1 S NoSelector (Rec0 (Tree Int)))
                         t_acAS)
                      r_acmC
                 -> Data.Binary.Get.Internal.Decoder r_acmC)
                ~R# (forall t_acAS.
                     Get
                       ((:*:)
                          (M1 S NoSelector (Rec0 (Tree Int)))
                          (M1 S NoSelector (Rec0 (Tree Int)))
                          t_acAS))))

Main.$s$fGBinary:+:1
  :: GBinary
       (S1 NoSelector (Rec0 (Tree Int))
        :*: S1 NoSelector (Rec0 (Tree Int)))
[GblId,
 Str=DmdType m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.$s$fGBinary:*:}]
Main.$s$fGBinary:+:1 = Main.$s$fGBinary:*:

Main.$s$fGBinary:+:_$s$fGSumM1 [InlPrag=[ALWAYS] CONLIKE]
  :: forall c_abXv.
     binary-0.7.3.0:Data.Binary.Generic.GSum
       (C1
          c_abXv
          (S1 NoSelector (Rec0 (Tree Int))
           :*: S1 NoSelector (Rec0 (Tree Int))))
[GblId,
 Str=DmdType m,
 Unf=DFun: \ (@ c_abXv) ->
       binary-0.7.3.0:Data.Binary.Generic.D:GSum TYPE C1
                                                        c_abXv
                                                        (S1 NoSelector (Rec0 (Tree Int))
                                                         :*: S1 NoSelector (Rec0 (Tree Int)))
                                                 binary-0.7.3.0:Data.Binary.Generic.$fGSumM1_$cgetSum
                                                   @ c_abXv
                                                   @ (S1 NoSelector (Rec0 (Tree Int))
                                                      :*: S1 NoSelector (Rec0 (Tree Int)))
                                                   Main.$s$fGBinary:+:1
                                                 binary-0.7.3.0:Data.Binary.Generic.$fGSumM1_$cputSum
                                                   @ c_abXv
                                                   @ (S1 NoSelector (Rec0 (Tree Int))
                                                      :*: S1 NoSelector (Rec0 (Tree Int)))
                                                   Main.$s$fGBinary:+:1]
Main.$s$fGBinary:+:_$s$fGSumM1 =
  \ (@ c_XbXx) ->
    binary-0.7.3.0:Data.Binary.Generic.D:GSum
      @ (C1
           c_XbXx
           (S1 NoSelector (Rec0 (Tree Int))
            :*: S1 NoSelector (Rec0 (Tree Int))))
      ((a9_resl @ c_XbXx)
       `cast` (forall word_aczk a17_aczl.
               <Ord word_aczk>_R
               -> <Num word_aczk>_R
               -> <Data.Bits.Bits word_aczk>_R
               -> <word_aczk>_R
               -> <word_aczk>_R
               -> Sym
                    (Data.Binary.Get.Internal.NTCo:Get[0]
                       <M1
                          C
                          c_XbXx
                          (S1 NoSelector (Rec0 (Tree Int))
                           :*: S1 NoSelector (Rec0 (Tree Int)))
                          a17_aczl>_R)
               :: (forall word_aczk a17_aczl.
                   (Ord word_aczk, Num word_aczk, Data.Bits.Bits word_aczk) =>
                   word_aczk
                   -> word_aczk
                   -> forall r_acmC.
                      Data.ByteString.Internal.ByteString
                      -> Data.Binary.Get.Internal.Success
                           (M1
                              C
                              c_XbXx
                              (S1 NoSelector (Rec0 (Tree Int))
                               :*: S1 NoSelector (Rec0 (Tree Int)))
                              a17_aczl)
                           r_acmC
                      -> Data.Binary.Get.Internal.Decoder r_acmC)
                  ~R# (forall word_aczk a17_aczl.
                       (Ord word_aczk, Num word_aczk, Data.Bits.Bits word_aczk) =>
                       word_aczk
                       -> word_aczk
                       -> Get
                            (M1
                               C
                               c_XbXx
                               (S1 NoSelector (Rec0 (Tree Int))
                                :*: S1 NoSelector (Rec0 (Tree Int)))
                               a17_aczl))))
      (lvl14_resj @ c_XbXx)

Main.$wa [InlPrag=[0], Occ=LoopBreaker]
  :: forall r_ace4.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success (Tree Int) r_ace4
     -> Data.Binary.Get.Internal.Decoder r_ace4
[GblId, Arity=5, Str=DmdType <L,U><L,U><L,U><L,U><L,C(C1(U))>]
Main.$wa =
  \ (@ r_ace4)
    (ww_sdIH :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdII :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdIJ :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdIK :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdIE :: Data.Binary.Get.Internal.Success (Tree Int) r_ace4) ->
    binary-0.7.3.0:Data.Binary.Generic.$wa
      @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
      @ (M1
           C
           Main.C1_1Tree
           (S1 NoSelector (Rec0 (Tree Int))
            :*: S1 NoSelector (Rec0 (Tree Int))))
      (Main.$s$fGBinary:+:_$s$fGSumM2 @ Main.C1_0Tree)
      (Main.$s$fGBinary:+:_$s$fGSumM1 @ Main.C1_1Tree)
      (__word 1)
      (__word 1)
      @ ghc-prim-0.4.0.0:GHC.Prim.Any
      @ r_ace4
      ww_sdIH
      ww1_sdII
      ww2_sdIJ
      ww3_sdIK
      (\ (i'1_acJc :: Data.ByteString.Internal.ByteString)
         (a17_acJd [OS=OneShot]
            :: (:+:)
                 (C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
                 (C1
                    Main.C1_1Tree
                    (S1 NoSelector (Rec0 (Tree Int))
                     :*: S1 NoSelector (Rec0 (Tree Int))))
                 ghc-prim-0.4.0.0:GHC.Prim.Any) ->
         w_sdIE
           i'1_acJc
           (Main.$fGenericTree_$cto
              @ Int
              @ ghc-prim-0.4.0.0:GHC.Prim.Any
              (a17_acJd
               `cast` (Sym
                         (GHC.Generics.NTCo:M1[0]
                            <D>_P
                            <Main.D1Tree>_P
                            <C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int))
                             :+: C1
                                   Main.C1_1Tree
                                   (S1 NoSelector (Rec0 (Tree Int))
                                    :*: S1 NoSelector (Rec0 (Tree Int)))>_R)
                       ; Sub
                           (Sym (Main.Rep_Tree[0] <Int>_N)) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                       :: (:+:)
                            (C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
                            (C1
                               Main.C1_1Tree
                               (S1 NoSelector (Rec0 (Tree Int))
                                :*: S1 NoSelector (Rec0 (Tree Int))))
                            ghc-prim-0.4.0.0:GHC.Prim.Any
                          ~R# Rep (Tree Int) ghc-prim-0.4.0.0:GHC.Prim.Any))))

Main.$fBinaryTree_$s$cput [Occ=LoopBreaker] :: Tree Int -> Put
[GblId, Arity=1, Str=DmdType <S,1*U>]
Main.$fBinaryTree_$s$cput =
  \ (eta_acdA :: Tree Int) ->
    case eta_acdA of _ [Occ=Dead] {
      Leaf g1_aaHO ->
        binary-0.7.3.0:Data.Binary.Generic.$w$cgput
          @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
          @ (M1
               C
               Main.C1_1Tree
               (S1 NoSelector (Rec0 (Tree Int))
                :*: S1 NoSelector (Rec0 (Tree Int))))
          (Main.$s$fGBinary:+:_$s$fGSumM2 @ Main.C1_0Tree)
          (Main.$s$fGBinary:+:_$s$fGSumM1 @ Main.C1_1Tree)
          (__word 1)
          (__word 1)
          @ ghc-prim-0.4.0.0:GHC.Prim.Any
          (GHC.Generics.L1
             @ (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R Int)))
             @ (C1
                  Main.C1_1Tree
                  (S1 NoSelector (Rec0 (Tree Int))
                   :*: S1 NoSelector (Rec0 (Tree Int))))
             @ ghc-prim-0.4.0.0:GHC.Prim.Any
             (g1_aaHO
              `cast` (Sym
                        (GHC.Generics.NTCo:K1[0]
                           <R>_P <Int>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                      ; Sym (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R Int>_R)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0]
                               <C>_P
                               <Main.C1_0Tree>_P
                               <M1 S NoSelector (K1 R Int)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                      :: Int
                         ~R# M1
                               C
                               Main.C1_0Tree
                               (M1 S NoSelector (K1 R Int))
                               ghc-prim-0.4.0.0:GHC.Prim.Any)));
      Branch g1_aaHP g2_aaHQ ->
        binary-0.7.3.0:Data.Binary.Generic.$w$cgput
          @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
          @ (M1
               C
               Main.C1_1Tree
               (S1 NoSelector (Rec0 (Tree Int))
                :*: S1 NoSelector (Rec0 (Tree Int))))
          (Main.$s$fGBinary:+:_$s$fGSumM2 @ Main.C1_0Tree)
          (Main.$s$fGBinary:+:_$s$fGSumM1 @ Main.C1_1Tree)
          (__word 1)
          (__word 1)
          @ ghc-prim-0.4.0.0:GHC.Prim.Any
          (GHC.Generics.R1
             @ (C1 Main.C1_0Tree (S1 NoSelector (Rec0 Int)))
             @ (M1
                  C
                  Main.C1_1Tree
                  (M1 S NoSelector (K1 R (Tree Int))
                   :*: M1 S NoSelector (K1 R (Tree Int))))
             @ ghc-prim-0.4.0.0:GHC.Prim.Any
             ((GHC.Generics.:*:
                 @ (M1 S NoSelector (K1 R (Tree Int)))
                 @ (M1 S NoSelector (K1 R (Tree Int)))
                 @ ghc-prim-0.4.0.0:GHC.Prim.Any
                 (g1_aaHP
                  `cast` (Sym
                            (GHC.Generics.NTCo:K1[0]
                               <R>_P <Tree Int>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                          ; Sym
                              (GHC.Generics.NTCo:M1[0]
                                 <S>_P
                                 <NoSelector>_P
                                 <K1 R (Tree Int)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                          :: Tree Int
                             ~R# M1
                                   S NoSelector (K1 R (Tree Int)) ghc-prim-0.4.0.0:GHC.Prim.Any))
                 (g2_aaHQ
                  `cast` (Sym
                            (GHC.Generics.NTCo:K1[0]
                               <R>_P <Tree Int>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                          ; Sym
                              (GHC.Generics.NTCo:M1[0]
                                 <S>_P
                                 <NoSelector>_P
                                 <K1 R (Tree Int)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                          :: Tree Int
                             ~R# M1
                                   S NoSelector (K1 R (Tree Int)) ghc-prim-0.4.0.0:GHC.Prim.Any)))
              `cast` (Sym
                        (GHC.Generics.NTCo:M1[0]
                           <C>_P
                           <Main.C1_1Tree>_P
                           <M1 S NoSelector (K1 R (Tree Int))
                            :*: M1
                                  S
                                  NoSelector
                                  (K1 R (Tree Int))>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                      :: (:*:)
                           (M1 S NoSelector (K1 R (Tree Int)))
                           (M1 S NoSelector (K1 R (Tree Int)))
                           ghc-prim-0.4.0.0:GHC.Prim.Any
                         ~R# M1
                               C
                               Main.C1_1Tree
                               (M1 S NoSelector (K1 R (Tree Int))
                                :*: M1 S NoSelector (K1 R (Tree Int)))
                               ghc-prim-0.4.0.0:GHC.Prim.Any)))
    }

lvl10_rese :: Tree Int -> Put
[GblId, Arity=1, Str=DmdType <S,1*U>]
lvl10_rese = Main.$fBinaryTree_$s$cput

lvl11_resf
  :: forall i_XbWL c_XbWN t_ac8d.
     M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_ac8d -> Put
[GblId, Arity=1, Str=DmdType <S,1*U>]
lvl11_resf =
  \ (@ i_XbWL)
    (@ c_XbWN)
    (@ t_aczA)
    (eta_aczB :: M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_aczA) ->
    Main.$fBinaryTree_$s$cput
      (eta_aczB
       `cast` (GHC.Generics.NTCo:M1[0]
                 <i_XbWL>_P <c_XbWN>_P <K1 R (Tree Int)>_R <t_aczA>_N
               ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_aczA>_P
               :: M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_aczA ~R# Tree Int))

lvl12_resg
  :: forall i_XbWR t_ac3B. K1 i_XbWR (Tree Int) t_ac3B -> Put
[GblId, Arity=1, Str=DmdType <S,1*U>]
lvl12_resg =
  \ (@ i_XbWR)
    (@ t_acA0)
    (eta_acA1 :: K1 i_XbWR (Tree Int) t_acA0) ->
    Main.$fBinaryTree_$s$cput
      (eta_acA1
       `cast` (GHC.Generics.NTCo:K1[0] <i_XbWR>_P <Tree Int>_R <t_acA0>_P
               :: K1 i_XbWR (Tree Int) t_acA0 ~R# Tree Int))

lvl13_resh
  :: forall t_acdi.
     (:*:)
       (M1 S NoSelector (Rec0 (Tree Int)))
       (M1 S NoSelector (Rec0 (Tree Int)))
       t_acdi
     -> Put
[GblId, Arity=1, Str=DmdType <S,1*U(1*U,1*U)>m]
lvl13_resh =
  \ (@ t_acdi)
    (w_sdIX
       :: (:*:)
            (M1 S NoSelector (Rec0 (Tree Int)))
            (M1 S NoSelector (Rec0 (Tree Int)))
            t_acdi) ->
    case w_sdIX of _ [Occ=Dead] { :*: ww1_sdJ0 ww2_sdJ1 ->
    let {
      a17_acB1 [Dmd=<L,U(1*U,C(U))>] :: Put
      [LclId, Str=DmdType]
      a17_acB1 =
        Main.$fBinaryTree_$s$cput
          (ww2_sdJ1
           `cast` (GHC.Generics.NTCo:M1[0]
                     <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <t_acdi>_N
                   ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acdi>_P
                   :: M1 S NoSelector (K1 R (Tree Int)) t_acdi ~R# Tree Int)) } in
    (Data.Binary.Put.PairS
       @ ()
       (case a17_acB1
             `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                     :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
        of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acB7 w'_acB8 ->
        b1_acB7
        })
       (let {
          f_acBa [Dmd=<L,C(U)>]
            :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                -> IO LBS.ByteString)
               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
               -> IO LBS.ByteString
          [LclId, Str=DmdType]
          f_acBa =
            case (Main.$fBinaryTree_$s$cput
                    (ww1_sdJ0
                     `cast` (GHC.Generics.NTCo:M1[0]
                               <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <t_acdi>_N
                             ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acdi>_P
                             :: M1 S NoSelector (K1 R (Tree Int)) t_acdi ~R# Tree Int)))
                 `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                         :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
            of _ [Occ=Dead] { Data.Binary.Put.PairS ds1_acBd w3_acBe ->
            w3_acBe
            `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                    :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                       ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                             -> IO LBS.ByteString)
                            -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                            -> IO LBS.ByteString))
            } } in
        (\ (x_acBg
              :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                 -> IO LBS.ByteString) ->
           f_acBa
             (case a17_acB1
                   `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                           :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
              of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acBj w'_acBk ->
              (w'_acBk
               `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                       :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                          ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString)
                               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString)))
                x_acBg
              }))
        `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString)
                    -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder)))
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

$wlvl1_resi
  :: forall c_XbXx w_acdd a1_acde.
     Binary w_acdd =>
     w_acdd
     -> C1
          c_XbXx
          (S1 NoSelector (Rec0 (Tree Int))
           :*: S1 NoSelector (Rec0 (Tree Int)))
          a1_acde
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
[GblId,
 Arity=3,
 Str=DmdType <L,1*U(1*C1(U(U,U)),A)><S,1*U><L,1*U(1*U,1*U)>]
$wlvl1_resi =
  \ (@ c_XbXx)
    (@ w_acdd)
    (@ a17_acde)
    (w1_sdIQ :: Binary w_acdd)
    (w2_sdIR :: w_acdd)
    (w3_sdIT
       :: C1
            c_XbXx
            (S1 NoSelector (Rec0 (Tree Int))
             :*: S1 NoSelector (Rec0 (Tree Int)))
            a17_acde) ->
    case w2_sdIR of code_acyS { __DEFAULT ->
    let {
      eta1_acyT [Dmd=<L,U(1*U,C(U))>] :: Data.Binary.Put.PutM ()
      [LclId, Str=DmdType]
      eta1_acyT =
        case w3_sdIT
             `cast` (GHC.Generics.NTCo:M1[0]
                       <C>_P
                       <c_XbXx>_P
                       <S1 NoSelector (Rec0 (Tree Int))
                        :*: S1 NoSelector (Rec0 (Tree Int))>_R <a17_acde>_N
                     :: M1
                          C
                          c_XbXx
                          (S1 NoSelector (Rec0 (Tree Int))
                           :*: S1 NoSelector (Rec0 (Tree Int)))
                          a17_acde
                        ~R# (:*:)
                              (S1 NoSelector (Rec0 (Tree Int)))
                              (S1 NoSelector (Rec0 (Tree Int)))
                              a17_acde)
        of _ [Occ=Dead] { :*: ww1_acB2 ww2_acB3 ->
        let {
          a18_acB1 [Dmd=<L,U(1*U,C(U))>] :: Put
          [LclId, Str=DmdType]
          a18_acB1 =
            Main.$fBinaryTree_$s$cput
              (ww2_acB3
               `cast` (GHC.Generics.NTCo:M1[0]
                         <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <a17_acde>_N
                       ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_acde>_P
                       :: M1 S NoSelector (K1 R (Tree Int)) a17_acde ~R# Tree Int)) } in
        (Data.Binary.Put.PairS
           @ ()
           (case a18_acB1
                 `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                         :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
            of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acB7 w'_acB8 ->
            b1_acB7
            })
           (let {
              f_acBa [Dmd=<L,C(U)>]
                :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString
              [LclId, Str=DmdType]
              f_acBa =
                case (Main.$fBinaryTree_$s$cput
                        (ww1_acB2
                         `cast` (GHC.Generics.NTCo:M1[0]
                                   <S>_P <NoSelector>_P <K1 R (Tree Int)>_R <a17_acde>_N
                                 ; GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_acde>_P
                                 :: M1 S NoSelector (K1 R (Tree Int)) a17_acde ~R# Tree Int)))
                     `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                             :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                of _ [Occ=Dead] { Data.Binary.Put.PairS ds1_acBd w4_acBe ->
                w4_acBe
                `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                        :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                           ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                 -> IO LBS.ByteString)
                                -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString))
                } } in
            (\ (x_acBg
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString) ->
               f_acBa
                 (case a18_acB1
                       `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                               :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                  of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acBj w'_acBk ->
                  (w'_acBk
                   `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                           :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                              ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                    -> IO LBS.ByteString)
                                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                   -> IO LBS.ByteString)))
                    x_acBg
                  }))
            `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                    :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                         -> IO LBS.ByteString)
                        -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder)))
        `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
        } } in
    let {
      eta_acyU [Dmd=<L,U(U,U)>] :: Data.Binary.Put.PutM ()
      [LclId, Str=DmdType]
      eta_acyU = put @ w_acdd w1_sdIQ code_acyS } in
    (# case eta_acyU of _ [Occ=Dead] { __DEFAULT ->
       case eta1_acyT
            `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
       of _ [Occ=Dead] { Data.Binary.Put.PairS x_acyY w'_acyZ ->
       x_acyY
       }
       },
       (\ (x_acz1
             :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                -> IO LBS.ByteString) ->
          case eta_acyU
               `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                       :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
          of _ [Occ=Dead] { Data.Binary.Put.PairS a18_acz4 w8_acz5 ->
          (w8_acz5
           `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                      ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                            -> IO LBS.ByteString)
                           -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           -> IO LBS.ByteString)))
            (case eta1_acyT
                  `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                          :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
             of _ [Occ=Dead] { Data.Binary.Put.PairS x1_acz9 w'_acza ->
             (w'_acza
              `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                      :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                         ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString)
                              -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              -> IO LBS.ByteString)))
               x_acz1
             })
          })
       `cast` (Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
               :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString)
                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }

lvl14_resj
  :: forall c_XbXx w_acdd a1_acde.
     (Num w_acdd, Data.Bits.Bits w_acdd, Binary w_acdd) =>
     w_acdd
     -> w_acdd
     -> C1
          c_XbXx
          (S1 NoSelector (Rec0 (Tree Int))
           :*: S1 NoSelector (Rec0 (Tree Int)))
          a1_acde
     -> Put
[GblId,
 Arity=6,
 Str=DmdType <L,A><L,A><L,1*U(1*C1(U(U,U)),A)><S,1*U><L,A><L,1*U(1*U,1*U)>m]
lvl14_resj =
  \ (@ c_XbXx)
    (@ w_acdd)
    (@ a17_acde)
    _ [Occ=Dead]
    _ [Occ=Dead]
    (w3_sdIQ :: Binary w_acdd)
    (w4_sdIR :: w_acdd)
    _ [Occ=Dead]
    (w6_sdIT
       :: C1
            c_XbXx
            (S1 NoSelector (Rec0 (Tree Int))
             :*: S1 NoSelector (Rec0 (Tree Int)))
            a17_acde) ->
    case $wlvl1_resi
           @ c_XbXx @ w_acdd @ a17_acde w3_sdIQ w4_sdIR w6_sdIT
    of _ [Occ=Dead] { (# ww1_sdL5, ww2_sdL6 #) ->
    (Data.Binary.Put.PairS @ () ww1_sdL5 ww2_sdL6)
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

lvl15_resk :: Get (Tree Int)
[GblId, Arity=2, Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>]
lvl15_resk =
  Main.$fBinaryTree2
  `cast` (Sym (Data.Binary.Get.Internal.NTCo:Get[0] <Tree Int>_R)
          :: (forall r_acmC.
              Data.ByteString.Internal.ByteString
              -> Data.Binary.Get.Internal.Success (Tree Int) r_acmC
              -> Data.Binary.Get.Internal.Decoder r_acmC)
             ~R# Get (Tree Int))

a9_resl
  :: forall c_XbXx word_acJj a1_acJk.
     (Ord word_acJj, Num word_acJj, Data.Bits.Bits word_acJj) =>
     word_acJj
     -> word_acJj
     -> forall r_acJq.
        Data.ByteString.Internal.ByteString
        -> Data.Binary.Get.Internal.Success
             (M1
                C
                c_XbXx
                (S1 NoSelector (Rec0 (Tree Int))
                 :*: S1 NoSelector (Rec0 (Tree Int)))
                a1_acJk)
             r_acJq
        -> Data.Binary.Get.Internal.Decoder r_acJq
[GblId,
 Arity=7,
 Str=DmdType <L,A><L,A><L,A><L,A><L,A><S,1*U(U,U,U,U)><L,C(C1(U))>]
a9_resl =
  \ (@ c_XbXx)
    (@ word_XcR8)
    (@ a17_XcRa)
    _ [Occ=Dead]
    _ [Occ=Dead]
    _ [Occ=Dead]
    _ [Occ=Dead]
    _ [Occ=Dead]
    (@ r_XcRm)
    (eta_XcRo :: Data.ByteString.Internal.ByteString)
    (eta1_XcRq
       :: Data.Binary.Get.Internal.Success
            (M1
               C
               c_XbXx
               (S1 NoSelector (Rec0 (Tree Int))
                :*: S1 NoSelector (Rec0 (Tree Int)))
               a17_XcRa)
            r_XcRm) ->
    case eta_XcRo
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdIH ww2_sdII ww3_sdIJ
                                  ww4_sdIK ->
    Main.$wa
      @ r_XcRm
      ww1_sdIH
      ww2_sdII
      ww3_sdIJ
      ww4_sdIK
      (\ (i'1_acFC :: Data.ByteString.Internal.ByteString)
         (a18_acFD [OS=OneShot] :: Tree Int) ->
         case i'1_acFC
         of _ [Occ=Dead]
         { Data.ByteString.Internal.PS ww6_XdNI ww7_XdNK ww8_XdNM
                                       ww9_XdNO ->
         Main.$wa
           @ r_XcRm
           ww6_XdNI
           ww7_XdNK
           ww8_XdNM
           ww9_XdNO
           (\ (i'2_XcKQ :: Data.ByteString.Internal.ByteString)
              (a19_XcKS [OS=OneShot] :: Tree Int) ->
              eta1_XcRq
                i'2_XcKQ
                ((GHC.Generics.:*:
                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                    @ (M1 S NoSelector (Rec0 (Tree Int)))
                    @ a17_XcRa
                    (a18_acFD
                     `cast` (Sym
                               (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_XcRa>_P)
                             ; Sym
                                 (GHC.Generics.NTCo:M1[0]
                                    <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <a17_XcRa>_N
                             :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) a17_XcRa))
                    (a19_XcKS
                     `cast` (Sym
                               (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <a17_XcRa>_P)
                             ; Sym
                                 (GHC.Generics.NTCo:M1[0]
                                    <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <a17_XcRa>_N
                             :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) a17_XcRa)))
                 `cast` (Sym
                           (GHC.Generics.NTCo:M1[0]
                              <C>_P
                              <c_XbXx>_P
                              <S1 NoSelector (Rec0 (Tree Int))
                               :*: S1 NoSelector (Rec0 (Tree Int))>_R) <a17_XcRa>_N
                         :: (:*:)
                              (S1 NoSelector (Rec0 (Tree Int)))
                              (S1 NoSelector (Rec0 (Tree Int)))
                              a17_XcRa
                            ~R# M1
                                  C
                                  c_XbXx
                                  (S1 NoSelector (Rec0 (Tree Int))
                                   :*: S1 NoSelector (Rec0 (Tree Int)))
                                  a17_XcRa)))
         })
    }

a10_resm
  :: forall i_XbWL c_XbWN t_acJ8 r_acJ9.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          (M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_acJ8) r_acJ9
     -> Data.Binary.Get.Internal.Decoder r_acJ9
[GblId, Arity=2, Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>]
a10_resm =
  \ (@ i_XbWL)
    (@ c_XbWN)
    (@ t_XcRn)
    (@ r_XcRp)
    (eta_XcRr :: Data.ByteString.Internal.ByteString)
    (eta1_XcRt
       :: Data.Binary.Get.Internal.Success
            (M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_XcRn) r_XcRp) ->
    case eta_XcRr
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdIH ww2_sdII ww3_sdIJ
                                  ww4_sdIK ->
    Main.$wa
      @ r_XcRp
      ww1_sdIH
      ww2_sdII
      ww3_sdIJ
      ww4_sdIK
      (\ (i'1_acFC :: Data.ByteString.Internal.ByteString)
         (a17_acFD [OS=OneShot] :: Tree Int) ->
         eta1_XcRt
           i'1_acFC
           (a17_acFD
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_XcRn>_P)
                    ; Sym
                        (GHC.Generics.NTCo:M1[0]
                           <i_XbWL>_P <c_XbWN>_P <K1 R (Tree Int)>_R) <t_XcRn>_N
                    :: Tree Int ~R# M1 i_XbWL c_XbWN (K1 R (Tree Int)) t_XcRn)))
    }

a11_resn
  :: forall i_XbWR t_acFy r_acFz.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          (K1 i_XbWR (Tree Int) t_acFy) r_acFz
     -> Data.Binary.Get.Internal.Decoder r_acFz
[GblId, Arity=2, Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>]
a11_resn =
  \ (@ i_XbWR)
    (@ t_XcNQ)
    (@ r_XcNS)
    (eta_XcNU :: Data.ByteString.Internal.ByteString)
    (eta1_XcNW
       :: Data.Binary.Get.Internal.Success
            (K1 i_XbWR (Tree Int) t_XcNQ) r_XcNS) ->
    case eta_XcNU
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdIH ww2_sdII ww3_sdIJ
                                  ww4_sdIK ->
    Main.$wa
      @ r_XcNS
      ww1_sdIH
      ww2_sdII
      ww3_sdIJ
      ww4_sdIK
      (\ (i'1_acFC :: Data.ByteString.Internal.ByteString)
         (a17_acFD [OS=OneShot] :: Tree Int) ->
         eta1_XcNW
           i'1_acFC
           (a17_acFD
            `cast` (Sym
                      (GHC.Generics.NTCo:K1[0] <i_XbWR>_P <Tree Int>_R <t_XcNQ>_P)
                    :: Tree Int ~R# K1 i_XbWR (Tree Int) t_XcNQ)))
    }

$wa11_reso
  :: forall t_acNp r_acNq.
     ghc-prim-0.4.0.0:GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> Data.Binary.Get.Internal.Success
          ((:*:)
             (M1 S NoSelector (Rec0 (Tree Int)))
             (M1 S NoSelector (Rec0 (Tree Int)))
             t_acNp)
          r_acNq
     -> Data.Binary.Get.Internal.Decoder r_acNq
[GblId, Arity=5, Str=DmdType <L,U><L,U><L,U><L,U><L,C(C1(U))>]
$wa11_reso =
  \ (@ t_acNp)
    (@ r_acNq)
    (ww_sdJa :: ghc-prim-0.4.0.0:GHC.Prim.Addr#)
    (ww1_sdJb :: GHC.ForeignPtr.ForeignPtrContents)
    (ww2_sdJc :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (ww3_sdJd :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (w_sdJ7
       :: Data.Binary.Get.Internal.Success
            ((:*:)
               (M1 S NoSelector (Rec0 (Tree Int)))
               (M1 S NoSelector (Rec0 (Tree Int)))
               t_acNp)
            r_acNq) ->
    Main.$wa
      @ r_acNq
      ww_sdJa
      ww1_sdJb
      ww2_sdJc
      ww3_sdJd
      (\ (i'1_acFC :: Data.ByteString.Internal.ByteString)
         (a17_acFD [OS=OneShot] :: Tree Int) ->
         case i'1_acFC
         of _ [Occ=Dead]
         { Data.ByteString.Internal.PS ww5_XdNF ww6_XdNH ww7_XdNJ
                                       ww8_XdNL ->
         Main.$wa
           @ r_acNq
           ww5_XdNF
           ww6_XdNH
           ww7_XdNJ
           ww8_XdNL
           (\ (i'2_XcKL :: Data.ByteString.Internal.ByteString)
              (a18_XcKN [OS=OneShot] :: Tree Int) ->
              w_sdJ7
                i'2_XcKL
                (GHC.Generics.:*:
                   @ (M1 S NoSelector (Rec0 (Tree Int)))
                   @ (M1 S NoSelector (Rec0 (Tree Int)))
                   @ t_acNp
                   (a17_acFD
                    `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acNp>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <t_acNp>_N
                            :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) t_acNp))
                   (a18_XcKN
                    `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <Tree Int>_R <t_acNp>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P <NoSelector>_P <K1 R (Tree Int)>_R) <t_acNp>_N
                            :: Tree Int ~R# M1 S NoSelector (K1 R (Tree Int)) t_acNp))))
         })

a12_resp
  :: forall t_acNp r_acNq.
     Data.ByteString.Internal.ByteString
     -> Data.Binary.Get.Internal.Success
          ((:*:)
             (M1 S NoSelector (Rec0 (Tree Int)))
             (M1 S NoSelector (Rec0 (Tree Int)))
             t_acNp)
          r_acNq
     -> Data.Binary.Get.Internal.Decoder r_acNq
[GblId, Arity=2, Str=DmdType <S,1*U(U,U,U,U)><L,C(C1(U))>]
a12_resp =
  \ (@ t_acNp)
    (@ r_acNq)
    (w_sdJ6 :: Data.ByteString.Internal.ByteString)
    (w1_sdJ7
       :: Data.Binary.Get.Internal.Success
            ((:*:)
               (M1 S NoSelector (Rec0 (Tree Int)))
               (M1 S NoSelector (Rec0 (Tree Int)))
               t_acNp)
            r_acNq) ->
    case w_sdJ6
    of _ [Occ=Dead]
    { Data.ByteString.Internal.PS ww1_sdJa ww2_sdJb ww3_sdJc
                                  ww4_sdJd ->
    $wa11_reso
      @ t_acNp @ r_acNq ww1_sdJa ww2_sdJb ww3_sdJc ww4_sdJd w1_sdJ7
    }
end Rec }

lvl18_resy
  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           LBS.ByteString #)
[GblId, Arity=2, Caf=NoCafRefs, Str=DmdType]
lvl18_resy =
  \ (w1_acNQ :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
    (w2_acNR [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case w1_acNQ
    of _ [Occ=Dead]
    { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer ww1_acNV ww2_acNW
                                                     ww3_acNX ww4_acNY ww5_acNZ ->
    case ww4_acNY of wild_adug {
      __DEFAULT ->
        (# w2_acNR,
           Data.ByteString.Lazy.Internal.Chunk
             ww1_acNV
             ww2_acNW
             ww3_acNX
             wild_adug
             Data.ByteString.Lazy.Internal.Empty #);
      0 -> (# w2_acNR, Data.ByteString.Lazy.Internal.Empty #)
    }
    }

Rec {
Main.$fBinaryTree [InlPrag=[ALWAYS] CONLIKE]
  :: forall a_aaHM. Binary a_aaHM => Binary (Tree a_aaHM)
[GblId[DFunId],
 Arity=1,
 Str=DmdType <L,U(C(U),C(C1(U)))>m,
 Unf=DFun: \ (@ a17_ab5P) ($dBinary_ab5Q :: Binary a17_ab5P) ->
       binary-0.7.3.0:Data.Binary.Class.D:Binary TYPE Tree a17_ab5P
                                                 Main.$fBinaryTree_$cput @ a17_ab5P $dBinary_ab5Q
                                                 Main.$fBinaryTree_$cget @ a17_ab5P $dBinary_ab5Q]
Main.$fBinaryTree =
  \ (@ a17_ab5P) ($dBinary_ab5Q :: Binary a17_ab5P) ->
    binary-0.7.3.0:Data.Binary.Class.D:Binary
      @ (Tree a17_ab5P)
      (Main.$fBinaryTree_$cput @ a17_ab5P $dBinary_ab5Q)
      (Main.$fBinaryTree_$cget @ a17_ab5P $dBinary_ab5Q)

Main.$fBinaryTree_$cget [Occ=LoopBreaker]
  :: forall a_ab5P. Binary a_ab5P => Get (Tree a_ab5P)
[GblId, Arity=1, Str=DmdType <L,U(C(U),C(C1(U)))>]
Main.$fBinaryTree_$cget =
  \ (@ a17_ab5P) ($dBinary_ab5Q :: Binary a17_ab5P) ->
    let {
      $dGBinary_scx3 [Dmd=<L,U(C(U),C(C1(U)))>]
        :: GBinary (K1 R a17_ab5P)
      [LclId, Str=DmdType]
      $dGBinary_scx3 =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ a17_ab5P $dBinary_ab5Q } in
    let {
      $dGBinary1_scx2 [Dmd=<L,U(C(U(U,U)),C(C1(U)))>]
        :: GBinary (M1 S NoSelector (Rec0 a17_ab5P))
      [LclId, Str=DmdType]
      $dGBinary1_scx2 =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R a17_ab5P) $dGBinary_scx3 } in
    let {
      a18_scMw [Dmd=<L,U(C(C1(C1(C1(C1(C1(C1(U))))))),A)>]
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1 Main.C1_0Tree (M1 S NoSelector (Rec0 a17_ab5P)))
      [LclId, Str=DmdType]
      a18_scMw =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_0Tree
          @ (M1 S NoSelector (Rec0 a17_ab5P))
          $dGBinary1_scx2 } in
    let {
      $dBinary1_scx1 [Dmd=<L,U(C(U),C(C1(U)))>] :: Binary (Tree a17_ab5P)
      [LclId, Str=DmdType]
      $dBinary1_scx1 = Main.$fBinaryTree @ a17_ab5P $dBinary_ab5Q } in
    let {
      $dGBinary2_scx0 [Dmd=<L,U(C(U),C(C1(U)))>]
        :: GBinary (K1 R (Tree a17_ab5P))
      [LclId, Str=DmdType]
      $dGBinary2_scx0 =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ (Tree a17_ab5P) $dBinary1_scx1 } in
    let {
      $dGBinary3_scwZ [Dmd=<L,U(C(U(U,U)),U)>]
        :: GBinary (M1 S NoSelector (Rec0 (Tree a17_ab5P)))
      [LclId, Str=DmdType]
      $dGBinary3_scwZ =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R (Tree a17_ab5P)) $dGBinary2_scx0 } in
    let {
      $dGBinary4_scwY [Dmd=<L,U(C(U(U,U)),C(C1(U)))>]
        :: GBinary
             (S1 NoSelector (Rec0 (Tree a17_ab5P))
              :*: S1 NoSelector (Rec0 (Tree a17_ab5P)))
      [LclId, Str=DmdType]
      $dGBinary4_scwY =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*:
          @ (M1 S NoSelector (Rec0 (Tree a17_ab5P)))
          @ (M1 S NoSelector (Rec0 (Tree a17_ab5P)))
          $dGBinary3_scwZ
          $dGBinary3_scwZ } in
    let {
      a19_scMx [Dmd=<L,U(C(C1(C1(C1(C1(C1(C1(U))))))),A)>]
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1
                Main.C1_1Tree
                (S1 NoSelector (Rec0 (Tree a17_ab5P))
                 :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
      [LclId, Str=DmdType]
      a19_scMx =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_1Tree
          @ (S1 NoSelector (Rec0 (Tree a17_ab5P))
             :*: S1 NoSelector (Rec0 (Tree a17_ab5P)))
          $dGBinary4_scwY } in
    (\ (@ r_XclY)
       (i_Xcm0 :: Data.ByteString.Internal.ByteString)
       (ks_Xcm2
          :: Data.Binary.Get.Internal.Success (Tree a17_ab5P) r_XclY) ->
       case i_Xcm0
       of _ [Occ=Dead]
       { Data.ByteString.Internal.PS ww5_acN0 ww6_acN1 ww7_acN2
                                     ww8_acN3 ->
       binary-0.7.3.0:Data.Binary.Generic.$wa
         @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab5P)))
         @ (M1
              C
              Main.C1_1Tree
              (S1 NoSelector (Rec0 (Tree a17_ab5P))
               :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
         a18_scMw
         a19_scMx
         (__word 1)
         (__word 1)
         @ ghc-prim-0.4.0.0:GHC.Prim.Any
         @ r_XclY
         ww5_acN0
         ww6_acN1
         ww7_acN2
         ww8_acN3
         (\ (i'1_acJc :: Data.ByteString.Internal.ByteString)
            (a20_acJd [OS=OneShot]
               :: (:+:)
                    (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab5P)))
                    (C1
                       Main.C1_1Tree
                       (S1 NoSelector (Rec0 (Tree a17_ab5P))
                        :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
                    ghc-prim-0.4.0.0:GHC.Prim.Any) ->
            ks_Xcm2
              i'1_acJc
              (Main.$fGenericTree_$cto
                 @ a17_ab5P
                 @ ghc-prim-0.4.0.0:GHC.Prim.Any
                 (a20_acJd
                  `cast` (Sym
                            (GHC.Generics.NTCo:M1[0]
                               <D>_P
                               <Main.D1Tree>_P
                               <C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab5P))
                                :+: C1
                                      Main.C1_1Tree
                                      (S1 NoSelector (Rec0 (Tree a17_ab5P))
                                       :*: S1 NoSelector (Rec0 (Tree a17_ab5P)))>_R)
                          ; Sub
                              (Sym
                                 (Main.Rep_Tree[0] <a17_ab5P>_N)) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                          :: (:+:)
                               (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab5P)))
                               (C1
                                  Main.C1_1Tree
                                  (S1 NoSelector (Rec0 (Tree a17_ab5P))
                                   :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
                               ghc-prim-0.4.0.0:GHC.Prim.Any
                             ~R# Rep (Tree a17_ab5P) ghc-prim-0.4.0.0:GHC.Prim.Any))))
       })
    `cast` (Sym
              (Data.Binary.Get.Internal.NTCo:Get[0] <Tree a17_ab5P>_R)
            :: (forall r_acmC.
                Data.ByteString.Internal.ByteString
                -> Data.Binary.Get.Internal.Success (Tree a17_ab5P) r_acmC
                -> Data.Binary.Get.Internal.Decoder r_acmC)
               ~R# Get (Tree a17_ab5P))

Main.$fBinaryTree_$cput [Occ=LoopBreaker]
  :: forall a_ab5P. Binary a_ab5P => Tree a_ab5P -> Put
[GblId, Arity=1, Str=DmdType <L,U(C(U),C(C1(U)))>]
Main.$fBinaryTree_$cput =
  \ (@ a17_ab5P) ($dBinary_ab5Q :: Binary a17_ab5P) ->
    let {
      $dGBinary_scxf [Dmd=<L,U(C(U),C(C1(U)))>]
        :: GBinary (K1 R a17_ab5P)
      [LclId, Str=DmdType]
      $dGBinary_scxf =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ a17_ab5P $dBinary_ab5Q } in
    let {
      $dGBinary1_scxe [Dmd=<L,U(C(U(U,U)),C(C1(U)))>]
        :: GBinary (M1 S NoSelector (Rec0 a17_ab5P))
      [LclId, Str=DmdType]
      $dGBinary1_scxe =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R a17_ab5P) $dGBinary_scxf } in
    let {
      a18_scN8 [Dmd=<L,U(A,C(C1(C1(C1(C1(C1(U(U,U))))))))>]
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1 Main.C1_0Tree (M1 S NoSelector (Rec0 a17_ab5P)))
      [LclId, Str=DmdType]
      a18_scN8 =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_0Tree
          @ (M1 S NoSelector (Rec0 a17_ab5P))
          $dGBinary1_scxe } in
    let {
      $dBinary1_scxd [Dmd=<L,U(C(U),C(C1(U)))>] :: Binary (Tree a17_ab5P)
      [LclId, Str=DmdType]
      $dBinary1_scxd = Main.$fBinaryTree @ a17_ab5P $dBinary_ab5Q } in
    let {
      $dGBinary2_scxc [Dmd=<L,U(C(U),C(C1(U)))>]
        :: GBinary (K1 R (Tree a17_ab5P))
      [LclId, Str=DmdType]
      $dGBinary2_scxc =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1
          @ R @ (Tree a17_ab5P) $dBinary1_scxd } in
    let {
      $dGBinary3_scxb [Dmd=<L,U(C(U(U,U)),U)>]
        :: GBinary (M1 S NoSelector (Rec0 (Tree a17_ab5P)))
      [LclId, Str=DmdType]
      $dGBinary3_scxb =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1
          @ S @ NoSelector @ (K1 R (Tree a17_ab5P)) $dGBinary2_scxc } in
    let {
      $dGBinary4_scxa [Dmd=<L,U(C(U(U,U)),C(C1(U)))>]
        :: GBinary
             (S1 NoSelector (Rec0 (Tree a17_ab5P))
              :*: S1 NoSelector (Rec0 (Tree a17_ab5P)))
      [LclId, Str=DmdType]
      $dGBinary4_scxa =
        binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*:
          @ (M1 S NoSelector (Rec0 (Tree a17_ab5P)))
          @ (M1 S NoSelector (Rec0 (Tree a17_ab5P)))
          $dGBinary3_scxb
          $dGBinary3_scxb } in
    let {
      a19_scN9 [Dmd=<L,U(A,C(C1(C1(C1(C1(C1(U(U,U))))))))>]
        :: binary-0.7.3.0:Data.Binary.Generic.GSum
             (C1
                Main.C1_1Tree
                (S1 NoSelector (Rec0 (Tree a17_ab5P))
                 :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
      [LclId, Str=DmdType]
      a19_scN9 =
        binary-0.7.3.0:Data.Binary.Generic.$fGSumM1
          @ Main.C1_1Tree
          @ (S1 NoSelector (Rec0 (Tree a17_ab5P))
             :*: S1 NoSelector (Rec0 (Tree a17_ab5P)))
          $dGBinary4_scxa } in
    \ (eta_acdA :: Tree a17_ab5P) ->
      case eta_acdA of _ [Occ=Dead] {
        Leaf g1_aaHO ->
          binary-0.7.3.0:Data.Binary.Generic.$w$cgput
            @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab5P)))
            @ (M1
                 C
                 Main.C1_1Tree
                 (S1 NoSelector (Rec0 (Tree a17_ab5P))
                  :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
            a18_scN8
            a19_scN9
            (__word 1)
            (__word 1)
            @ ghc-prim-0.4.0.0:GHC.Prim.Any
            (GHC.Generics.L1
               @ (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab5P)))
               @ (C1
                    Main.C1_1Tree
                    (S1 NoSelector (Rec0 (Tree a17_ab5P))
                     :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
               @ ghc-prim-0.4.0.0:GHC.Prim.Any
               (g1_aaHO
                `cast` (Sym
                          (GHC.Generics.NTCo:K1[0]
                             <R>_P <a17_ab5P>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R a17_ab5P>_R)
                          ; Sym
                              (GHC.Generics.NTCo:M1[0]
                                 <C>_P
                                 <Main.C1_0Tree>_P
                                 <M1
                                    S
                                    NoSelector
                                    (K1 R a17_ab5P)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                        :: a17_ab5P
                           ~R# M1
                                 C
                                 Main.C1_0Tree
                                 (M1 S NoSelector (K1 R a17_ab5P))
                                 ghc-prim-0.4.0.0:GHC.Prim.Any)));
        Branch g1_aaHP g2_aaHQ ->
          binary-0.7.3.0:Data.Binary.Generic.$w$cgput
            @ (M1 C Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab5P)))
            @ (M1
                 C
                 Main.C1_1Tree
                 (S1 NoSelector (Rec0 (Tree a17_ab5P))
                  :*: S1 NoSelector (Rec0 (Tree a17_ab5P))))
            a18_scN8
            a19_scN9
            (__word 1)
            (__word 1)
            @ ghc-prim-0.4.0.0:GHC.Prim.Any
            (GHC.Generics.R1
               @ (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab5P)))
               @ (M1
                    C
                    Main.C1_1Tree
                    (M1 S NoSelector (K1 R (Tree a17_ab5P))
                     :*: M1 S NoSelector (K1 R (Tree a17_ab5P))))
               @ ghc-prim-0.4.0.0:GHC.Prim.Any
               ((GHC.Generics.:*:
                   @ (M1 S NoSelector (K1 R (Tree a17_ab5P)))
                   @ (M1 S NoSelector (K1 R (Tree a17_ab5P)))
                   @ ghc-prim-0.4.0.0:GHC.Prim.Any
                   (g1_aaHP
                    `cast` (Sym
                              (GHC.Generics.NTCo:K1[0]
                                 <R>_P <Tree a17_ab5P>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P
                                   <NoSelector>_P
                                   <K1 R (Tree a17_ab5P)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                            :: Tree a17_ab5P
                               ~R# M1
                                     S
                                     NoSelector
                                     (K1 R (Tree a17_ab5P))
                                     ghc-prim-0.4.0.0:GHC.Prim.Any))
                   (g2_aaHQ
                    `cast` (Sym
                              (GHC.Generics.NTCo:K1[0]
                                 <R>_P <Tree a17_ab5P>_R <ghc-prim-0.4.0.0:GHC.Prim.Any>_P)
                            ; Sym
                                (GHC.Generics.NTCo:M1[0]
                                   <S>_P
                                   <NoSelector>_P
                                   <K1 R (Tree a17_ab5P)>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                            :: Tree a17_ab5P
                               ~R# M1
                                     S
                                     NoSelector
                                     (K1 R (Tree a17_ab5P))
                                     ghc-prim-0.4.0.0:GHC.Prim.Any)))
                `cast` (Sym
                          (GHC.Generics.NTCo:M1[0]
                             <C>_P
                             <Main.C1_1Tree>_P
                             <M1 S NoSelector (K1 R (Tree a17_ab5P))
                              :*: M1
                                    S
                                    NoSelector
                                    (K1 R (Tree a17_ab5P))>_R) <ghc-prim-0.4.0.0:GHC.Prim.Any>_N
                        :: (:*:)
                             (M1 S NoSelector (K1 R (Tree a17_ab5P)))
                             (M1 S NoSelector (K1 R (Tree a17_ab5P)))
                             ghc-prim-0.4.0.0:GHC.Prim.Any
                           ~R# M1
                                 C
                                 Main.C1_1Tree
                                 (M1 S NoSelector (K1 R (Tree a17_ab5P))
                                  :*: M1 S NoSelector (K1 R (Tree a17_ab5P)))
                                 ghc-prim-0.4.0.0:GHC.Prim.Any)))
      }
end Rec }

Main.$fGenericTree_$cfrom
  :: forall a_ab2w x_ab2z. Tree a_ab2w -> Rep (Tree a_ab2w) x_ab2z
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_ab2w)
                 (@ x_ab2A)
                 (ds_dc11 [Occ=Once!] :: Tree a17_ab2w) ->
                 case ds_dc11 of _ [Occ=Dead] {
                   Leaf g1_aaHO [Occ=Once] ->
                     (GHC.Generics.L1
                        @ (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)))
                        @ (C1
                             Main.C1_1Tree
                             (S1 NoSelector (Rec0 (Tree a17_ab2w))
                              :*: S1 NoSelector (Rec0 (Tree a17_ab2w))))
                        @ x_ab2A
                        (g1_aaHO
                         `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <a17_ab2w>_R <x_ab2A>_P)
                                 ; Sym
                                     (GHC.Generics.NTCo:M1[0]
                                        <S>_P <NoSelector>_P <K1 R a17_ab2w>_R)
                                   ; Sym
                                       (GHC.Generics.NTCo:M1[0]
                                          <C>_P
                                          <Main.C1_0Tree>_P
                                          <M1 S NoSelector (K1 R a17_ab2w)>_R) <x_ab2A>_N
                                 :: a17_ab2w
                                    ~R# M1
                                          C
                                          Main.C1_0Tree
                                          (M1 S NoSelector (K1 R a17_ab2w))
                                          x_ab2A)))
                     `cast` (Sym
                               (GHC.Generics.NTCo:M1[0]
                                  <D>_P
                                  <Main.D1Tree>_P
                                  <M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w))
                                   :+: C1
                                         Main.C1_1Tree
                                         (S1 NoSelector (Rec0 (Tree a17_ab2w))
                                          :*: S1 NoSelector (Rec0 (Tree a17_ab2w)))>_R)
                             ; Sub (Sym (Main.Rep_Tree[0] <a17_ab2w>_N)) <x_ab2A>_N
                             :: (:+:)
                                  (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)))
                                  (C1
                                     Main.C1_1Tree
                                     (S1 NoSelector (Rec0 (Tree a17_ab2w))
                                      :*: S1 NoSelector (Rec0 (Tree a17_ab2w))))
                                  x_ab2A
                                ~R# Rep (Tree a17_ab2w) x_ab2A);
                   Branch g1_aaHP [Occ=Once] g2_aaHQ [Occ=Once] ->
                     (GHC.Generics.R1
                        @ (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab2w)))
                        @ (M1
                             C
                             Main.C1_1Tree
                             (M1 S NoSelector (K1 R (Tree a17_ab2w))
                              :*: M1 S NoSelector (K1 R (Tree a17_ab2w))))
                        @ x_ab2A
                        ((GHC.Generics.:*:
                            @ (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                            @ (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                            @ x_ab2A
                            (g1_aaHP
                             `cast` (Sym
                                       (GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab2A>_P)
                                     ; Sym
                                         (GHC.Generics.NTCo:M1[0]
                                            <S>_P
                                            <NoSelector>_P
                                            <K1 R (Tree a17_ab2w)>_R) <x_ab2A>_N
                                     :: Tree a17_ab2w
                                        ~R# M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab2A))
                            (g2_aaHQ
                             `cast` (Sym
                                       (GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab2A>_P)
                                     ; Sym
                                         (GHC.Generics.NTCo:M1[0]
                                            <S>_P
                                            <NoSelector>_P
                                            <K1 R (Tree a17_ab2w)>_R) <x_ab2A>_N
                                     :: Tree a17_ab2w
                                        ~R# M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab2A)))
                         `cast` (Sym
                                   (GHC.Generics.NTCo:M1[0]
                                      <C>_P
                                      <Main.C1_1Tree>_P
                                      <M1 S NoSelector (K1 R (Tree a17_ab2w))
                                       :*: M1 S NoSelector (K1 R (Tree a17_ab2w))>_R) <x_ab2A>_N
                                 :: (:*:)
                                      (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                                      (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                                      x_ab2A
                                    ~R# M1
                                          C
                                          Main.C1_1Tree
                                          (M1 S NoSelector (K1 R (Tree a17_ab2w))
                                           :*: M1 S NoSelector (K1 R (Tree a17_ab2w)))
                                          x_ab2A)))
                     `cast` (Sym
                               (GHC.Generics.NTCo:M1[0]
                                  <D>_P
                                  <Main.D1Tree>_P
                                  <C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab2w))
                                   :+: M1
                                         C
                                         Main.C1_1Tree
                                         (M1 S NoSelector (K1 R (Tree a17_ab2w))
                                          :*: M1 S NoSelector (K1 R (Tree a17_ab2w)))>_R)
                             ; Sub (Sym (Main.Rep_Tree[0] <a17_ab2w>_N)) <x_ab2A>_N
                             :: (:+:)
                                  (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab2w)))
                                  (M1
                                     C
                                     Main.C1_1Tree
                                     (M1 S NoSelector (K1 R (Tree a17_ab2w))
                                      :*: M1 S NoSelector (K1 R (Tree a17_ab2w))))
                                  x_ab2A
                                ~R# Rep (Tree a17_ab2w) x_ab2A)
                 }}]
Main.$fGenericTree_$cfrom =
  \ (@ a17_ab2w) (@ x_ab2A) (ds_dc11 :: Tree a17_ab2w) ->
    case ds_dc11 of _ [Occ=Dead] {
      Leaf g1_aaHO ->
        (GHC.Generics.L1
           @ (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)))
           @ (C1
                Main.C1_1Tree
                (S1 NoSelector (Rec0 (Tree a17_ab2w))
                 :*: S1 NoSelector (Rec0 (Tree a17_ab2w))))
           @ x_ab2A
           (g1_aaHO
            `cast` (Sym (GHC.Generics.NTCo:K1[0] <R>_P <a17_ab2w>_R <x_ab2A>_P)
                    ; Sym
                        (GHC.Generics.NTCo:M1[0] <S>_P <NoSelector>_P <K1 R a17_ab2w>_R)
                      ; Sym
                          (GHC.Generics.NTCo:M1[0]
                             <C>_P
                             <Main.C1_0Tree>_P
                             <M1 S NoSelector (K1 R a17_ab2w)>_R) <x_ab2A>_N
                    :: a17_ab2w
                       ~R# M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)) x_ab2A)))
        `cast` (Sym
                  (GHC.Generics.NTCo:M1[0]
                     <D>_P
                     <Main.D1Tree>_P
                     <M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w))
                      :+: C1
                            Main.C1_1Tree
                            (S1 NoSelector (Rec0 (Tree a17_ab2w))
                             :*: S1 NoSelector (Rec0 (Tree a17_ab2w)))>_R)
                ; Sub (Sym (Main.Rep_Tree[0] <a17_ab2w>_N)) <x_ab2A>_N
                :: (:+:)
                     (M1 C Main.C1_0Tree (M1 S NoSelector (K1 R a17_ab2w)))
                     (C1
                        Main.C1_1Tree
                        (S1 NoSelector (Rec0 (Tree a17_ab2w))
                         :*: S1 NoSelector (Rec0 (Tree a17_ab2w))))
                     x_ab2A
                   ~R# Rep (Tree a17_ab2w) x_ab2A);
      Branch g1_aaHP g2_aaHQ ->
        (GHC.Generics.R1
           @ (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab2w)))
           @ (M1
                C
                Main.C1_1Tree
                (M1 S NoSelector (K1 R (Tree a17_ab2w))
                 :*: M1 S NoSelector (K1 R (Tree a17_ab2w))))
           @ x_ab2A
           ((GHC.Generics.:*:
               @ (M1 S NoSelector (K1 R (Tree a17_ab2w)))
               @ (M1 S NoSelector (K1 R (Tree a17_ab2w)))
               @ x_ab2A
               (g1_aaHP
                `cast` (Sym
                          (GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab2A>_P)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0]
                               <S>_P <NoSelector>_P <K1 R (Tree a17_ab2w)>_R) <x_ab2A>_N
                        :: Tree a17_ab2w
                           ~R# M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab2A))
               (g2_aaHQ
                `cast` (Sym
                          (GHC.Generics.NTCo:K1[0] <R>_P <Tree a17_ab2w>_R <x_ab2A>_P)
                        ; Sym
                            (GHC.Generics.NTCo:M1[0]
                               <S>_P <NoSelector>_P <K1 R (Tree a17_ab2w)>_R) <x_ab2A>_N
                        :: Tree a17_ab2w
                           ~R# M1 S NoSelector (K1 R (Tree a17_ab2w)) x_ab2A)))
            `cast` (Sym
                      (GHC.Generics.NTCo:M1[0]
                         <C>_P
                         <Main.C1_1Tree>_P
                         <M1 S NoSelector (K1 R (Tree a17_ab2w))
                          :*: M1 S NoSelector (K1 R (Tree a17_ab2w))>_R) <x_ab2A>_N
                    :: (:*:)
                         (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                         (M1 S NoSelector (K1 R (Tree a17_ab2w)))
                         x_ab2A
                       ~R# M1
                             C
                             Main.C1_1Tree
                             (M1 S NoSelector (K1 R (Tree a17_ab2w))
                              :*: M1 S NoSelector (K1 R (Tree a17_ab2w)))
                             x_ab2A)))
        `cast` (Sym
                  (GHC.Generics.NTCo:M1[0]
                     <D>_P
                     <Main.D1Tree>_P
                     <C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab2w))
                      :+: M1
                            C
                            Main.C1_1Tree
                            (M1 S NoSelector (K1 R (Tree a17_ab2w))
                             :*: M1 S NoSelector (K1 R (Tree a17_ab2w)))>_R)
                ; Sub (Sym (Main.Rep_Tree[0] <a17_ab2w>_N)) <x_ab2A>_N
                :: (:+:)
                     (C1 Main.C1_0Tree (S1 NoSelector (Rec0 a17_ab2w)))
                     (M1
                        C
                        Main.C1_1Tree
                        (M1 S NoSelector (K1 R (Tree a17_ab2w))
                         :*: M1 S NoSelector (K1 R (Tree a17_ab2w))))
                     x_ab2A
                   ~R# Rep (Tree a17_ab2w) x_ab2A)
    }

Rec {
Main.$fNFDataTree_$crnf [Occ=LoopBreaker]
  :: forall a_ab5v. NFData a_ab5v => Tree a_ab5v -> ()
[GblId, Arity=2, Caf=NoCafRefs, Str=DmdType <C(S),C(U())><S,1*U>]
Main.$fNFDataTree_$crnf =
  \ (@ a17_ab5v)
    ($dNFData_ab5w :: NFData a17_ab5v)
    (eta_B1 :: Tree a17_ab5v) ->
    case eta_B1 of _ [Occ=Dead] {
      Leaf g1_aaHO ->
        ($dNFData_ab5w
         `cast` (Control.DeepSeq.NTCo:NFData[0] <a17_ab5v>_N
                 :: NFData a17_ab5v ~R# (a17_ab5v -> ())))
          g1_aaHO;
      Branch g1_aaHP g2_aaHQ ->
        case Main.$fNFDataTree_$crnf @ a17_ab5v $dNFData_ab5w g1_aaHP
        of _ [Occ=Dead] { () ->
        Main.$fNFDataTree_$crnf @ a17_ab5v $dNFData_ab5w g2_aaHQ
        }
    }
end Rec }

Main.$fNFDataTree [InlPrag=INLINE (sat-args=0)]
  :: forall a_aaHL. NFData a_aaHL => NFData (Tree a_aaHL)
[GblId[DFunId(nt)],
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <C(S),C(U())><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= Main.$fNFDataTree_$crnf
               `cast` (forall a17_ab5v.
                       <NFData a17_ab5v>_R
                       -> Sym (Control.DeepSeq.NTCo:NFData[0] <Tree a17_ab5v>_N)
                       :: (forall a17_ab5v. NFData a17_ab5v => Tree a17_ab5v -> ())
                          ~R# (forall a17_ab5v. NFData a17_ab5v => NFData (Tree a17_ab5v)))}]
Main.$fNFDataTree =
  Main.$fNFDataTree_$crnf
  `cast` (forall a17_ab5v.
          <NFData a17_ab5v>_R
          -> Sym (Control.DeepSeq.NTCo:NFData[0] <Tree a17_ab5v>_N)
          :: (forall a17_ab5v. NFData a17_ab5v => Tree a17_ab5v -> ())
             ~R# (forall a17_ab5v. NFData a17_ab5v => NFData (Tree a17_ab5v)))

Main.$sforce5 :: Tree Int -> ()
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.$sforce5 =
  Main.$fNFDataTree_$crnf
    @ Int
    (Control.DeepSeq.$fNFDataInt_$crnf
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
             :: (Int -> ()) ~R# NFData Int))

Main.$fGenericTree [InlPrag=[ALWAYS] CONLIKE]
  :: forall a_aaHJ. Generic (Tree a_aaHJ)
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=DFun: \ (@ a17_ab2w) ->
       GHC.Generics.D:Generic TYPE Tree a17_ab2w
                              Main.$fGenericTree_$cfrom @ a17_ab2w
                              Main.$fGenericTree_$cto @ a17_ab2w]
Main.$fGenericTree =
  \ (@ a17_ab2w) ->
    GHC.Generics.D:Generic
      @ (Tree a17_ab2w)
      (Main.$fGenericTree_$cfrom @ a17_ab2w)
      (Main.$fGenericTree_$cto @ a17_ab2w)

Rec {
Main.$w$s$cput [InlPrag=[0], Occ=LoopBreaker]
  :: Tree1 Int
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType <S,1*U>]
Main.$w$s$cput =
  \ (w_sdK8 :: Tree1 Int) ->
    case w_sdK8 of _ [Occ=Dead] {
      Leaf1 a17_a4pR ->
        let {
          a18_scK4 [Dmd=<L,U(1*U,C(U))>] :: Put
          [LclId, Str=DmdType]
          a18_scK4 =
            case binary-0.7.3.0:Data.Binary.Class.$w$cput9
                   (case a17_a4pR
                    of _ [Occ=Dead] { ghc-prim-0.4.0.0:GHC.Types.I# x#_acG0 ->
                    GHC.Int.I64# x#_acG0
                    })
            of _ [Occ=Dead] { (# ww1_acK0, ww2_acK1 #) ->
            (Data.Binary.Put.PairS @ () ww1_acK0 ww2_acK1)
            `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
            } } in
        (# case a18_scK4
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnn w'_acno ->
           b1_acnn
           },
           (\ (x_ac7I
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac5c [Dmd=<L,C(C1(U(U,U)))>]
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                [LclId, Str=DmdType]
                eta_ac5c =
                  case a18_scK4
                       `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                               :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                  of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnx w'_acny ->
                  (w'_acny
                   `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                           :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                              ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                    -> IO LBS.ByteString)
                                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                   -> IO LBS.ByteString)))
                    x_ac7I
                  } } in
              let {
                lvl20_sdZL :: LBS.ByteString
                [LclId, Str=DmdType]
                lvl20_sdZL =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                  let {
                    a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    [LclId, Str=DmdType]
                    a20_acHp =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acHr
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acHp
                         0
                         (__word 0)
                         ipv1_acHq
                  of s2_acIu [OS=OneShot] { __DEFAULT ->
                  let {
                    a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                    [LclId, Str=DmdType]
                    a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                  of s'_acHz [OS=OneShot] { __DEFAULT ->
                  case ((eta_ac5c
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acHp a21_acHt 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acHz
                  of _ [Occ=Dead] { (# ipv3_acHI, ipv4_acHJ #) ->
                  ipv4_acHJ
                  }
                  }
                  }
                  } } in
              \ (eta1_ac5d :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac5e [OS=OneShot]
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac5d
                of _ [Occ=Dead]
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acGZ dt1_acH0
                                                                 dt2_acH1 dt3_acH2 dt4_acH3 ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acH3)
                of _ [Occ=Dead] {
                  False ->
                    case dt3_acH2 of wild3_acHF {
                      __DEFAULT ->
                        (# eta2_ac5e,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acGZ dt1_acH0 dt2_acH1 wild3_acHF lvl20_sdZL #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac5e
                        of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                        let {
                          a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          [LclId, Str=DmdType]
                          a20_acHp =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acHr
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acHp
                               0
                               (__word 0)
                               ipv1_acHq
                        of s2_acIu [OS=OneShot] { __DEFAULT ->
                        let {
                          a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                          [LclId, Str=DmdType]
                          a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                        of s'_acHz [OS=OneShot] { __DEFAULT ->
                        ((eta_ac5c
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acHp a21_acHt 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acHz
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acGZ (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acH1 dt3_acH2))
                           0
                           (__word 0)
                           eta2_ac5e
                    of s2_acIu [OS=OneShot] { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acH0 s2_acIu
                    of s'_acHS [OS=OneShot] { __DEFAULT ->
                    ((eta_ac5c
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acGZ
                           dt1_acH0
                           dt2_acH1
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acH2 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acH3 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acHS
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #);
      Branch1 t1_a4rd t2_a4re ->
        let {
          a17_scKv [Dmd=<L,U(1*U,C(U))>] :: Put
          [LclId, Str=DmdType]
          a17_scKv =
            case Main.$w$s$cput t2_a4re
            of _ [Occ=Dead] { (# ww1_sdLh, ww2_sdLi #) ->
            (Data.Binary.Put.PairS @ () ww1_sdLh ww2_sdLi)
            `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
            } } in
        (# case a17_scKv
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnn w'_acno ->
           b1_acnn
           },
           let {
             g_ac7H [Dmd=<L,C(U)>]
               :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                  -> IO LBS.ByteString
             [LclId, Str=DmdType]
             g_ac7H =
               case Main.$w$s$cput t1_a4rd
               of _ [Occ=Dead] { (# ww1_sdLh, ww2_sdLi #) ->
               ww2_sdLi
               `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                       :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                          ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString)
                               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString))
               } } in
           (\ (x_XcdK
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac5c [Dmd=<L,C(C1(U(U,U)))>]
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                [LclId, Str=DmdType]
                eta_ac5c =
                  g_ac7H
                    (case a17_scKv
                          `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                                  :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                     of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnx w'_acny ->
                     (w'_acny
                      `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                              :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                 ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                       -> IO LBS.ByteString)
                                      -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                      -> IO LBS.ByteString)))
                       x_XcdK
                     }) } in
              let {
                lvl20_sdZM :: LBS.ByteString
                [LclId, Str=DmdType]
                lvl20_sdZM =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                  let {
                    a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    [LclId, Str=DmdType]
                    a20_acHp =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acHr
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acHp
                         0
                         (__word 1)
                         ipv1_acHq
                  of s2_acIu [OS=OneShot] { __DEFAULT ->
                  let {
                    a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                    [LclId, Str=DmdType]
                    a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                  of s'_acHz [OS=OneShot] { __DEFAULT ->
                  case ((eta_ac5c
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acHp a21_acHt 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acHz
                  of _ [Occ=Dead] { (# ipv3_acHI, ipv4_acHJ #) ->
                  ipv4_acHJ
                  }
                  }
                  }
                  } } in
              \ (eta1_ac5d :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac5e [OS=OneShot]
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac5d
                of _ [Occ=Dead]
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acGZ dt1_acH0
                                                                 dt2_acH1 dt3_acH2 dt4_acH3 ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acH3)
                of _ [Occ=Dead] {
                  False ->
                    case dt3_acH2 of wild3_acHF {
                      __DEFAULT ->
                        (# eta2_ac5e,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acGZ dt1_acH0 dt2_acH1 wild3_acHF lvl20_sdZM #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac5e
                        of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                        let {
                          a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          [LclId, Str=DmdType]
                          a20_acHp =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acHr
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acHp
                               0
                               (__word 1)
                               ipv1_acHq
                        of s2_acIu [OS=OneShot] { __DEFAULT ->
                        let {
                          a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                          [LclId, Str=DmdType]
                          a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                        of s'_acHz [OS=OneShot] { __DEFAULT ->
                        ((eta_ac5c
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acHp a21_acHt 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acHz
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acGZ (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acH1 dt3_acH2))
                           0
                           (__word 1)
                           eta2_ac5e
                    of s2_acIu [OS=OneShot] { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acH0 s2_acIu
                    of s'_acHS [OS=OneShot] { __DEFAULT ->
                    ((eta_ac5c
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acGZ
                           dt1_acH0
                           dt2_acH1
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acH2 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acH3 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acHS
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }
end Rec }

Main.main13
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree Int #)
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
Main.main13 =
  \ (w_sdHH [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    Main.$wa3 20 w_sdHH

Rec {
Main.main_$s$wa3 [Occ=LoopBreaker]
  :: Tree Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
[GblId, Arity=3, Caf=NoCafRefs, Str=DmdType <L,U><L,U><L,U>]
Main.main_$s$wa3 =
  \ (sc_se93 :: Tree Int)
    (sc1_se94 :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_se95 [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_se94 0)
    of _ [Occ=Dead] {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ (Tree Int)
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (case Main.$fNFDataTree_$crnf
                       @ Int
                       (Control.DeepSeq.$fNFDataInt_$crnf
                        `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
                                :: (Int -> ()) ~R# NFData Int))
                       sc_se93
                of _ [Occ=Dead] { () ->
                sc_se93
                })
               sc2_se95
        of _ [Occ=Dead] { (# ipv_acI9, ipv1_acIa #) ->
        Main.main_$s$wa3
          sc_se93 (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_se94 1) ipv_acI9
        };
      True -> (# sc2_se95, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Rec {
Main.main_$s$wa2 [Occ=LoopBreaker]
  :: Tree Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
[GblId, Arity=3, Str=DmdType <L,U><L,U><L,U>]
Main.main_$s$wa2 =
  \ (sc_se8W :: Tree Int)
    (sc1_se8X :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_se8Y [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_se8X 0)
    of _ [Occ=Dead] {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ Data.ByteString.Internal.ByteString
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (LBS.toStrict
                  (GHC.IO.unsafeDupablePerformIO
                     @ LBS.ByteString
                     ((\ (s_acyr [OS=OneShot]
                            :: ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                         case ghc-prim-0.4.0.0:GHC.Prim.noDuplicate# s_acyr
                         of s'_acys [OS=OneShot] { __DEFAULT ->
                         case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                                @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 s'_acys
                         of _ [Occ=Dead] { (# ipv_acGt, ipv1_acGu #) ->
                         case (Main.$fBinaryTree_$s$cput sc_se8W)
                              `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                                      :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                         of _ [Occ=Dead] { Data.Binary.Put.PairS ds1_acyA b_acyB ->
                         (((b_acyB
                            `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                                    :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                       ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                             -> IO LBS.ByteString)
                                            -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                            -> IO LBS.ByteString)))
                             (lvl18_resy
                              `cast` (<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                                      -> Sym
                                           (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0]
                                              <LBS.ByteString>_R)
                                      :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                          -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))
                                         ~R# (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                              -> IO LBS.ByteString)))
                             (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                (ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                                   (ipv1_acGu
                                    `cast` (UnivCo mkUnsafeCo representational
                                              (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                              ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                            :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                               ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)))
                                (GHC.ForeignPtr.PlainPtr ipv1_acGu)
                                0
                                0
                                32752))
                          `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                  :: IO LBS.ByteString
                                     ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))))
                           ipv_acGt
                         }
                         }
                         })
                      `cast` (Sym
                                (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R)
                              :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                  -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                        LBS.ByteString #))
                                 ~R# IO LBS.ByteString))))
               sc2_se8Y
        of _ [Occ=Dead] { (# ipv_acI9, ipv1_acIa #) ->
        Main.main_$s$wa2
          sc_se8W (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_se8X 1) ipv_acI9
        };
      True -> (# sc2_se8Y, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Main.$wa6 [InlPrag=[0]] :: Tree Int -> (# String, [Benchmark] #)
[GblId,
 Arity=1,
 Str=DmdType <L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 140 30}]
Main.$wa6 =
  \ (w_sdKv :: Tree Int) ->
    (# Main.main12,
       ghc-prim-0.4.0.0:GHC.Types.:
         @ Benchmark
         (Criterion.Types.Benchmark
            Main.main7
            ((\ (w1_sdKf :: GHC.Int.Int64)
                (w2_sdKg [OS=OneShot]
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case w1_sdKf of _ [Occ=Dead] { GHC.Int.I64# ww1_sdKj ->
                Main.main_$s$wa3 w_sdKv ww1_sdKj w2_sdKg
                })
             `cast` ((<GHC.Int.Int64>_R
                      -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                     ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                     :: (GHC.Int.Int64
                         -> ghc-prim-0.4.0.0:GHC.Prim.State#
                              ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                               () #))
                        ~R# Benchmarkable)))
         (ghc-prim-0.4.0.0:GHC.Types.:
            @ Benchmark
            (Criterion.Types.Benchmark
               Main.main6
               ((\ (w1_sdKo :: GHC.Int.Int64)
                   (w2_sdKp [OS=OneShot]
                      :: ghc-prim-0.4.0.0:GHC.Prim.State#
                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                   case w1_sdKo of _ [Occ=Dead] { GHC.Int.I64# ww1_sdKs ->
                   Main.main_$s$wa2 w_sdKv ww1_sdKs w2_sdKp
                   })
                `cast` ((<GHC.Int.Int64>_R
                         -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                        ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                        :: (GHC.Int.Int64
                            -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                  () #))
                           ~R# Benchmarkable)))
            (ghc-prim-0.4.0.0:GHC.Types.[] @ Benchmark)) #)

Main.main11 [InlPrag=INLINE[0]] :: Tree Int -> Benchmark
[GblId,
 Arity=1,
 Str=DmdType <L,U>m3,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sdKv [Occ=Once] :: Tree Int) ->
                 case Main.$wa6 w_sdKv
                 of _ [Occ=Dead] { (# ww1_sdLl [Occ=Once], ww2_sdLm [Occ=Once] #) ->
                 Criterion.Types.BenchGroup ww1_sdLl ww2_sdLm
                 }}]
Main.main11 =
  \ (w_sdKv :: Tree Int) ->
    case Main.$wa6 w_sdKv of _ [Occ=Dead] { (# ww1_sdLl, ww2_sdLm #) ->
    Criterion.Types.BenchGroup ww1_sdLl ww2_sdLm
    }

Main.main10 :: Benchmark
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 40}]
Main.main10 =
  Criterion.Types.Environment
    @ (Tree Int)
    (Main.$sforce5
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Tree Int>_N)
             :: (Tree Int -> ()) ~R# NFData (Tree Int)))
    (Main.main13
     `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree Int>_R)
             :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                 -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                       Tree Int #))
                ~R# IO (Tree Int)))
    Main.main11

Main.main9
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           Tree1 Int #)
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)}]
Main.main9 =
  \ (w_sdHA [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    Main.$wa4 20 w_sdHA

Rec {
Main.main_$s$wa1 [Occ=LoopBreaker]
  :: Tree1 Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
[GblId, Arity=3, Caf=NoCafRefs, Str=DmdType <L,U><L,U><L,U>]
Main.main_$s$wa1 =
  \ (sc_se8P :: Tree1 Int)
    (sc1_se8Q :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_se8R [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_se8Q 0)
    of _ [Occ=Dead] {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ (Tree1 Int)
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (case Main.$fNFDataTree1_$crnf
                       @ Int
                       (Control.DeepSeq.$fNFDataInt_$crnf
                        `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Int>_N)
                                :: (Int -> ()) ~R# NFData Int))
                       sc_se8P
                of _ [Occ=Dead] { () ->
                sc_se8P
                })
               sc2_se8R
        of _ [Occ=Dead] { (# ipv_acI9, ipv1_acIa #) ->
        Main.main_$s$wa1
          sc_se8P (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_se8Q 1) ipv_acI9
        };
      True -> (# sc2_se8R, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Rec {
Main.main_$s$wa [Occ=LoopBreaker]
  :: Tree1 Int
     -> ghc-prim-0.4.0.0:GHC.Prim.Int#
     -> ghc-prim-0.4.0.0:GHC.Prim.State#
          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
[GblId, Arity=3, Str=DmdType <L,U><L,U><L,U>]
Main.main_$s$wa =
  \ (sc_se8I :: Tree1 Int)
    (sc1_se8J :: ghc-prim-0.4.0.0:GHC.Prim.Int#)
    (sc2_se8K [OS=OneShot]
       :: ghc-prim-0.4.0.0:GHC.Prim.State#
            ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
    case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# sc1_se8J 0)
    of _ [Occ=Dead] {
      False ->
        case ghc-prim-0.4.0.0:GHC.Prim.seq#
               @ Data.ByteString.Internal.ByteString
               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
               (LBS.toStrict
                  (GHC.IO.unsafeDupablePerformIO
                     @ LBS.ByteString
                     ((\ (s_acyr [OS=OneShot]
                            :: ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                         case ghc-prim-0.4.0.0:GHC.Prim.noDuplicate# s_acyr
                         of s'_acys [OS=OneShot] { __DEFAULT ->
                         case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                                @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 s'_acys
                         of _ [Occ=Dead] { (# ipv_acGt, ipv1_acGu #) ->
                         case Main.$w$s$cput sc_se8I
                         of _ [Occ=Dead] { (# ww1_sdLh, ww2_sdLi #) ->
                         (((ww2_sdLi
                            `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                                    :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                       ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                             -> IO LBS.ByteString)
                                            -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                            -> IO LBS.ByteString)))
                             (lvl18_resy
                              `cast` (<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                                      -> Sym
                                           (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0]
                                              <LBS.ByteString>_R)
                                      :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                          -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))
                                         ~R# (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                              -> IO LBS.ByteString)))
                             (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                (ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                                   (ipv1_acGu
                                    `cast` (UnivCo mkUnsafeCo representational
                                              (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                              ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                            :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                               ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)))
                                (GHC.ForeignPtr.PlainPtr ipv1_acGu)
                                0
                                0
                                32752))
                          `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                  :: IO LBS.ByteString
                                     ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                  ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                                LBS.ByteString #))))
                           ipv_acGt
                         }
                         }
                         })
                      `cast` (Sym
                                (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R)
                              :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                  -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                        LBS.ByteString #))
                                 ~R# IO LBS.ByteString))))
               sc2_se8K
        of _ [Occ=Dead] { (# ipv_acI9, ipv1_acIa #) ->
        Main.main_$s$wa
          sc_se8I (ghc-prim-0.4.0.0:GHC.Prim.-# sc1_se8J 1) ipv_acI9
        };
      True -> (# sc2_se8K, ghc-prim-0.4.0.0:GHC.Tuple.() #)
    }
end Rec }

Main.$wa5 [InlPrag=[0]] :: Tree1 Int -> (# String, [Benchmark] #)
[GblId,
 Arity=1,
 Str=DmdType <L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 140 30}]
Main.$wa5 =
  \ (w_sdKR :: Tree1 Int) ->
    (# Main.main8,
       ghc-prim-0.4.0.0:GHC.Types.:
         @ Benchmark
         (Criterion.Types.Benchmark
            Main.main7
            ((\ (w1_sdKB :: GHC.Int.Int64)
                (w2_sdKC [OS=OneShot]
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case w1_sdKB of _ [Occ=Dead] { GHC.Int.I64# ww1_sdKF ->
                Main.main_$s$wa1 w_sdKR ww1_sdKF w2_sdKC
                })
             `cast` ((<GHC.Int.Int64>_R
                      -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                     ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                     :: (GHC.Int.Int64
                         -> ghc-prim-0.4.0.0:GHC.Prim.State#
                              ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                               () #))
                        ~R# Benchmarkable)))
         (ghc-prim-0.4.0.0:GHC.Types.:
            @ Benchmark
            (Criterion.Types.Benchmark
               Main.main6
               ((\ (w1_sdKK :: GHC.Int.Int64)
                   (w2_sdKL [OS=OneShot]
                      :: ghc-prim-0.4.0.0:GHC.Prim.State#
                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                   case w1_sdKK of _ [Occ=Dead] { GHC.Int.I64# ww1_sdKO ->
                   Main.main_$s$wa w_sdKR ww1_sdKO w2_sdKL
                   })
                `cast` ((<GHC.Int.Int64>_R
                         -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R))
                        ; Sym Criterion.Types.NTCo:Benchmarkable[0]
                        :: (GHC.Int.Int64
                            -> ghc-prim-0.4.0.0:GHC.Prim.State#
                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                    ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                  () #))
                           ~R# Benchmarkable)))
            (ghc-prim-0.4.0.0:GHC.Types.[] @ Benchmark)) #)

Main.main5 [InlPrag=INLINE[0]] :: Tree1 Int -> Benchmark
[GblId,
 Arity=1,
 Str=DmdType <L,U>m3,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sdKR [Occ=Once] :: Tree1 Int) ->
                 case Main.$wa5 w_sdKR
                 of _ [Occ=Dead] { (# ww1_sdLp [Occ=Once], ww2_sdLq [Occ=Once] #) ->
                 Criterion.Types.BenchGroup ww1_sdLp ww2_sdLq
                 }}]
Main.main5 =
  \ (w_sdKR :: Tree1 Int) ->
    case Main.$wa5 w_sdKR of _ [Occ=Dead] { (# ww1_sdLp, ww2_sdLq #) ->
    Criterion.Types.BenchGroup ww1_sdLp ww2_sdLq
    }

Main.main4 :: Benchmark
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 40}]
Main.main4 =
  Criterion.Types.Environment
    @ (Tree1 Int)
    (Main.$sforce2
     `cast` (Sym (Control.DeepSeq.NTCo:NFData[0] <Tree1 Int>_N)
             :: (Tree1 Int -> ()) ~R# NFData (Tree1 Int)))
    (Main.main9
     `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <Tree1 Int>_R)
             :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                 -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                       Tree1 Int #))
                ~R# IO (Tree1 Int)))
    Main.main5

Main.main3 :: [Benchmark]
[GblId,
 Str=DmdType m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.main3 =
  ghc-prim-0.4.0.0:GHC.Types.:
    @ Benchmark Main.main4 (ghc-prim-0.4.0.0:GHC.Types.[] @ Benchmark)

Main.main2 :: [Benchmark]
[GblId,
 Str=DmdType m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.main2 =
  ghc-prim-0.4.0.0:GHC.Types.: @ Benchmark Main.main10 Main.main3

Main.main1
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 60}]
Main.main1 = Criterion.Main.defaultMain2 defaultConfig Main.main2

main :: IO ()
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main1
               `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
                       :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
main =
  Main.main1
  `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
          :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    () #))
             ~R# IO ())

Main.main14
  :: ghc-prim-0.4.0.0:GHC.Prim.State#
       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
           () #)
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.main14 =
  GHC.TopHandler.runMainIO1
    @ ()
    (Main.main1
     `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
             :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                 -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                         ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                       () #))
                ~R# IO ()))

Rec {
Main.$w$cput [InlPrag=[0], Occ=LoopBreaker]
  :: forall a_abbd.
     Binary a_abbd =>
     Tree1 a_abbd
     -> (# (), binary-0.7.3.0:Data.Binary.Builder.Base.Builder #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,U(C(U(U,U)),A)><S,1*U>]
Main.$w$cput =
  \ (@ a17_abbd)
    (w_sdKV :: Binary a17_abbd)
    (w1_sdKW :: Tree1 a17_abbd) ->
    case w1_sdKW of _ [Occ=Dead] {
      Leaf1 a18_a4pR ->
        let {
          a19_scKD [Dmd=<L,U(1*U,C(U))>] :: Put
          [LclId, Str=DmdType]
          a19_scKD = put @ a17_abbd w_sdKV a18_a4pR } in
        (# case a19_scKD
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnn w'_acno ->
           b1_acnn
           },
           (\ (x_ac7I
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac5c [Dmd=<L,C(C1(U(U,U)))>]
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                [LclId, Str=DmdType]
                eta_ac5c =
                  case a19_scKD
                       `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                               :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                  of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnx w'_acny ->
                  (w'_acny
                   `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                           :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                              ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                    -> IO LBS.ByteString)
                                   -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                   -> IO LBS.ByteString)))
                    x_ac7I
                  } } in
              let {
                lvl20_sdZX :: LBS.ByteString
                [LclId, Str=DmdType]
                lvl20_sdZX =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                  let {
                    a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    [LclId, Str=DmdType]
                    a20_acHp =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acHr
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acHp
                         0
                         (__word 0)
                         ipv1_acHq
                  of s2_acIu [OS=OneShot] { __DEFAULT ->
                  let {
                    a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                    [LclId, Str=DmdType]
                    a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                  of s'_acHz [OS=OneShot] { __DEFAULT ->
                  case ((eta_ac5c
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acHp a21_acHt 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acHz
                  of _ [Occ=Dead] { (# ipv3_acHI, ipv4_acHJ #) ->
                  ipv4_acHJ
                  }
                  }
                  }
                  } } in
              \ (eta1_ac5d :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac5e [OS=OneShot]
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac5d
                of _ [Occ=Dead]
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acGZ dt1_acH0
                                                                 dt2_acH1 dt3_acH2 dt4_acH3 ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acH3)
                of _ [Occ=Dead] {
                  False ->
                    case dt3_acH2 of wild3_acHF {
                      __DEFAULT ->
                        (# eta2_ac5e,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acGZ dt1_acH0 dt2_acH1 wild3_acHF lvl20_sdZX #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac5e
                        of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                        let {
                          a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          [LclId, Str=DmdType]
                          a20_acHp =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acHr
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acHp
                               0
                               (__word 0)
                               ipv1_acHq
                        of s2_acIu [OS=OneShot] { __DEFAULT ->
                        let {
                          a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                          [LclId, Str=DmdType]
                          a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                        of s'_acHz [OS=OneShot] { __DEFAULT ->
                        ((eta_ac5c
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acHp a21_acHt 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acHz
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acGZ (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acH1 dt3_acH2))
                           0
                           (__word 0)
                           eta2_ac5e
                    of s2_acIu [OS=OneShot] { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acH0 s2_acIu
                    of s'_acHS [OS=OneShot] { __DEFAULT ->
                    ((eta_ac5c
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acGZ
                           dt1_acH0
                           dt2_acH1
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acH2 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acH3 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acHS
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #);
      Branch1 t1_a4rd t2_a4re ->
        let {
          a18_scKG [Dmd=<L,U(1*U,C(U))>] :: Put
          [LclId, Str=DmdType]
          a18_scKG =
            case Main.$w$cput @ a17_abbd w_sdKV t2_a4re
            of _ [Occ=Dead] { (# ww1_sdLt, ww2_sdLu #) ->
            (Data.Binary.Put.PairS @ () ww1_sdLt ww2_sdLu)
            `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                    :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
            } } in
        (# case a18_scKG
                `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                        :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
           of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnn w'_acno ->
           b1_acnn
           },
           let {
             g_ac7H [Dmd=<L,C(U)>]
               :: (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                   -> IO LBS.ByteString)
                  -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                  -> IO LBS.ByteString
             [LclId, Str=DmdType]
             g_ac7H =
               case Main.$w$cput @ a17_abbd w_sdKV t1_a4rd
               of _ [Occ=Dead] { (# ww1_sdLt, ww2_sdLu #) ->
               ww2_sdLu
               `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                       :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                          ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                -> IO LBS.ByteString)
                               -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               -> IO LBS.ByteString))
               } } in
           (\ (x_Xce4
                 :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                    -> IO LBS.ByteString) ->
              let {
                eta_ac5c [Dmd=<L,C(C1(U(U,U)))>]
                  :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString
                [LclId, Str=DmdType]
                eta_ac5c =
                  g_ac7H
                    (case a18_scKG
                          `cast` (Data.Binary.Put.NTCo:PutM[0] <()>_N
                                  :: Data.Binary.Put.PutM () ~R# Data.Binary.Put.PairS ())
                     of _ [Occ=Dead] { Data.Binary.Put.PairS b1_acnx w'_acny ->
                     (w'_acny
                      `cast` (binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                              :: binary-0.7.3.0:Data.Binary.Builder.Base.Builder
                                 ~R# ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                       -> IO LBS.ByteString)
                                      -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                                      -> IO LBS.ByteString)))
                       x_Xce4
                     }) } in
              let {
                lvl20_sdZY :: LBS.ByteString
                [LclId, Str=DmdType]
                lvl20_sdZY =
                  case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         32752
                         ghc-prim-0.4.0.0:GHC.Prim.realWorld#
                  of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                  let {
                    a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                    [LclId, Str=DmdType]
                    a20_acHp =
                      ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                        (ipv2_acHr
                         `cast` (UnivCo mkUnsafeCo representational
                                   (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                   ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                 :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                    ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                  case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                         @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                         a20_acHp
                         0
                         (__word 1)
                         ipv1_acHq
                  of s2_acIu [OS=OneShot] { __DEFAULT ->
                  let {
                    a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                    [LclId, Str=DmdType]
                    a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                  case ghc-prim-0.4.0.0:GHC.Prim.touch#
                         @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                  of s'_acHz [OS=OneShot] { __DEFAULT ->
                  case ((eta_ac5c
                           (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                              a20_acHp a21_acHt 0 1 32751))
                        `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                :: IO LBS.ByteString
                                   ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                          ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                        -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                              LBS.ByteString #))))
                         s'_acHz
                  of _ [Occ=Dead] { (# ipv3_acHI, ipv4_acHJ #) ->
                  ipv4_acHJ
                  }
                  }
                  }
                  } } in
              \ (eta1_ac5d :: binary-0.7.3.0:Data.Binary.Builder.Base.Buffer)
                (eta2_ac5e [OS=OneShot]
                   :: ghc-prim-0.4.0.0:GHC.Prim.State#
                        ghc-prim-0.4.0.0:GHC.Prim.RealWorld) ->
                case eta1_ac5d
                of _ [Occ=Dead]
                { binary-0.7.3.0:Data.Binary.Builder.Base.Buffer dt_acGZ dt1_acH0
                                                                 dt2_acH1 dt3_acH2 dt4_acH3 ->
                case ghc-prim-0.4.0.0:GHC.Prim.tagToEnum#
                       @ Bool (ghc-prim-0.4.0.0:GHC.Prim.<=# 1 dt4_acH3)
                of _ [Occ=Dead] {
                  False ->
                    case dt3_acH2 of wild3_acHF {
                      __DEFAULT ->
                        (# eta2_ac5e,
                           Data.ByteString.Lazy.Internal.Chunk
                             dt_acGZ dt1_acH0 dt2_acH1 wild3_acHF lvl20_sdZY #);
                      0 ->
                        case ghc-prim-0.4.0.0:GHC.Prim.newPinnedByteArray#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld 32752 eta2_ac5e
                        of _ [Occ=Dead] { (# ipv1_acHq, ipv2_acHr #) ->
                        let {
                          a20_acHp :: ghc-prim-0.4.0.0:GHC.Prim.Addr#
                          [LclId, Str=DmdType]
                          a20_acHp =
                            ghc-prim-0.4.0.0:GHC.Prim.byteArrayContents#
                              (ipv2_acHr
                               `cast` (UnivCo mkUnsafeCo representational
                                         (ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld)
                                         ghc-prim-0.4.0.0:GHC.Prim.ByteArray#
                                       :: ghc-prim-0.4.0.0:GHC.Prim.MutableByteArray#
                                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                          ~R# ghc-prim-0.4.0.0:GHC.Prim.ByteArray#)) } in
                        case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                               @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                               a20_acHp
                               0
                               (__word 1)
                               ipv1_acHq
                        of s2_acIu [OS=OneShot] { __DEFAULT ->
                        let {
                          a21_acHt :: GHC.ForeignPtr.ForeignPtrContents
                          [LclId, Str=DmdType]
                          a21_acHt = GHC.ForeignPtr.PlainPtr ipv2_acHr } in
                        case ghc-prim-0.4.0.0:GHC.Prim.touch#
                               @ GHC.ForeignPtr.ForeignPtrContents a21_acHt s2_acIu
                        of s'_acHz [OS=OneShot] { __DEFAULT ->
                        ((eta_ac5c
                            (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                               a20_acHp a21_acHt 0 1 32751))
                         `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                                 :: IO LBS.ByteString
                                    ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                           ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                         -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                                 ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                               LBS.ByteString #))))
                          s'_acHz
                        }
                        }
                        }
                    };
                  True ->
                    case ghc-prim-0.4.0.0:GHC.Prim.writeWord8OffAddr#
                           @ ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           (ghc-prim-0.4.0.0:GHC.Prim.plusAddr#
                              dt_acGZ (ghc-prim-0.4.0.0:GHC.Prim.+# dt2_acH1 dt3_acH2))
                           0
                           (__word 1)
                           eta2_ac5e
                    of s2_acIu [OS=OneShot] { __DEFAULT ->
                    case ghc-prim-0.4.0.0:GHC.Prim.touch#
                           @ GHC.ForeignPtr.ForeignPtrContents dt1_acH0 s2_acIu
                    of s'_acHS [OS=OneShot] { __DEFAULT ->
                    ((eta_ac5c
                        (binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                           dt_acGZ
                           dt1_acH0
                           dt2_acH1
                           (ghc-prim-0.4.0.0:GHC.Prim.+# dt3_acH2 1)
                           (ghc-prim-0.4.0.0:GHC.Prim.-# dt4_acH3 1)))
                     `cast` (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R
                             :: IO LBS.ByteString
                                ~R# (ghc-prim-0.4.0.0:GHC.Prim.State#
                                       ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                                     -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                           LBS.ByteString #))))
                      s'_acHS
                    }
                    }
                }
                })
           `cast` ((<binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                     -> IO LBS.ByteString>_R
                    -> <binary-0.7.3.0:Data.Binary.Builder.Base.Buffer>_R
                    -> Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <LBS.ByteString>_R))
                   ; Sym binary-0.7.3.0:Data.Binary.Builder.Base.NTCo:Builder[0]
                   :: ((binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                        -> IO LBS.ByteString)
                       -> binary-0.7.3.0:Data.Binary.Builder.Base.Buffer
                       -> ghc-prim-0.4.0.0:GHC.Prim.State#
                            ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                       -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                               ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                             LBS.ByteString #))
                      ~R# binary-0.7.3.0:Data.Binary.Builder.Base.Builder) #)
    }
end Rec }

Main.$fBinaryTree1_$cput [InlPrag=INLINE[0]]
  :: forall a_abbd. Binary a_abbd => Tree1 a_abbd -> Put
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <L,U(C(U(U,U)),A)><S,1*U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ a17_abbd)
                 (w_sdKV [Occ=Once] :: Binary a17_abbd)
                 (w1_sdKW [Occ=Once] :: Tree1 a17_abbd) ->
                 case Main.$w$cput @ a17_abbd w_sdKV w1_sdKW
                 of _ [Occ=Dead] { (# ww1_sdLt [Occ=Once], ww2_sdLu [Occ=Once] #) ->
                 (Data.Binary.Put.PairS @ () ww1_sdLt ww2_sdLu)
                 `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
                         :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
                 }}]
Main.$fBinaryTree1_$cput =
  \ (@ a17_abbd)
    (w_sdKV :: Binary a17_abbd)
    (w1_sdKW :: Tree1 a17_abbd) ->
    case Main.$w$cput @ a17_abbd w_sdKV w1_sdKW
    of _ [Occ=Dead] { (# ww1_sdLt, ww2_sdLu #) ->
    (Data.Binary.Put.PairS @ () ww1_sdLt ww2_sdLu)
    `cast` (Sym Data.Binary.Put.NTCo:PutM[0] <()>_N
            :: Data.Binary.Put.PairS () ~R# Data.Binary.Put.PutM ())
    }

Main.$fBinaryTree1 [InlPrag=[ALWAYS] CONLIKE]
  :: forall a_a4uc. Binary a_a4uc => Binary (Tree1 a_a4uc)
[GblId[DFunId],
 Arity=1,
 Str=DmdType <L,U(C(U(U,U)),U)>m,
 Unf=DFun: \ (@ a17_XbgQ) ($dBinary_XbgS :: Binary a17_XbgQ) ->
       binary-0.7.3.0:Data.Binary.Class.D:Binary TYPE Tree1 a17_XbgQ
                                                 Main.$fBinaryTree1_$cput @ a17_XbgQ $dBinary_XbgS
                                                 Main.$fBinaryTree1_$cget @ a17_XbgQ $dBinary_XbgS]
Main.$fBinaryTree1 =
  \ (@ a17_XbgQ) ($dBinary_XbgS :: Binary a17_XbgQ) ->
    binary-0.7.3.0:Data.Binary.Class.D:Binary
      @ (Tree1 a17_XbgQ)
      (Main.$fBinaryTree1_$cput @ a17_XbgQ $dBinary_XbgS)
      ((Main.$fBinaryTree4 @ a17_XbgQ $dBinary_XbgS)
       `cast` (Sym
                 (Data.Binary.Get.Internal.NTCo:Get[0] <Tree1 a17_XbgQ>_R)
               :: (forall r_acmC.
                   Data.ByteString.Internal.ByteString
                   -> Data.Binary.Get.Internal.Success (Tree1 a17_XbgQ) r_acmC
                   -> Data.Binary.Get.Internal.Decoder r_acmC)
                  ~R# Get (Tree1 a17_XbgQ)))

:Main.main :: IO ()
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main14
               `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
                       :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                             ghc-prim-0.4.0.0:GHC.Prim.RealWorld
                           -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                                   ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                                 () #))
                          ~R# IO ())}]
:Main.main =
  Main.main14
  `cast` (Sym (ghc-prim-0.4.0.0:GHC.Types.NTCo:IO[0] <()>_R)
          :: (ghc-prim-0.4.0.0:GHC.Prim.State#
                ghc-prim-0.4.0.0:GHC.Prim.RealWorld
              -> (# ghc-prim-0.4.0.0:GHC.Prim.State#
                      ghc-prim-0.4.0.0:GHC.Prim.RealWorld,
                    () #))
             ~R# IO ())


------ Local rules for imported ids --------
"SPEC $fBinaryTree @ Int" [ALWAYS]
    forall ($dBinary_scxg :: Binary Int).
      Main.$fBinaryTree @ Int $dBinary_scxg
      = Main.$fBinaryTree_$s$fBinaryTree
"SPEC $cget @ Int" [ALWAYS]
    forall ($dBinary_scxw :: Binary Int).
      Main.$fBinaryTree_$cget @ Int $dBinary_scxw
      = Main.$fBinaryTree_$s$cget
"SPEC $cput @ Int" [ALWAYS]
    forall ($dBinary_scxi :: Binary Int).
      Main.$fBinaryTree_$cput @ Int $dBinary_scxi
      = Main.$fBinaryTree_$s$cput
"SPEC/Main $dmconFixity @ C1_0Tree" [ALWAYS]
    forall ($dConstructor_scCe :: Constructor Main.C1_0Tree).
      GHC.Generics.$dmconFixity @ Main.C1_0Tree $dConstructor_scCe
      = Main.$fConstructorTree_$s$dmconFixity
"SPEC/Main $dmconFixity @ C1_1Tree" [ALWAYS]
    forall ($dConstructor_scCg :: Constructor Main.C1_1Tree).
      GHC.Generics.$dmconFixity @ Main.C1_1Tree $dConstructor_scCg
      = Main.$fConstructorTree0_$s$dmconFixity
"SPEC/Main $dmconIsRecord @ C1_0Tree" [ALWAYS]
    forall ($dConstructor_scCa :: Constructor Main.C1_0Tree).
      GHC.Generics.$dmconIsRecord @ Main.C1_0Tree $dConstructor_scCa
      = Main.$fConstructorTree_$s$dmconIsRecord
"SPEC/Main $dmconIsRecord @ C1_1Tree" [ALWAYS]
    forall ($dConstructor_scCc :: Constructor Main.C1_1Tree).
      GHC.Generics.$dmconIsRecord @ Main.C1_1Tree $dConstructor_scCc
      = Main.$fConstructorTree0_$s$dmconIsRecord
"SPEC/Main $dmisNewtype @ D1Tree" [ALWAYS]
    forall ($dDatatype_scC8 :: Datatype Main.D1Tree).
      GHC.Generics.$dmisNewtype @ Main.D1Tree $dDatatype_scC8
      = Main.$fDatatypeTree_$s$dmisNewtype
"SPEC/Main $fGSumM1 _ @ (M1 S NoSelector (Rec0 Int))" [ALWAYS]
    forall (@ c_abXv)
           ($dGBinary_scC4 :: GBinary (M1 S NoSelector (Rec0 Int))).
      binary-0.7.3.0:Data.Binary.Generic.$fGSumM1 @ c_abXv
                                                  @ (M1 S NoSelector (Rec0 Int))
                                                  $dGBinary_scC4
      = Main.$s$fGBinary:+:_$s$fGSumM2 @ c_abXv
"SPEC/Main $fGSumM1 _ @ (S1 NoSelector (Rec0 (Tree Int))
                        :*: S1 NoSelector (Rec0 (Tree Int)))" [ALWAYS]
    forall (@ c_abXv)
           ($dGBinary_scC6
              :: GBinary
                   (S1 NoSelector (Rec0 (Tree Int))
                    :*: S1 NoSelector (Rec0 (Tree Int)))).
      binary-0.7.3.0:Data.Binary.Generic.$fGSumM1 @ c_abXv
                                                  @ (S1 NoSelector (Rec0 (Tree Int))
                                                     :*: S1 NoSelector (Rec0 (Tree Int)))
                                                  $dGBinary_scC6
      = Main.$s$fGBinary:+:_$s$fGSumM1 @ c_abXv
"SPEC/Main $fGBinaryM1 _ _ @ (K1 R Int)" [ALWAYS]
    forall (@ i_abWI)
           (@ c_abWJ)
           ($dGBinary_sczI :: GBinary (K1 R Int)).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1 @ i_abWI
                                                     @ c_abWJ
                                                     @ (K1 R Int)
                                                     $dGBinary_sczI
      = Main.$s$fGBinary:+:_$s$fGBinaryM3 @ i_abWI @ c_abWJ
"SPEC/Main $fGBinaryM1 _ _ @ (K1 R (Tree Int))" [ALWAYS]
    forall (@ i_abWI)
           (@ c_abWJ)
           ($dGBinary_sczK :: GBinary (K1 R (Tree Int))).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryM1 @ i_abWI
                                                     @ c_abWJ
                                                     @ (K1 R (Tree Int))
                                                     $dGBinary_sczK
      = Main.$s$fGBinary:*:_$s$fGBinaryM1 @ i_abWI @ c_abWJ
"SPEC/Main $fGBinaryK1 _ @ Int" [ALWAYS]
    forall (@ i_abWP) ($dBinary_scBT :: Binary Int).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1 @ i_abWP
                                                     @ Int
                                                     $dBinary_scBT
      = Main.$s$fGBinary:+:_$s$fGBinaryK1 @ i_abWP
"SPEC/Main $fGBinaryK1 _ @ (Tree Int)" [ALWAYS]
    forall (@ i_abWP) ($dBinary_scBV :: Binary (Tree Int)).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinaryK1 @ i_abWP
                                                     @ (Tree Int)
                                                     $dBinary_scBV
      = Main.$s$fGBinary:*:_$s$fGBinaryK1 @ i_abWP
"SPEC/Main $fGBinary:*: @ (M1 S NoSelector (Rec0 (Tree Int))) @ (M1
                                                                  S NoSelector (Rec0 (Tree Int)))" [ALWAYS]
    forall ($dGBinary_scBG
              :: GBinary (M1 S NoSelector (Rec0 (Tree Int))))
           ($dGBinary1_scBH :: GBinary (M1 S NoSelector (Rec0 (Tree Int)))).
      binary-0.7.3.0:Data.Binary.Generic.$fGBinary:*: @ (M1
                                                           S NoSelector (Rec0 (Tree Int)))
                                                      @ (M1 S NoSelector (Rec0 (Tree Int)))
                                                      $dGBinary_scBG
                                                      $dGBinary1_scBH
      = Main.$s$fGBinary:*:

